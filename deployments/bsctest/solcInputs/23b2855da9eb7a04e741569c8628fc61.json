{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/aave/IAaveIncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n\r\ninterface IAaveIncentivesController {\r\n    /**\r\n    * @dev Returns the total of rewards of an user, already accrued + not yet accrued\r\n    * @param user The address of the user\r\n    * @return The rewards\r\n    **/\r\n    function getRewardsBalance(address[] calldata assets, address user)\r\n      external\r\n      view\r\n      returns (uint256);\r\n\r\n    /**\r\n    * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n    * @param amount Amount of rewards to claim\r\n    * @param to Address that will be receiving the rewards\r\n    * @return Rewards claimed\r\n    **/\r\n    function claimRewards(\r\n      address[] calldata assets,\r\n      uint256 amount,\r\n      address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n    * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\r\n    * be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\r\n    * @param amount Amount of rewards to claim\r\n    * @param user Address to check and claim rewards\r\n    * @param to Address that will be receiving the rewards\r\n    * @return Rewards claimed\r\n    **/\r\n    function claimRewardsOnBehalf(\r\n      address[] calldata assets,\r\n      uint256 amount,\r\n      address user,\r\n      address to\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n    * @dev returns the unclaimed rewards of the user\r\n    * @param user the address of the user\r\n    * @return the unclaimed user rewards\r\n    */\r\n    function getUserUnclaimedRewards(address user) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev for backward compatibility with previous implementation of the Incentives controller\r\n    */\r\n    function REWARD_TOKEN() external view returns (address);\r\n}"
    },
    "contracts/mock/aave/IncentivesController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {MockAToken} from \"./MockAToken.sol\";\r\nimport {IAaveIncentivesController} from \"../../interfaces/aave/IAaveIncentivesController.sol\";\r\n\r\ncontract IncentivesController is IAaveIncentivesController {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  address REWARDTOKEN;\r\n\r\n  event RewardsClaimed(address indexed user, address indexed to, uint256 amount);\r\n\r\n  constructor(\r\n    address rewardToken\r\n  ) {\r\n    REWARDTOKEN = rewardToken;\r\n  }\r\n\r\n  /**\r\n   * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\r\n   * @param amount Amount of rewards to claim\r\n   * @param to Address that will be receiving the rewards\r\n   * @return Rewards claimed\r\n   **/\r\n  function claimRewards(\r\n    address[] calldata assets,\r\n    uint256 amount,\r\n    address to\r\n  ) external override returns (uint256) {\r\n    if (amount == 0) {\r\n      return 0;\r\n    }\r\n    address user = msg.sender;\r\n\r\n    uint256 unclaimedRewards = 20 * MockAToken(assets[0]).balanceOf(user) / 100;\r\n\r\n    uint256 amountToClaim = amount > unclaimedRewards ? unclaimedRewards : amount;\r\n    IERC20(REWARDTOKEN).safeTransferFrom(address(this), to, amountToClaim);\r\n    emit RewardsClaimed(msg.sender, to, amountToClaim);\r\n\r\n    return amountToClaim;\r\n  }\r\n\r\n  function getRewardsBalance(address[] calldata assets, address user)\r\n      external\r\n      view\r\n      override\r\n      returns (uint256) {}\r\n    function claimRewardsOnBehalf(\r\n      address[] calldata assets,\r\n      uint256 amount,\r\n      address user,\r\n      address to\r\n    ) external override returns (uint256) {}\r\n    function getUserUnclaimedRewards(address user) external view override returns (uint256) {}\r\n    function REWARD_TOKEN() external view override returns (address) {}\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/mock/aave/MockAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {IncentivesController} from \"./IncentivesController.sol\";\r\nimport {LendingPool} from \"./LendingPool.sol\";\r\nimport {WadRayMath} from \"./libraries/WadRayMath.sol\";\r\n\r\n\r\ncontract MockAToken is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n    using WadRayMath for uint256;\r\n\r\n    LendingPool public immutable POOL;\r\n    IncentivesController public immutable INCENTIVES_CONTROLLER;\r\n    uint8 private _decimals;\r\n    address public immutable UNDERLYING_ASSET_ADDRESS;\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    event Mint(address indexed to, uint256 value, uint256 index);\r\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\r\n\r\n    constructor(\r\n        LendingPool pool,\r\n        IncentivesController controller,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal,\r\n        address uderlyingAssetAddress\r\n    ) ERC20(_name, _symbol) {\r\n        POOL = pool;\r\n        INCENTIVES_CONTROLLER = controller;\r\n        _decimals = _decimal;\r\n        UNDERLYING_ASSET_ADDRESS = uderlyingAssetAddress;\r\n    }\r\n\r\n    // NOTE: it's mocked implementation of mint method\r\n    // in original mint amount could be scaled, depends of lendingPool.liquidityIndex\r\n    function mint(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external returns (bool) {\r\n        _balances[user] += amount;\r\n        _mint(user, amount);\r\n\r\n        emit Transfer(address(0), user, amount);\r\n        emit Mint(user, amount, index);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(\r\n        address user,\r\n        address receiverOfUnderlying,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external {\r\n        uint256 amountScaled = amount.rayDiv(index);\r\n        require(amountScaled != 0, \"CT_INVALID_BURN_AMOUNT\");\r\n        \r\n        _balances[user] -= amount;\r\n        _burn(user, amount);\r\n\r\n        IERC20(UNDERLYING_ASSET_ADDRESS).safeTransfer(receiverOfUnderlying, amount);\r\n\r\n        emit Transfer(user, address(0), amount);\r\n        emit Burn(user, receiverOfUnderlying, amount, index);\r\n    }\r\n\r\n    function hack(\r\n        address[] calldata users\r\n    ) external {\r\n        for(uint256 i = 0; i<users.length; i++) {\r\n            _balances[users[i]] = _balances[users[i]]/2;\r\n        }\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address user)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _balances[user];\r\n    }\r\n\r\n    function balanceOfAToken(address user)\r\n    public\r\n    returns (uint256)\r\n    {\r\n        uint256 userBalance = _balances[user];\r\n        _balances[user] = userBalance.rayMul(POOL.getReserveNormalizedIncome(UNDERLYING_ASSET_ADDRESS));\r\n        return _balances[user];\r\n    }\r\n\r\n    function getIncentivesController() external view returns (IncentivesController) {\r\n        return INCENTIVES_CONTROLLER;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n         _transfer(sender, recipient, amount);\r\n\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n\r\n        return true;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/mock/aave/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.8.0;\r\nimport {LendingPoolAddressesProvider} from \"./LendingPoolAddressesProvider.sol\";\r\nimport {MockAToken} from \"./MockAToken.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport {WadRayMath} from \"./libraries/WadRayMath.sol\";\r\n\r\ncontract LendingPool {\r\n    using SafeERC20 for IERC20;\r\n    using WadRayMath for uint256;\r\n\r\n    struct ReserveData {\r\n        //stores the reserve configuration\r\n        bool configuration;\r\n        //the liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n        //variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n        //the current stable borrow rate. Expressed in ray\r\n        uint128 currentStableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        //tokens addresses\r\n        address aTokenAddress;\r\n        address stableDebtTokenAddress;\r\n        address variableDebtTokenAddress;\r\n        //address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n        //the id of the reserve. Represents the position in the list of the active reserves\r\n        uint8 id;\r\n    }\r\n\r\n    event Deposit(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint16 indexed referral\r\n    );\r\n\r\n    event Withdraw(address asset, address user, address onBehalfOf, uint256 amount);\r\n\r\n    uint256 public currentTime;\r\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\r\n    LendingPoolAddressesProvider public _addressesProvider;\r\n    mapping(address => ReserveData) internal _reserves;\r\n\r\n    function initialize(LendingPoolAddressesProvider provider) public {\r\n        _addressesProvider = provider;\r\n    }\r\n\r\n    function addReserveAsset(address underlyingAsset, address aTokenAddress) public {\r\n        _reserves[underlyingAsset] = ReserveData(\r\n            false,\r\n            1000888888888888888888888888,\r\n            0,  \r\n            1001999999999999999999999999,\r\n            0,\r\n            0,\r\n            0,\r\n            aTokenAddress,\r\n            address(0),\r\n            address(0),\r\n            address(0),\r\n            0\r\n        );\r\n    }\r\n\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external {\r\n        ReserveData storage reserve = _reserves[asset];\r\n\r\n        address aToken = reserve.aTokenAddress;\r\n\r\n        IERC20(asset).safeTransferFrom(msg.sender, aToken, amount);\r\n        MockAToken(aToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\r\n\r\n        emit Deposit(asset, onBehalfOf, onBehalfOf, amount, referralCode);\r\n    }\r\n\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256) {\r\n        ReserveData storage reserve = _reserves[asset];\r\n\r\n        address aToken = reserve.aTokenAddress;\r\n\r\n        uint256 userBalance = MockAToken(aToken).balanceOfAToken(msg.sender);\r\n        uint256 amountToWithdraw = amount;\r\n\r\n        if (amount == type(uint256).max || amount > userBalance) {\r\n            amountToWithdraw = userBalance;\r\n        }\r\n\r\n        MockAToken(aToken).burn(msg.sender, to, amountToWithdraw, reserve.liquidityIndex);\r\n\r\n        emit Withdraw(asset, msg.sender, to, amountToWithdraw);\r\n\r\n        return amountToWithdraw;\r\n    }\r\n\r\n    function getReserveData(address asset) external view returns (ReserveData memory) {\r\n        return _reserves[asset];\r\n    }\r\n\r\n    function getReserveNormalizedIncome(address asset)\r\n        external\r\n        view\r\n    returns (uint256) \r\n    {\r\n        ReserveData storage reserve = _reserves[asset];\r\n        uint40 timestamp = reserve.lastUpdateTimestamp;\r\n\r\n        //solium-disable-next-line\r\n        if (timestamp == _now()) {\r\n        //if the index was updated in the same block, no need to perform any calculation\r\n        return reserve.liquidityIndex;\r\n        }\r\n        \r\n        uint256 cumulated =\r\n        calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\r\n            reserve.liquidityIndex\r\n        );\r\n\r\n        return cumulated;\r\n    }\r\n\r\n\r\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //solium-disable-next-line\r\n        uint256 timeDifference = _now() - uint256(lastUpdateTimestamp);\r\n\r\n        return (rate * timeDifference / SECONDS_PER_YEAR) + WadRayMath.ray();\r\n    }\r\n\r\n    function setCurrentTime(uint256 _currentTime) public {\r\n        currentTime = _currentTime;\r\n    }\r\n\r\n    function increaseCurrentTime(uint256 _timeDelta) public {\r\n        currentTime = currentTime + _timeDelta;\r\n    }\r\n\r\n    function _now() virtual internal view returns (uint256) {\r\n        return currentTime;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/mock/aave/libraries/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title WadRayMath library\r\n * @author Aave\r\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n **/\r\n\r\nlibrary WadRayMath {\r\n  uint256 internal constant WAD = 1e18;\r\n  uint256 internal constant halfWAD = WAD / 2;\r\n\r\n  uint256 internal constant RAY = 1e27;\r\n  uint256 internal constant halfRAY = RAY / 2;\r\n\r\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n  /**\r\n   * @return One ray, 1e27\r\n   **/\r\n  function ray() internal pure returns (uint256) {\r\n    return RAY;\r\n  }\r\n\r\n  /**\r\n   * @return One wad, 1e18\r\n   **/\r\n\r\n  function wad() internal pure returns (uint256) {\r\n    return WAD;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e27/2\r\n   **/\r\n  function halfRay() internal pure returns (uint256) {\r\n    return halfRAY;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e18/2\r\n   **/\r\n  function halfWad() internal pure returns (uint256) {\r\n    return halfWAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a*b, in wad\r\n   **/\r\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfWAD) / b, \"MATH_MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * b + halfWAD) / WAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a/b, in wad\r\n   **/\r\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"MATH_DIVISION_BY_ZERO\");\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / WAD, \"MATH_MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * WAD + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a*b, in ray\r\n   **/\r\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfRAY) / b, \"MATH_MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * b + halfRAY) / RAY;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a/b, in ray\r\n   **/\r\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"MATH_DIVISION_BY_ZERO\");\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / RAY, \"MATH_MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * RAY + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Casts ray down to wad\r\n   * @param a Ray\r\n   * @return a casted to wad, rounded half up to the nearest wad\r\n   **/\r\n  function rayToWad(uint256 a) internal pure returns (uint256) {\r\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\r\n    uint256 result = halfRatio + a;\r\n    require(result >= halfRatio, \"MATH_ADDITION_OVERFLOW\");\r\n\r\n    return result / WAD_RAY_RATIO;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts wad up to ray\r\n   * @param a Wad\r\n   * @return a converted in ray\r\n   **/\r\n  function wadToRay(uint256 a) internal pure returns (uint256) {\r\n    uint256 result = a * WAD_RAY_RATIO;\r\n    require(result / WAD_RAY_RATIO == a, \"MATH_MULTIPLICATION_OVERFLOW\");\r\n    return result;\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mock/aave/LendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract LendingPoolAddressesProvider {\r\n    address private lendingPool;\r\n\r\n    function getLendingPool() external view returns (address) {\r\n        return lendingPool;\r\n    }\r\n\r\n    function setLendingPool(address _lendingPool) external {\r\n        lendingPool = _lendingPool;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/aave/MockAaveController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./LendingPool.sol\";\r\nimport \"./LendingPoolAddressesProvider.sol\";\r\nimport \"./AaveProtocolDataProvider.sol\";\r\nimport \"./IncentivesController.sol\";\r\nimport \"./MockAToken.sol\";\r\nimport \"../../interfaces/IStrategy.sol\";\r\n\r\ncontract MockAaveController is IStrategy {\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public lendingPoolProvider;\r\n    address public protocolDataProvider;\r\n\r\n    constructor(\r\n        address _lendingPoolProvider,\r\n        address _protocolDataProvider\r\n    ) {\r\n        lendingPoolProvider = _lendingPoolProvider;\r\n        protocolDataProvider = _protocolDataProvider;\r\n    }\r\n\r\n    function lendingPool() public view returns (address) {\r\n        return LendingPoolAddressesProvider(lendingPoolProvider).getLendingPool();\r\n    }\r\n\r\n    function strategyToken(address _token) public view override returns (address) {\r\n        (address newATokenAddress,,) =\r\n        AaveProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(_token);\r\n        return newATokenAddress;\r\n    }\r\n\r\n    function updateReserves(address _account, address _token)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return IERC20(_token).balanceOf(_account);\r\n    }\r\n\r\n    function deposit(address _token, uint256 _amount) external override {\r\n        address lendPool = lendingPool();\r\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n        IERC20(_token).safeApprove(lendPool, 0);\r\n        IERC20(_token).safeApprove(lendPool, _amount);\r\n\r\n        LendingPool(lendPool).deposit(\r\n        _token,\r\n        _amount,\r\n        msg.sender,\r\n        0 // referral code\r\n        );\r\n    }\r\n\r\n    function withdrawAll(address _token) external override {\r\n        withdraw(_token, type(uint256).max);\r\n    }\r\n\r\n    function withdraw(address _token, uint256 _amount) public override {\r\n        address lendPool = lendingPool();\r\n        address aToken = strategyToken(_token);\r\n        IERC20(aToken).safeApprove(lendPool, 0);\r\n        IERC20(aToken).safeApprove(lendPool, _amount);\r\n        uint256 maxAmount = IERC20(aToken).balanceOf(msg.sender);\r\n\r\n        uint256 userBalance = IERC20(aToken).balanceOf(msg.sender);\r\n        uint256 amountToWithdraw = _amount;\r\n\r\n        if (_amount == type(uint256).max || _amount > userBalance) {\r\n            amountToWithdraw = userBalance;\r\n        }\r\n\r\n        IERC20(aToken).transferFrom(msg.sender, address(this), amountToWithdraw);\r\n\r\n        uint256 amountWithdrawn = LendingPool(lendPool).withdraw(\r\n            _token,\r\n            amountToWithdraw,\r\n            msg.sender\r\n        );\r\n\r\n        _collectProtocolToken(aToken, amountToWithdraw/maxAmount);\r\n\r\n        require(\r\n        amountWithdrawn == amountToWithdraw ||\r\n        (amountToWithdraw == type(uint256).max && maxAmount == IERC20(_token).balanceOf(aToken)),\r\n        \"Didn't withdraw requested amount\"\r\n        );\r\n    }\r\n\r\n    // Collect stkAAVE\r\n    function _collectProtocolToken(address _token, uint256 _amount) internal {\r\n        address[] memory assets = new address[](1);\r\n        assets[0] = address(_token);\r\n        IncentivesController incentivesController = MockAToken(_token).getIncentivesController();\r\n        uint256 rewardsBalance = incentivesController.getRewardsBalance(assets, address(this));\r\n        incentivesController.claimRewards(assets, _amount*rewardsBalance, address(this));\r\n    }\r\n}\r\n"
    },
    "contracts/mock/aave/AaveProtocolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity ^0.8.0;\r\nimport {LendingPoolAddressesProvider} from \"./LendingPoolAddressesProvider.sol\";\r\nimport {LendingPool} from \"./LendingPool.sol\";\r\n\r\ncontract AaveProtocolDataProvider {\r\n    LendingPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\r\n\r\n    constructor(LendingPoolAddressesProvider addressesProvider) {\r\n        ADDRESSES_PROVIDER = addressesProvider;\r\n    }\r\n\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        )\r\n    {\r\n        LendingPool.ReserveData memory reserve = LendingPool(ADDRESSES_PROVIDER.getLendingPool())\r\n            .getReserveData(asset);\r\n\r\n        return (\r\n            reserve.aTokenAddress,\r\n            reserve.stableDebtTokenAddress,\r\n            reserve.variableDebtTokenAddress\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IStrategy {\r\n    function deposit(address token, uint256 amount) external;\r\n\r\n    function withdraw(address token, uint256 amount) external;\r\n\r\n    function withdrawAll(address token) external;\r\n    function strategyToken(address token) external view returns(address);\r\n    function updateReserves(address account, address token) \r\n        external \r\n        view \r\n        returns(uint256);\r\n}"
    },
    "contracts/periphery/YearnController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/yearn/IYToken.sol\";\r\nimport \"../interfaces/yearn/IYRegistry.sol\";\r\nimport \"../interfaces/yearn/IYearnVault.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\n\r\ncontract YearnController is IStrategy {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  address yRegistry;\r\n  mapping(address => address) public underlyingToYToken;\r\n\r\n  constructor(address _yRegistry) {\r\n    yRegistry = _yRegistry;\r\n    mapToYTokens();\r\n  }\r\n\r\n  function mapToYTokens() internal {\r\n    address[] memory yTokens = IYRegistry(yRegistry).getVaults();\r\n    for (uint256 i = 0; i < yTokens.length; i++) {\r\n      underlyingToYToken[IYearnVault(yTokens[i]).token()] = yTokens[i];\r\n    }\r\n  }\r\n\r\n  function strategyToken(address _token) public view override returns (address) {\r\n    return underlyingToYToken[_token];\r\n  }\r\n\r\n  function updateReserves(address _account, address _token)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return IERC20(_token).balanceOf(_account);\r\n  }\r\n\r\n  function deposit(address _token, uint256 _amount) external override {\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    address YToken = strategyToken(_token);\r\n    IERC20(_token).safeApprove(YToken, 0);\r\n    IERC20(_token).safeApprove(YToken, _amount);\r\n    IYToken(YToken).deposit(_amount);\r\n  }\r\n\r\n  function withdrawAll(address _token) external override {\r\n    withdraw(_token, type(uint256).max);\r\n  }\r\n\r\n  function withdraw(address _token, uint256 _amount) public override {\r\n    IYToken(_token).withdraw(_amount);\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/yearn/IYToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IYToken is IERC20 {\r\n    function deposit(uint _amount) external;\r\n    function withdraw(uint _shares) external;\r\n}\r\n"
    },
    "contracts/interfaces/yearn/IYRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IYRegistry {\r\n    function getVaults() external view returns (address[] memory);\r\n}\r\n"
    },
    "contracts/interfaces/yearn/IYearnVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IYearnVault is IERC20 {\r\n    function deposit(uint256 _amount, address recipient) external returns (uint256);\r\n    function withdraw(uint256 maxShares, address recipient, uint256 maxLoss) external returns (uint256);\r\n    function token() external view returns (address);\r\n    function controller() external view returns (address);\r\n}\r\n"
    },
    "contracts/periphery/SwapProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/ISwapProxy.sol\";\r\n\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract SwapProxy  is Initializable, AccessControlUpgradeable, PausableUpgradeable, ISwapProxy{\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    bytes32 public constant SYSTEM_ROLE = keccak256(\"SYSTEM_ROLE\");\r\n\r\n    IUniswapV2Factory public uniswapFactory;\r\n\r\n     /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n    error SystemBadRole();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlySystem() {\r\n        if (!hasRole(SYSTEM_ROLE, msg.sender)) revert SystemBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n   /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize(IUniswapV2Factory _uniswapFactory) public initializer {\r\n        uniswapFactory = _uniswapFactory;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /* ========== FUNCTIONS  ========== */\r\n\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyAdmin whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function setUniswapFactory(IUniswapV2Factory _uniswapFactory) external onlyAdmin {\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    function swap(\r\n        address _fromToken,\r\n        address _toToken,\r\n        address _receiver\r\n    ) external override onlySystem whenNotPaused returns(uint256 amountOut) {\r\n        console.log(\"swap _fromToken %s _toToken %s\",  _fromToken,_toToken);\r\n        uint256 amount = IERC20(_fromToken).balanceOf(address(this));\r\n        console.log(\"_receiver %s _amount %s\", _receiver,  amount);\r\n        amountOut = _swapExact(_fromToken, _toToken, _receiver, amount);\r\n        return amountOut;\r\n    }\r\n\r\n    /* ========== PRIVATE FUNCTIONS  ========== */\r\n\r\n    function _swapExact(\r\n        address _fromToken,\r\n        address _toToken,\r\n        address _receiver,\r\n        uint256 _amount\r\n    ) private returns(uint256 amountOut) {\r\n        IERC20 erc20 = IERC20(_fromToken);\r\n        IUniswapV2Pair uniswapPair = IUniswapV2Pair(uniswapFactory.getPair(_toToken, _fromToken));\r\n        erc20.safeTransfer(address(uniswapPair), _amount);\r\n\r\n        bool toFirst = _toToken < _fromToken;\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\r\n        if (toFirst) {\r\n            amountOut = getAmountOut(_amount, reserve1, reserve0);\r\n            uniswapPair.swap(amountOut, 0, _receiver, \"\");\r\n        } else {\r\n            amountOut = getAmountOut(_amount, reserve0, reserve1);\r\n            uniswapPair.swap(0, amountOut, _receiver, \"\");\r\n        }\r\n        return amountOut;\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) public pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"insuffient amount\");\r\n        require(reserveIn > 0 && reserveOut > 0, \"insuffient liquidity\");\r\n        uint256 amountInWithFee = amountIn * 997;\r\n        uint256 numerator = amountInWithFee * reserveOut;\r\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/interfaces/ISwapProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface ISwapProxy {\r\n    function swap(\r\n        address _fromToken,\r\n        address _toToken,\r\n        address _receiver\r\n    ) external returns(uint256);\r\n}\r\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/periphery/PriceConsumer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interfaces/IUniswapV2ERC20.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IPriceConsumer.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract PriceConsumer is IPriceConsumer, Ownable, Initializable {\r\n    address public weth;\r\n    address public factory;\r\n\r\n    function initialize(address _weth, address _factory) public initializer {\r\n        weth = _weth;\r\n        factory = _factory;\r\n    }\r\n\r\n    /**\r\n     * @dev get Price of Token in WETH\r\n     * @param _token address of token\r\n     */\r\n    function getPriceOfTokenInWETH(address _token) external view override returns (uint256) {\r\n        return getRate(_token, weth);\r\n    }\r\n\r\n    /**\r\n     * @dev get Price of Token in another token.\r\n     * returns price in decimals of quote token\r\n     * @param _base address of base token\r\n     * @param _quote address of quote token\r\n     * ETH/USD = 3000 (ETH is base, USD is quote)\r\n     * Rate = reserveQuote / reserveBase\r\n     */\r\n    function getRate(address _base, address _quote) public view override returns (uint256) {\r\n        address pairAddress = getPairAddress(_base, _quote);\r\n        if (pairAddress != address(0)) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            address token0address = pair.token0();\r\n            IUniswapV2ERC20 token0 = IUniswapV2ERC20(token0address);\r\n            IUniswapV2ERC20 token1 = IUniswapV2ERC20(pair.token1());\r\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n\r\n            if (token0address == _base) {\r\n                // token0 = _base, token1 = _quote\r\n                // rate = reserve1 / reserve0\r\n                uint256 res1 = reserve1 * (10**token0.decimals());\r\n                return res1 / reserve0;\r\n            } else {\r\n                // token0 = _quote, token1 = _base\r\n                // rate = reserve0 / reserve1\r\n                uint256 res0 = reserve0 * (10**token1.decimals());\r\n                return res0 / reserve1;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getPairAddress(address _token0, address _token1) public view override returns (address) {\r\n        IUniswapV2Factory _factory = IUniswapV2Factory(factory);\r\n        return _factory.getPair(_token0, _token1);\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPriceConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IPriceConsumer {\r\n    function getPriceOfTokenInWETH(address token) external view returns (uint256);\r\n\r\n    function getRate(address base, address quote) external view returns (uint256);\r\n\r\n    function getPairAddress(address token0, address token1) external view returns (address);\r\n}"
    },
    "contracts/mock/MockPriceConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../interfaces/IUniswapV2ERC20.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IPriceConsumer.sol\";\r\n\r\ncontract MockPriceConsumer is IPriceConsumer, Ownable, Initializable {\r\n    address public weth;\r\n    address public factory;\r\n    mapping(address => uint256) public priceFeeds;\r\n\r\n    function initialize(address _weth, address _factory) public initializer {\r\n        weth = _weth;\r\n        factory = _factory;\r\n    }\r\n\r\n    /**\r\n     * @dev get Price of Token in WETH\r\n     * @param _token address of token\r\n     */\r\n    function getPriceOfTokenInWETH(address _token) external view override returns (uint256) {\r\n        return priceFeeds[_token];\r\n    }\r\n\r\n    /**\r\n     * @dev get Price of Token in another token\r\n     * @param _base address of base token\r\n     * @param _quote address of quote token\r\n     * ETH/USD = 3000 (ETH is base, USD is quote)\r\n     * Rate = reserveQuote / reserveBase\r\n     */\r\n    function getRate(address _base, address _quote) public view override returns (uint256) {\r\n        address pairAddress = getPairAddress(_base, _quote);\r\n        if (pairAddress != address(0)) {\r\n            IUniswapV2Pair pair = IUniswapV2Pair(pairAddress);\r\n            address token0address = pair.token0();\r\n            IUniswapV2ERC20 token0 = IUniswapV2ERC20(token0address);\r\n            IUniswapV2ERC20 token1 = IUniswapV2ERC20(pair.token1());\r\n            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n\r\n            if (token0address == _base) {\r\n                // token0 = _base, token1 = _quote\r\n                // rate = reserve1 / reserve0\r\n                uint256 res1 = reserve1 * (10**token0.decimals());\r\n                return res1 / reserve0;\r\n            } else {\r\n                // token0 = _quote, token1 = _base\r\n                // rate = reserve0 / reserve1\r\n                uint256 res0 = reserve0 * (10**token1.decimals());\r\n                return res0 / reserve1;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function getPairAddress(address _token0, address _token1) public view override returns (address) {\r\n        IUniswapV2Factory _factory = IUniswapV2Factory(factory);\r\n        return _factory.getPair(_token0, _token1);\r\n    }\r\n\r\n    function addPriceFeed(address _token, uint256 _price) external onlyOwner {\r\n        priceFeeds[_token] = _price;\r\n    }\r\n}\r\n"
    },
    "contracts/periphery/FeeProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IFeeProxy.sol\";\r\nimport \"../interfaces/IDeBridgeGate.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\ncontract FeeProxy is Initializable, AccessControlUpgradeable, PausableUpgradeable, IFeeProxy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint256 public constant BPS_DENOMINATOR = 10000;\r\n    bytes32 public constant WORKER_ROLE = keccak256(\"WORKER_ROLE\"); // role allowed to withdraw fee\r\n\r\n    IWETH public weth; // wrapped native token contract\r\n\r\n    IDeBridgeGate public debridgeGate;\r\n    IUniswapV2Factory public uniswapFactory;\r\n\r\n    mapping(uint256 => bytes) public feeProxyAddresses; //Addresses of fee proxy addresses in each chain\r\n    mapping(uint256 => bytes) public treasuryAddresses;\r\n\r\n    uint256 public constant ETH_CHAINID = 1; //Ethereum chainId\r\n    address public deEthToken; //address of deETH token\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n    error WorkerBadRole();\r\n    error EmptyFeeProxyAddress(uint256 chainId);\r\n    error EmptyTreasuryAddress(uint256 chainId);\r\n\r\n    error InsuffientAmountIn();\r\n    error InsuffientLiquidity();\r\n\r\n    error CantConvertAddress();\r\n    error WrongArgument();\r\n    error EthTransferFailed();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyWorker() {\r\n        if (!hasRole(WORKER_ROLE, msg.sender)) revert WorkerBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize(IUniswapV2Factory _uniswapFactory, IWETH _weth) public initializer {\r\n        uniswapFactory = _uniswapFactory;\r\n        weth = _weth;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /* ========== FUNCTIONS  ========== */\r\n\r\n    function pause() external onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyAdmin whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function setUniswapFactory(IUniswapV2Factory _uniswapFactory) external onlyAdmin {\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    function setDebridgeGate(IDeBridgeGate _debridgeGate) external onlyAdmin {\r\n        debridgeGate = _debridgeGate;\r\n    }\r\n\r\n    function setTreasury(uint256 _chainId, bytes memory _treasuryAddress) external onlyAdmin {\r\n        treasuryAddresses[_chainId] = _treasuryAddress;\r\n    }\r\n\r\n    function setDeEthToken(address _deEthToken) external onlyAdmin {\r\n        if (_deEthToken == address(0)) revert WrongArgument();\r\n        deEthToken = _deEthToken;\r\n    }\r\n\r\n    function setFeeProxyAddress(uint256 _chainId, bytes memory _address) external onlyAdmin {\r\n        feeProxyAddresses[_chainId] = _address;\r\n    }\r\n\r\n    /// @dev Transfer tokens to native chain and then create swap to deETH\r\n    /// and transfer reward to Ethereum network.\r\n    function withdrawFee(address _tokenAddress) external payable override onlyWorker whenNotPaused {\r\n        (uint256 nativeChain, bytes memory nativeAddress) = debridgeGate.getNativeTokenInfo(\r\n            _tokenAddress\r\n        );\r\n        bytes32 debridgeId = getbDebridgeId(nativeChain, nativeAddress);\r\n\r\n        uint256 chainId = getChainId();\r\n        if (feeProxyAddresses[nativeChain].length == 0) revert EmptyFeeProxyAddress(nativeChain);\r\n        if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\r\n\r\n        address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\r\n\r\n        debridgeGate.withdrawFee(debridgeId);\r\n        uint256 amount = IERC20(_tokenAddress).balanceOf(address(this));\r\n        // original token chain is the same as contract chain\r\n        if (chainId == nativeChain) {\r\n            //Reward is token (DBR, LINK, WETH, deDBT, deLINK, deETH)\r\n            //If token is deETH\r\n            if (_tokenAddress == deEthToken) {\r\n                //Create transfer to Ehereum netrowk ETH\r\n                _burnTransfer(_tokenAddress, amount, nativeChain, msg.value);\r\n            }\r\n            //For others tokens\r\n            else {\r\n                // create swap to weth\r\n                if (_tokenAddress != address(weth)) {\r\n                    _swap(_tokenAddress, address(weth), address(this));\r\n                }\r\n                //If we are in Ethereum chain transfer to Treasury\r\n                if (chainId == ETH_CHAINID) {\r\n                    IERC20(address(weth)).safeTransfer(\r\n                        address(currentTreasuryAddress),\r\n                        weth.balanceOf(address(this))\r\n                    );\r\n                } else {\r\n                    //create swap from Native token to deETH\r\n                    _swap(address(weth), deEthToken, address(this));\r\n                    //transfer deETH to Ethereum\r\n                    uint256 deEthAmount = IERC20(deEthToken).balanceOf(address(this));\r\n                    _burnTransfer(deEthToken, deEthAmount, ETH_CHAINID, msg.value);\r\n                }\r\n            }\r\n        }\r\n        //create transfer if different chains\r\n        else {\r\n            _burnTransfer(_tokenAddress, amount, nativeChain, msg.value);\r\n        }\r\n    }\r\n\r\n    /// @dev Swap native tokens to deETH and then transfer reward to Ethereum network.\r\n    function withdrawNativeFee() external payable override onlyWorker whenNotPaused {\r\n        uint256 chainId = getChainId();\r\n        //DebridgeId of weth in ethereum network\r\n        //TODO: can be set as contstant\r\n        // (, bytes memory nativeAddress) = debridgeGate.getNativeTokenInfo(deEthToken);\r\n        if (feeProxyAddresses[chainId].length == 0) revert EmptyFeeProxyAddress(chainId);\r\n\r\n        // TODO: treasuryAddresses can keep only for ETH network\r\n        // if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\r\n\r\n        // address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\r\n        debridgeGate.withdrawFee(getDebridgeId(chainId, address(0)));\r\n        uint256 amount = address(this).balance - msg.value;\r\n\r\n        //reward is native token (ETH/BNB/HT)\r\n        //If we are in Ethereum chain\r\n        if (chainId == ETH_CHAINID) {\r\n            if (treasuryAddresses[chainId].length == 0) revert EmptyTreasuryAddress(chainId);\r\n            address currentTreasuryAddress = toAddress(treasuryAddresses[chainId]);\r\n            //TODO: send 50% reward to slashing contract\r\n            _safeTransferETH(currentTreasuryAddress, amount);\r\n        }\r\n        //If we are not in Ethereum chain\r\n        else {\r\n            //Wrap native token\r\n            weth.deposit{value: amount}();\r\n            //create swap (BNB/HT) to deETH\r\n            _swap(address(weth), deEthToken, address(this));\r\n            uint256 deEthBalance = IERC20(deEthToken).balanceOf(address(this));\r\n            //transfer deETH to Ethereum\r\n            _burnTransfer(\r\n                deEthToken,\r\n                deEthBalance,\r\n                ETH_CHAINID,\r\n                msg.value\r\n            );\r\n        }\r\n    }\r\n\r\n    // accept ETH\r\n    receive() external payable {}\r\n\r\n    /* ========== VIEW FUNCTIONS  ========== */\r\n\r\n    /// @dev Calculates asset identifier.\r\n    /// @param _chainId Current chain id.\r\n    /// @param _tokenAddress Address of the asset on the other chain.\r\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\r\n    }\r\n\r\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\r\n    }\r\n\r\n    /* ========== PRIVATE FUNCTIONS  ========== */\r\n\r\n    /// @dev Create auto burn transfer with data that will call Transfer fee method in the target network\r\n    function _burnTransfer(\r\n        address _erc20Token,\r\n        uint256 _amount,\r\n        uint256 _nativeChain,\r\n        uint256 _nativeFixFee\r\n    ) private {\r\n        IERC20(_erc20Token).safeApprove(address(debridgeGate), _amount);\r\n        debridgeGate.send{value: _nativeFixFee}(\r\n            _erc20Token,\r\n            _amount,\r\n            _nativeChain, //_chainIdTo,\r\n            feeProxyAddresses[_nativeChain], //_receiver,\r\n            \"\", //_deadline + _signature,\r\n            false, //_useAssetFee,\r\n            0, //_referralCode\r\n            \"\" // _autoParams\r\n        );\r\n    }\r\n\r\n    function _swap(\r\n        address _fromToken,\r\n        address _toToken,\r\n        address _receiver\r\n    ) private {\r\n        IERC20 erc20 = IERC20(_fromToken);\r\n        uint256 _amount = erc20.balanceOf(address(this));\r\n        IUniswapV2Pair uniswapPair = IUniswapV2Pair(uniswapFactory.getPair(_toToken, _fromToken));\r\n        erc20.safeTransfer(address(uniswapPair), _amount);\r\n\r\n        bool toFirst = _toToken < _fromToken;\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = uniswapPair.getReserves();\r\n        if (toFirst) {\r\n            uint256 amountOut = getAmountOut(_amount, reserve1, reserve0);\r\n            uniswapPair.swap(amountOut, 0, _receiver, \"\");\r\n        } else {\r\n            uint256 amountOut = getAmountOut(_amount, reserve0, reserve1);\r\n            uniswapPair.swap(0, amountOut, _receiver, \"\");\r\n        }\r\n    }\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) private pure returns (uint256 amountOut) {\r\n        if (amountIn == 0) revert InsuffientAmountIn();\r\n        if (reserveIn == 0 || reserveOut == 0) revert InsuffientLiquidity();\r\n        uint256 amountInWithFee = amountIn * 997;\r\n        uint256 numerator = amountInWithFee * reserveOut;\r\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes) internal pure returns (address result) {\r\n        if (_bytes.length != 20) revert CantConvertAddress();\r\n        // if address was packed using abi.encodedPacked then it's needed\r\n        // to pad left to get the correct bytes back div by 0x1.... is like doing >> 96\r\n        assembly {\r\n            result := div(mload(add(_bytes, 0x20)), 0x1000000000000000000000000)\r\n        }\r\n    }\r\n\r\n    function getChainId() public view virtual returns (uint256 cid) {\r\n        assembly {\r\n            cid := chainid()\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev transfer ETH to an address, revert if it fails.\r\n    * @param to recipient of the transfer\r\n    * @param value the amount to send\r\n    */\r\n    function _safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        if (!success) revert EthTransferFailed();\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IFeeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IFeeProxy {\r\n    function withdrawFee(address _tokenAddress) external payable;\r\n\r\n    /// @dev Swap  Native tokens to deETH and then transfer reward to Ethereum network.\r\n    function withdrawNativeFee() external payable;\r\n}\r\n"
    },
    "contracts/interfaces/IDeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IDeBridgeGate {\r\n    /* ========== STRUCTS ========== */\r\n\r\n    struct TokenInfo {\r\n        uint256 nativeChainId;\r\n        bytes nativeAddress;\r\n    }\r\n\r\n    struct DebridgeInfo {\r\n        uint256 chainId; // native chain id\r\n        uint256 maxAmount; // maximum amount to transfer\r\n        uint256 balance; // total locked assets\r\n        uint256 lockedInStrategies; // total locked assets in strategy (AAVE, Compound, etc)\r\n        address tokenAddress; // asset address on the current chain\r\n        uint16 minReservesBps; // minimal hot reserves in basis points (1/10000)\r\n        bool exist;\r\n    }\r\n\r\n    struct DebridgeFeeInfo {\r\n        uint256 collectedFees; // total collected fees\r\n        uint256 withdrawnFees; // fees that already withdrawn\r\n        mapping(uint256 => uint256) getChainFee; // whether the chain for the asset is supported\r\n    }\r\n\r\n    struct ChainSupportInfo {\r\n        uint256 fixedNativeFee; // transfer fixed fee\r\n        bool isSupported; // whether the chain for the asset is supported\r\n        uint16 transferFeeBps; // transfer fee rate nominated in basis points (1/10000) of transferred amount\r\n    }\r\n\r\n    struct DiscountInfo {\r\n        uint16 discountFixBps; // fix discount in BPS\r\n        uint16 discountTransferBps; // transfer % discount in BPS\r\n    }\r\n\r\n    /// @param executionFee Fee paid to the transaction executor.\r\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\r\n    struct SubmissionAutoParamsTo {\r\n        uint256 executionFee;\r\n        uint256 flags;\r\n        bytes fallbackAddress;\r\n        bytes data;\r\n    }\r\n\r\n    /// @param executionFee Fee paid to the transaction executor.\r\n    /// @param fallbackAddress Receiver of the tokens if the call fails.\r\n    struct SubmissionAutoParamsFrom {\r\n        uint256 executionFee;\r\n        uint256 flags;\r\n        address fallbackAddress;\r\n        bytes data;\r\n        bytes nativeSender;\r\n    }\r\n\r\n    struct FeeParams {\r\n        uint256 receivedAmount;\r\n        uint256 fixFee;\r\n        uint256 transferFee;\r\n        bool useAssetFee;\r\n        bool isNativeToken;\r\n    }\r\n\r\n    /* ========== FUNCTIONS ========== */\r\n\r\n    /// @dev Locks asset on the chain and enables minting on the other chain.\r\n    /// @param _tokenAddress Asset identifier.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount to be transfered (note: the fee can be applyed).\r\n    /// @param _chainIdTo Chain id of the target chain.\r\n    function send(\r\n        address _tokenAddress,\r\n        uint256 _amount,\r\n        uint256 _chainIdTo,\r\n        bytes memory _receiver,\r\n        bytes memory _permit,\r\n        bool _useAssetFee,\r\n        uint32 _referralCode,\r\n        bytes calldata _autoParams\r\n    ) external payable;\r\n\r\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\r\n    /// @param _nonce Submission id.\r\n    function claim(\r\n        bytes32 _debridgeId,\r\n        uint256 _amount,\r\n        uint256 _chainIdFrom,\r\n        address _receiver,\r\n        uint256 _nonce,\r\n        bytes calldata _signatures,\r\n        bytes calldata _autoParams\r\n    ) external;\r\n\r\n    function flash(\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) external;\r\n\r\n    function getDefiAvaliableReserves(address _tokenAddress) external view returns (uint256);\r\n\r\n    /// @dev Request the assets to be used in defi protocol.\r\n    /// @param _tokenAddress Asset address.\r\n    /// @param _amount Amount of tokens to request.\r\n    function requestReserves(address _tokenAddress, uint256 _amount) external;\r\n\r\n    /// @dev Return the assets that were used in defi protocol.\r\n    /// @param _tokenAddress Asset address.\r\n    /// @param _amount Amount of tokens to claim.\r\n    function returnReserves(address _tokenAddress, uint256 _amount) external;\r\n\r\n    /// @dev Withdraw fees.\r\n    /// @param _debridgeId Asset identifier.\r\n    function withdrawFee(bytes32 _debridgeId) external;\r\n\r\n    function getNativeTokenInfo(address currentTokenAddress)\r\n        external\r\n        view\r\n        returns (uint256 chainId, bytes memory nativeAddress);\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Sent(\r\n        bytes32 submissionId,\r\n        bytes32 indexed debridgeId,\r\n        uint256 amount,\r\n        bytes receiver,\r\n        uint256 nonce,\r\n        uint256 indexed chainIdTo,\r\n        uint32 referralCode,\r\n        FeeParams feeParams,\r\n        bytes autoParams,\r\n        address nativeSender\r\n        // bool isNativeToken //added to feeParams\r\n    ); // emited once the native tokens are locked to be sent to the other chain\r\n\r\n    event Claimed(\r\n        bytes32 submissionId,\r\n        bytes32 indexed debridgeId,\r\n        uint256 amount,\r\n        address indexed receiver,\r\n        uint256 nonce,\r\n        uint256 indexed chainIdFrom,\r\n        bytes autoParams,\r\n        bool isNativeToken\r\n    ); // emited once the tokens are withdrawn on native chain\r\n\r\n    event PairAdded(\r\n        bytes32 debridgeId,\r\n        address tokenAddress,\r\n        bytes nativeAddress,\r\n        uint256 indexed nativeChainId,\r\n        uint256 maxAmount,\r\n        uint16 minReservesBps\r\n    ); // emited when new asset is supported\r\n    event ChainSupportUpdated(uint256 chainId, bool isSupported); // Emits when the asset is allowed/disallowed to be transferred to the chain.\r\n    event ChainsSupportUpdated(uint256[] chainIds); // emited when the supported assets are updated\r\n    event CallProxyUpdated(uint256 variation, address callProxy); // emited when the new call proxy set\r\n    event AutoRequestExecuted(\r\n        bytes32 submissionId,\r\n        bool indexed success,\r\n        address callProxy\r\n    ); // emited when the new call proxy set\r\n\r\n    event Blocked(bytes32 submissionId); //Block submission\r\n    event Unblocked(bytes32 submissionId); //UnBlock submission\r\n\r\n    event Flash(\r\n        address sender,\r\n        address indexed tokenAddress,\r\n        address indexed receiver,\r\n        uint256 amount,\r\n        uint256 paid\r\n    );\r\n\r\n    event WithdrawnFee(bytes32 debridgeId, uint256 fee);\r\n\r\n    event FixedNativeFeeUpdated(\r\n        uint256 globalFixedNativeFee,\r\n        uint256 globalTransferFeeBps);\r\n\r\n    event FixedNativeFeeAutoUpdated(uint256 globalFixedNativeFee);\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/mock/MockWethTestWithGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"./MockWethGate.sol\";\r\n\r\ncontract MockWethTestWithGate is Initializable, AccessControlUpgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    IWETH public weth; // wrapped native token contract\r\n    MockWethGate public withdrawGate;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize(\r\n        IWETH _weth,\r\n        MockWethGate _withdrawGate\r\n    ) public initializer {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        weth = _weth;\r\n        withdrawGate = _withdrawGate;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        weth.deposit{value: msg.value}();\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n\r\n        IERC20(address(weth)).safeTransfer(address(withdrawGate), wad);\r\n        withdrawGate.withdraw(msg.sender, wad);\r\n    }\r\n\r\n    function setWeth(IWETH _weth) external onlyAdmin {\r\n        weth = _weth;\r\n    }\r\n\r\n    function setGate(MockWethGate _withdrawGate) external onlyAdmin {\r\n        withdrawGate = _withdrawGate;\r\n    }\r\n\r\n    // we need to accept ETH sends to unwrap WETH\r\n    receive() external payable {\r\n        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockWethGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\ncontract MockWethGate\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    IWETH public weth; // wrapped native token contract\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error EthTransferFailed();\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    constructor(IWETH _weth) {\r\n        weth = _weth;\r\n    }\r\n\r\n    function withdraw(address receiver, uint wad) public {\r\n        weth.withdraw(wad);\r\n        _safeTransferETH(receiver, wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function _safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        if (!success) revert EthTransferFailed();\r\n    }\r\n\r\n    // we need to accept ETH sends to unwrap WETH\r\n    receive() external payable {\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/transfers/DeBridgeTokenDeployer.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\n\r\nimport \"../interfaces/IDeBridgeTokenDeployer.sol\";\r\nimport \"../periphery/DeBridgeToken.sol\";\r\nimport \"../periphery/DeBridgeTokenProxy.sol\";\r\n\r\ncontract DeBridgeTokenDeployer is\r\n    Initializable,\r\n    AccessControlUpgradeable,\r\n    IDeBridgeTokenDeployer\r\n{\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // address of deBridgeToken implementation\r\n    address public tokenImplementation;\r\n    // admin for any deployed deBridgeToken\r\n    address public deBridgeTokenAdmin;\r\n    // Debridge gate address\r\n    address public debridgeAddress;\r\n    // debridge id => deBridgeToken address\r\n    mapping(bytes32 => address) public getDeployedAssetAddress;\r\n\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error WrongArgument();\r\n    error DeployedAlready();\r\n\r\n    error AdminBadRole();\r\n    error DeBridgeGateBadRole();\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeBridgeGate() {\r\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\r\n        _;\r\n    }\r\n\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    function initialize(\r\n        address _tokenImplementation,\r\n        address _deBridgeTokenAdmin,\r\n        address _debridgeAddress\r\n    ) public initializer {\r\n        tokenImplementation = _tokenImplementation;\r\n        deBridgeTokenAdmin = _deBridgeTokenAdmin;\r\n        debridgeAddress = _debridgeAddress;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    function deployAsset(\r\n        bytes32 _debridgeId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals)\r\n        external\r\n        override\r\n        onlyDeBridgeGate\r\n        returns (address deBridgeTokenAddress)\r\n    {\r\n        if (getDeployedAssetAddress[_debridgeId] != address(0)) revert DeployedAlready();\r\n\r\n        address[] memory minters = new address[](1);\r\n        minters[0] = debridgeAddress;\r\n\r\n        // Initialize args\r\n        bytes memory initialisationArgs = abi.encodeWithSelector(\r\n            DeBridgeToken.initialize.selector,\r\n            _name,\r\n            _symbol,\r\n            _decimals,\r\n            deBridgeTokenAdmin,\r\n            minters\r\n        );\r\n\r\n        // initialize Proxy\r\n        bytes memory constructorArgs = abi.encode(address(this), initialisationArgs);\r\n\r\n        // deployment code\r\n        bytes memory bytecode = abi.encodePacked(type(DeBridgeTokenProxy).creationCode, constructorArgs);\r\n\r\n        assembly {\r\n            // debridgeId is a salt\r\n            deBridgeTokenAddress := create2(0, add(bytecode, 0x20), mload(bytecode), _debridgeId)\r\n\r\n            if iszero(extcodesize(deBridgeTokenAddress)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        getDeployedAssetAddress[_debridgeId] = deBridgeTokenAddress;\r\n        emit DeBridgeTokenDeployed(\r\n            deBridgeTokenAddress,\r\n            _name,\r\n            _symbol,\r\n            _decimals\r\n        );\r\n    }\r\n\r\n    // Beacon getter for the deBridgeToken contracts\r\n    function implementation() public view returns (address) {\r\n        return tokenImplementation;\r\n    }\r\n\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev Set deBridgeToken implementation contract address\r\n    /// @param _impl Wrapped asset implementation contract address.\r\n    function setTokenImplementation(address _impl) external onlyAdmin {\r\n        if (_impl == address(0)) revert WrongArgument();\r\n        tokenImplementation = _impl;\r\n    }\r\n\r\n    /// @dev Set admin for any deployed deBridgeToken.\r\n    /// @param _deBridgeTokenAdmin Admin address.\r\n    function setDeBridgeTokenAdmin(address _deBridgeTokenAdmin) external onlyAdmin {\r\n        if (_deBridgeTokenAdmin == address(0)) revert WrongArgument();\r\n        deBridgeTokenAdmin = _deBridgeTokenAdmin;\r\n    }\r\n\r\n    /// @dev Sets core debridge conrtact address.\r\n    /// @param _debridgeAddress Debridge address.\r\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\r\n        if (_debridgeAddress == address(0)) revert WrongArgument();\r\n        debridgeAddress = _debridgeAddress;\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IDeBridgeTokenDeployer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IDeBridgeTokenDeployer {\r\n\r\n    function deployAsset(\r\n        bytes32 _debridgeId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) external returns (address deTokenAddress);\r\n\r\n    event DeBridgeTokenDeployed(\r\n        address asset,\r\n        string name,\r\n        string symbol,\r\n        uint8 decimals\r\n    );\r\n}\r\n"
    },
    "contracts/periphery/DeBridgeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"../interfaces/IDeBridgeToken.sol\";\r\n\r\ncontract DeBridgeToken is ERC20Upgradeable, AccessControlUpgradeable, IDeBridgeToken {\r\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); // minter role identifier\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces; // transfer's counter\r\n    uint8 internal _decimals;\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error MinterBadRole();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyMinter() {\r\n        if (!hasRole(MINTER_ROLE, msg.sender)) revert MinterBadRole();\r\n        _;\r\n    }\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param name_ Asset's name.\r\n    /// @param symbol_ Asset's symbol.\r\n    /// @param minters The accounts allowed to int new tokens.\r\n    function initialize(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        address admin,\r\n        address[] memory minters\r\n    ) public initializer {\r\n        _decimals = decimals_;\r\n        symbol_ = string(abi.encodePacked(\"de\", symbol_));\r\n        name_ =  string(abi.encodePacked(\"deBridge \", name_));\r\n        __ERC20_init(name_, symbol_);\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\r\n        for (uint256 i = 0; i < minters.length; i++) {\r\n            _setupRole(MINTER_ROLE, minters[i]);\r\n        }\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name_)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @dev Issues new tokens.\r\n    /// @param _receiver Token's receiver.\r\n    /// @param _amount Amount to be minted.\r\n    function mint(address _receiver, uint256 _amount) external override onlyMinter {\r\n        _mint(_receiver, _amount);\r\n    }\r\n\r\n    /// @dev Destroys existed tokens.\r\n    /// @param _amount Amount to be burnt.\r\n    function burn(uint256 _amount) external override onlyMinter {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    /// @dev Approves the spender by signature.\r\n    /// @param _owner Token's owner.\r\n    /// @param _spender Account to be approved.\r\n    /// @param _value Amount to be approved.\r\n    /// @param _deadline The permit valid until.\r\n    /// @param _v Signature part.\r\n    /// @param _r Signature part.\r\n    /// @param _s Signature part.\r\n    function permit(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external override {\r\n        require(_deadline >= block.timestamp, \"permit: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        _owner,\r\n                        _spender,\r\n                        _value,\r\n                        nonces[_owner]++,\r\n                        _deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, _v, _r, _s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == _owner,\r\n            \"permit: invalid signature\"\r\n        );\r\n        _approve(_owner, _spender, _value);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"
    },
    "contracts/periphery/DeBridgeTokenProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\n\r\ncontract DeBridgeTokenProxy is BeaconProxy {\r\n    constructor(address beacon, bytes memory data) BeaconProxy(beacon, data) {\r\n\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/interfaces/IDeBridgeToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\r\nimport \"../interfaces/IERC20Permit.sol\";\r\n\r\ninterface IDeBridgeToken is IERC20Upgradeable, IERC20Permit {\r\n    function mint(address _receiver, uint256 _amount) external;\r\n\r\n    function burn(uint256 _amount) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/mock/yearn/MockYVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./IController.sol\";\r\nimport \"./IVault.sol\";\r\nimport \"./MockYToken.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockYearnVault is IVault {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public token;\r\n    address public underlying;\r\n\r\n    uint256 public min = 9500;\r\n    uint256 public constant max = 10000;\r\n\r\n    address public governance;\r\n    address public controller;\r\n\r\n    constructor(address _token, address _controller)\r\n    {\r\n        token = _token;\r\n        underlying = address(MockYToken(_token).token());\r\n        governance = msg.sender;\r\n        controller = _controller;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this)) + (IController(controller).balanceOf(token));\r\n    }\r\n\r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        return IERC20(token).balanceOf(_account);\r\n    }\r\n\r\n    function totalAssets() public view override returns (uint256) {\r\n        return IERC20(token).balanceOf((address(this)));\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return ERC20(token).decimals();\r\n    }\r\n\r\n    function pricePerShare() public pure override returns (uint256) {\r\n        // TODO: increase current time like aave mocks\r\n        return 15*1e17;\r\n    }\r\n\r\n    function setController(address _controller) public {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function deposit(uint256 _amount) public override {\r\n        uint256 _pool = balance();\r\n        uint256 _before = IERC20(underlying).balanceOf(address(this));\r\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), _amount);\r\n        uint256 _after = IERC20(underlying).balanceOf(address(this));\r\n        _amount = _after - _before; // Additional check for deflationary tokens\r\n        uint256 shares = 0;\r\n        if (IERC20(token).totalSupply() == 0) {\r\n            shares = _amount;\r\n        } else {\r\n            shares = (_amount * (IERC20(token).totalSupply())) / (_pool);\r\n        }\r\n        MockYToken(token).mint(msg.sender, shares);\r\n    }\r\n\r\n    function withdrawAll() external override {\r\n        withdraw(IERC20(token).balanceOf(msg.sender));\r\n    }\r\n\r\n    function withdraw(uint256 _shares) public override returns(uint256) {\r\n        uint256 r = (balance() * (_shares)) / (IERC20(token).totalSupply());\r\n        MockYToken(token).burn(msg.sender, _shares);\r\n\r\n        uint256 b = IERC20(token).balanceOf(address(this));\r\n        if (b < r) {\r\n            uint256 _withdraw = r - b;\r\n            IController(controller).withdraw(address(token), _withdraw);\r\n            uint256 _after = IERC20(token).balanceOf(address(this));\r\n            uint256 _diff = _after - b;\r\n            if (_diff < _withdraw) {\r\n                r = b + _diff;\r\n            }\r\n        }\r\n        IERC20(underlying).safeTransfer(msg.sender, r);\r\n        return r;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/yearn/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function vaults(address) external view returns (address);\r\n}"
    },
    "contracts/mock/yearn/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IVault {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function withdraw(uint256) external returns(uint256);\r\n\r\n    function withdrawAll() external;\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n}"
    },
    "contracts/mock/yearn/MockYToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./YRegistry.sol\";\r\nimport \"./MockYVault.sol\";\r\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n\r\ncontract MockYToken is ERC20 {\r\n\r\n    uint256 constant MAXUINT256 = type(uint256).max;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    YRegistry public registry;\r\n    IERC20 public token;\r\n\r\n    constructor(\r\n        address _registry,\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        address _token\r\n    ) ERC20(name, symbol) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        token = IERC20(_token);\r\n        registry = YRegistry(_registry);\r\n    }\r\n\r\n    function setRegistry(address _registry) external {\r\n        registry = YRegistry(_registry);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256 total) {\r\n        return totalAssets();\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256 balance) {\r\n        return totalVaultBalance(account);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(receiver != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount == _withdraw(sender, receiver, amount));\r\n        emit Transfer(sender, receiver, amount);\r\n    }\r\n\r\n    function transfer(address receiver, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, receiver, amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) external {\r\n        _mint(account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) external {\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function deposit(uint256 amount) external returns (uint256) {\r\n        return _deposit(msg.sender, msg.sender, amount, true); // `true` = pull from sender\r\n    }\r\n\r\n    function withdraw(uint256 amount) external returns (uint256) {\r\n        return _withdraw(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    function allVaults() public view virtual returns (MockYearnVault[] memory) {\r\n        return registry.getVaults();\r\n    }\r\n\r\n    function totalVaultBalance(address account) public view returns (uint256 balance) {\r\n        MockYearnVault[] memory vaults = allVaults();\r\n\r\n        for (uint256 id = 0; id < vaults.length; id++) {\r\n            balance = balance + (vaults[id].balanceOf(account) * (vaults[id].pricePerShare()) / (10**uint256(vaults[id].decimals())));\r\n        }\r\n    }\r\n\r\n    function totalAssets() public view returns (uint256 assets) {\r\n        MockYearnVault[] memory vaults = allVaults();\r\n\r\n        for (uint256 id = 0; id < vaults.length; id++) {\r\n            assets = assets + (vaults[id].totalAssets());\r\n        }\r\n    }\r\n\r\n    function _deposit(\r\n        address depositor,\r\n        address receiver,\r\n        uint256 amount,\r\n        bool pullFunds // If true, funds need to be pulled from `depositor` via `transferFrom`\r\n    ) internal returns (uint256 deposited) {\r\n        MockYearnVault[] memory vaults = allVaults();\r\n        MockYearnVault _bestVault = vaults[vaults.length - 1];\r\n\r\n        if (pullFunds) {\r\n            if (amount == MAXUINT256) {\r\n                amount = token.balanceOf(depositor);\r\n            }\r\n            SafeERC20.safeTransferFrom(token, depositor, address(this), amount);\r\n        }\r\n\r\n        if (token.allowance(address(this), address(_bestVault)) < amount) {\r\n            SafeERC20.safeApprove(token, address(_bestVault), 0); // Avoid issues with some tokens requiring 0\r\n            SafeERC20.safeApprove(token, address(_bestVault), MAXUINT256); // Vaults are trusted\r\n        }\r\n\r\n        uint256 beforeBal = token.balanceOf(address(this));\r\n        _bestVault.deposit(amount);\r\n\r\n        uint256 afterBal = token.balanceOf(address(this));\r\n        deposited = beforeBal - afterBal;\r\n        // `receiver` now has shares of `_bestVault` as balance, converted to `token` here\r\n        // Issue a refund if not everything was deposited\r\n        if (depositor != address(this) && afterBal > 0) SafeERC20.safeTransfer(token, receiver, afterBal);\r\n    }\r\n\r\n    function _withdraw(\r\n        address sender,\r\n        address receiver,\r\n        uint256 amount\r\n    ) internal returns (uint256 withdrawn) {\r\n\r\n        MockYearnVault[] memory vaults = allVaults();\r\n\r\n        for (uint256 id = 0; id < vaults.length; id++) {\r\n            if (amount > 0) {\r\n                if (sender != address(this)) IERC20(token).transferFrom(address(vaults[id]), address(this), amount);\r\n\r\n                if (amount != MAXUINT256) {\r\n                    // Compute amount to withdraw fully to satisfy the request\r\n                    uint256 estimatedShares = amount\r\n                    - (withdrawn) // NOTE: Changes every iteration\r\n                    * (10**uint256(vaults[id].decimals()))\r\n                    / (vaults[id].pricePerShare()); // NOTE: Every Vault is different\r\n                    if (estimatedShares > 0) {\r\n                        withdrawn = withdrawn + vaults[id].withdraw(estimatedShares);\r\n                    }\r\n                } else {\r\n                    withdrawn = IERC20(token).balanceOf(msg.sender);\r\n                }\r\n\r\n                // Check if we have fully satisfied the request\r\n                if (amount <= withdrawn) break; // withdrawn as much as we needed\r\n            }\r\n        }\r\n\r\n        // `receiver` now has `withdrawn` tokens as balance\r\n        if (receiver != address(this)) SafeERC20.safeTransfer(token, receiver, withdrawn);\r\n    }\r\n}\r\n"
    },
    "contracts/mock/yearn/YRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./EnumerableSet.sol\";\r\nimport \"./MockYController.sol\";\r\nimport \"./MockYVault.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\ncontract YRegistry {\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    EnumerableSet.AddressSet private vaults;\r\n    EnumerableSet.AddressSet private controllers;\r\n\r\n    constructor() {}\r\n\r\n    function addVault(address _vault) public {\r\n        setVault(_vault);\r\n\r\n        address controller = getVaultData(_vault);\r\n\r\n        setController(controller);\r\n    }\r\n\r\n    function setController(address _controller) internal {\r\n        if (!controllers.contains(_controller)) {\r\n            controllers.add(_controller);\r\n        }\r\n    }\r\n\r\n    function setVault(address _vault) internal {\r\n        require(_vault.isContract(), \"Vault is not a contract\");\r\n        // Checks if vault is already on the array\r\n        require(!vaults.contains(_vault), \"Vault already exists\");\r\n        // Adds unique _vault to vaults array\r\n        vaults.add(_vault);\r\n    }\r\n\r\n    function getVaultData(address _vault)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address vault = _vault;\r\n\r\n        // Get values from controller\r\n        address controller = MockYearnVault(vault).controller();\r\n        address token = MockYearnVault(vault).underlying();\r\n\r\n        // Check if vault is set on controller for token\r\n        address controllerVault = address(0);\r\n        controllerVault = MockYController(controller).vaults(token);\r\n        require(controllerVault == vault, \"Controller vault address does not match\"); // Might happen on Proxy Vaults\r\n\r\n        return controller;\r\n    }\r\n\r\n    function getVaults() external view returns (MockYearnVault[] memory) {\r\n        MockYearnVault[] memory vaultsArray = new MockYearnVault[](vaults.length());\r\n        for (uint256 i = 0; i < vaults.length(); i++) {\r\n            vaultsArray[i] = MockYearnVault(vaults.at(i));\r\n        }\r\n        return vaultsArray;\r\n    }\r\n}"
    },
    "contracts/mock/yearn/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/yearn/MockYController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./IController.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract MockYController is IController {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    mapping(address => address) public _vaults;\r\n    mapping(address => uint256) public balances;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function setVault(address _token, address _vault) public {\r\n        require(_vaults[_token] == address(0), \"vault\");\r\n        _vaults[_token] = _vault;\r\n    }\r\n\r\n    function balanceOf(address _token) external view override returns (uint256) {\r\n        return balances[_token];\r\n    }\r\n\r\n    function withdrawAll(address _token) public {\r\n        withdraw(_token, type(uint256).max);\r\n    }\r\n\r\n    function withdraw(address _token, uint256 _amount) public override {\r\n        require(msg.sender == _vaults[_token], \"!vault\");\r\n        balances[_token] -= _amount;\r\n        IERC20(_token).safeTransferFrom(_token, msg.sender, _amount);\r\n    }\r\n\r\n    function vaults(address _token) public view override returns (address) {\r\n        return _vaults[_token];\r\n    }\r\n}\r\n"
    },
    "contracts/periphery/CompoundController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/compound/IComptroller.sol\";\r\nimport \"../interfaces/compound/ICToken.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\n\r\ncontract CompoundController is IStrategy {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  IComptroller public comptroller;\r\n  mapping(address => address) public underlyingToCToken;\r\n\r\n  constructor(address _comptroller) {\r\n    comptroller = IComptroller(_comptroller);\r\n    mapToCTokens();\r\n  }\r\n\r\n  function mapToCTokens() internal {\r\n    address[] memory cTokens = comptroller.getAllMarkets();\r\n    for (uint256 i = 0; i < cTokens.length; i++) {\r\n      underlyingToCToken[ICToken(cTokens[i]).underlying()] = cTokens[i];\r\n    }\r\n  }\r\n\r\n  function strategyToken(address _token) public view override returns (address) {\r\n    address CToken = underlyingToCToken[_token];\r\n    require(ICToken(CToken).isCToken(), \"cToken: underlying does not map to cToken\");\r\n    return CToken;\r\n  }\r\n\r\n  function updateReserves(address _account, address _token)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return IERC20(_token).balanceOf(_account);\r\n  }\r\n\r\n  function deposit(address _token, uint256 _amount) external override {\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    address CToken = strategyToken(_token);\r\n    IERC20(_token).safeApprove(CToken, 0);\r\n    IERC20(_token).safeApprove(CToken, _amount);\r\n    uint256 mintResult = ICToken(CToken).mint(_amount);\r\n    require(mintResult == 0, \"Supplying failed\");\r\n  }\r\n\r\n  function withdrawAll(address _token) external override {\r\n    uint256 owned = ICToken(_token).balanceOfUnderlying(address(this));\r\n    withdraw(_token, owned);\r\n  }\r\n\r\n  function withdraw(address _token, uint256 _amount) public override {\r\n    uint256 redeemResult = ICToken(_token).redeemUnderlying(_amount);\r\n    _collectProtocolToken(_token);\r\n    require(redeemResult == 0, \"Redeeming failed\");\r\n  }\r\n\r\n  // Collect COMP\r\n  function _collectProtocolToken(address _token) internal {\r\n      address[] memory cTokens = new address[](1);\r\n      cTokens[0] = address(_token);\r\n      comptroller.claimComp(address(this), cTokens);\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IComptroller {\r\n    function getAllMarkets() external view returns (address[] memory);\r\n    function claimComp(address holder) external;\r\n    function claimComp(address holder, address[] memory cTokens) external;\r\n}\r\n"
    },
    "contracts/interfaces/compound/ICToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ICToken is IERC20  {\r\n    function underlying() external view returns (address);\r\n    function balanceOfUnderlying(address account) external returns (uint);\r\n    function isCToken() external view returns (bool);\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemAmount) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n\r\n    // Accrue interest then return the up-to-date exchange rate\r\n    function exchangeRateCurrent() external returns (uint);\r\n\r\n    // Calculates the exchange rate from the underlying to the CToken\r\n    // This function does not accrue interest before calculating the exchange rate\r\n    function exchangeRateStored() external view returns (uint);\r\n}\r\n"
    },
    "contracts/mock/compound/Comptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../../interfaces/compound/ICToken.sol\";\r\n\r\ncontract Comptroller {\r\n    address public admin;\r\n    address[] public allMarkets;\r\n\r\n    constructor() {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function claimComp(address holder, ICToken[] memory cTokens) public {\r\n\r\n    }\r\n\r\n    function addMarket(address cToken) public {\r\n        for (uint i = 0; i < allMarkets.length; i ++) {\r\n            require(allMarkets[i] != address(cToken), \"market already added\");\r\n        }\r\n        allMarkets.push(address(cToken));\r\n    }\r\n\r\n    function getAllMarkets() public view returns (address[] memory) {\r\n        return allMarkets;\r\n    }\r\n}"
    },
    "contracts/mock/compound/MockCToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"./Comptroller.sol\";\r\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract MockCToken is ERC20 {\r\n    using SafeERC20 for IERC20;\r\n    address public admin;\r\n    address public comptroller;\r\n    uint8 _decimals;\r\n    address public immutable UNDERLYING_ASSET_ADDRESS;\r\n    uint256 public accrualBlockNumber;\r\n    mapping(address => uint256) public accountTokens;\r\n\r\n    event Mint(address indexed to, uint256 value, uint256 index);\r\n    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\r\n\r\n    constructor(\r\n        address _comptroller,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 decimals_,\r\n        address uderlyingAssetAddress\r\n    ) ERC20(_name, _symbol) {\r\n        require(accrualBlockNumber == 0, \"market may only be initialized once\");\r\n\r\n        UNDERLYING_ASSET_ADDRESS = uderlyingAssetAddress;\r\n        _setComptroller(_comptroller);\r\n\r\n        accrualBlockNumber = getBlockNumber();\r\n\r\n        _decimals = decimals_;\r\n        comptroller = _comptroller;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n         _transfer(sender, recipient, amount);\r\n\r\n        accountTokens[sender] -= amount;\r\n        accountTokens[recipient] += amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        return accountTokens[owner];\r\n    }\r\n\r\n    function balanceOfCToken(address user)\r\n    public\r\n    returns (uint256)\r\n    {\r\n        uint256 userBalance = accountTokens[user];\r\n        accountTokens[user] = userBalance /* TODO: add accrued rewards */;\r\n        return accountTokens[user];\r\n    }\r\n\r\n    function mint(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external {\r\n        accountTokens[user] += amount;\r\n        _mint(user, amount);\r\n\r\n        emit Transfer(address(0), user, amount);\r\n        emit Mint(user, amount, index);\r\n    }\r\n\r\n    function burn(\r\n        address user,\r\n        address receiverOfUnderlying,\r\n        uint256 amount,\r\n        uint256 index\r\n    ) external {\r\n\r\n        accountTokens[user] -= amount;\r\n        _burn(user, amount);\r\n\r\n        IERC20(UNDERLYING_ASSET_ADDRESS).safeTransfer(receiverOfUnderlying, amount);\r\n\r\n        emit Transfer(user, address(0), amount);\r\n        emit Burn(user, receiverOfUnderlying, amount, index);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getBlockNumber() internal view returns (uint) {\r\n        return block.number;\r\n    }\r\n\r\n    function _setComptroller(address newComptroller) public {\r\n        comptroller = newComptroller;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/compound/MockCompoundController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./Comptroller.sol\";\r\nimport \"./MockCToken.sol\";\r\nimport \"../../interfaces/IStrategy.sol\";\r\n\r\ncontract MockCompoundController is IStrategy {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  Comptroller public comptroller;\r\n  mapping(address => address) public underlyingToCToken;\r\n\r\n  constructor(address _comptroller) {\r\n    comptroller = Comptroller(_comptroller);\r\n    mapToCTokens();\r\n  }\r\n\r\n  function mapToCTokens() internal {\r\n    address[] memory cTokens = comptroller.getAllMarkets();\r\n    for (uint256 i = 0; i < cTokens.length; i++) {\r\n      underlyingToCToken[MockCToken(cTokens[i]).UNDERLYING_ASSET_ADDRESS()] = cTokens[i];\r\n    }\r\n  }\r\n\r\n  function strategyToken(address _token) public view override returns (address) {\r\n    require(underlyingToCToken[_token] != address(0), \"MockCompoundController: underlying does not map to cToken\");\r\n    return underlyingToCToken[_token];\r\n  }\r\n\r\n  function updateReserves(address _account, address _token)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return IERC20(_token).balanceOf(_account);\r\n  }\r\n\r\n  function deposit(address _token, uint256 _amount) external override {\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    address CToken = strategyToken(_token);\r\n    IERC20(_token).safeApprove(CToken, 0);\r\n    IERC20(_token).safeApprove(CToken, _amount);\r\n    MockCToken(CToken).mint(msg.sender, _amount, 0);\r\n  }\r\n\r\n  function withdrawAll(address _token) external override {\r\n    withdraw(_token, type(uint256).max);\r\n  }\r\n\r\n  function withdraw(address _token, uint256 _amount) public override {\r\n    address cToken = strategyToken(_token);\r\n\r\n    uint256 userBalance = IERC20(cToken).balanceOf(msg.sender);\r\n    uint256 amountToWithdraw = _amount;\r\n\r\n    if (_amount == type(uint256).max || _amount > userBalance) {\r\n        amountToWithdraw = userBalance;\r\n    }\r\n\r\n    IERC20(cToken).transferFrom(msg.sender, address(this), amountToWithdraw);\r\n    MockCToken(cToken).burn(msg.sender, msg.sender, amountToWithdraw, 0);\r\n\r\n    _collectProtocolToken(_token);\r\n  }\r\n\r\n  // Collect COMP\r\n  function _collectProtocolToken(address _token) internal {\r\n      ICToken[] memory cTokens = new ICToken[](1);\r\n      cTokens[0] = ICToken(_token);\r\n      comptroller.claimComp(address(this), cTokens);\r\n  }\r\n}\r\n"
    },
    "contracts/periphery/CallProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../interfaces/ICallProxy.sol\";\r\nimport \"../libraries/Flags.sol\";\r\n\r\ncontract CallProxy is Initializable, AccessControlUpgradeable, ICallProxy {\r\n    using SafeERC20 for IERC20;\r\n    using Flags for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    bytes32 public constant DEBRIDGE_GATE_ROLE = keccak256(\"DEBRIDGE_GATE_ROLE\"); // role allowed to withdraw fee\r\n    uint256 public variation;\r\n\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error DeBridgeGateBadRole();\r\n\r\n    error ExternalCallFailed();\r\n    error CallFailed();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyGateRole() {\r\n        if (!hasRole(DEBRIDGE_GATE_ROLE, msg.sender)) revert DeBridgeGateBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize(uint256 _variation) public initializer {\r\n        variation = _variation;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    function call(\r\n        address _reserveAddress,\r\n        address _receiver,\r\n        bytes memory _data,\r\n        uint256 _flags,\r\n        bytes memory _nativeSender\r\n    ) external payable override onlyGateRole returns (bool _result) {\r\n        // Add last argument is sender from original network\r\n        if (_flags.getFlag(Flags.PROXY_WITH_SENDER)) {\r\n            _data = abi.encodePacked(_data, _nativeSender);\r\n        }\r\n\r\n        _result = externalCall(_receiver, msg.value, _data.length, _data);\r\n\r\n        if (!_result && _flags.getFlag(Flags.REVERT_IF_EXTERNAL_FAIL)) {\r\n            revert ExternalCallFailed();\r\n        }\r\n        if (!_result) {\r\n            (bool success, ) = _reserveAddress.call{value: msg.value}(new bytes(0));\r\n            if (!success) revert CallFailed();\r\n        }\r\n    }\r\n\r\n    function callERC20(\r\n        address _token,\r\n        address _reserveAddress,\r\n        address _receiver,\r\n        bytes memory _data,\r\n        uint256 _flags,\r\n        bytes memory _nativeSender\r\n    ) external override onlyGateRole returns (bool _result) {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeApprove(_receiver, 0);\r\n        IERC20(_token).safeApprove(_receiver, amount);\r\n\r\n        // Add last argument is sender from original network\r\n        if (_flags.getFlag(Flags.PROXY_WITH_SENDER)) {\r\n            _data = abi.encodePacked(_data, _nativeSender);\r\n        }\r\n\r\n        _result = externalCall(_receiver, 0, _data.length, _data);\r\n        amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        if (!_result &&_flags.getFlag(Flags.REVERT_IF_EXTERNAL_FAIL)) {\r\n            revert ExternalCallFailed();\r\n        }\r\n        if (!_result || amount > 0) {\r\n            IERC20(_token).safeTransfer(_reserveAddress, amount);\r\n        }\r\n    }\r\n\r\n    //gnosis\r\n    //https://github.com/gnosis/MultiSigWallet/blob/ca981359cf5acd6a1f9db18e44777e45027df5e0/contracts/MultiSigWallet.sol#L244-L261\r\n\r\n    function externalCall(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataLength,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        bool result;\r\n        assembly {\r\n            let x := mload(0x40) // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710), // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0 // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 102; // 1.0.2\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ICallProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface ICallProxy {\r\n    function call(\r\n        address _fallbackAddress,\r\n        address _receiver,\r\n        bytes memory _data,\r\n        uint256 _flags,\r\n        bytes memory _nativeSender\r\n    ) external payable returns (bool);\r\n\r\n    function callERC20(\r\n        address _token,\r\n        address _fallbackAddress,\r\n        address _receiver,\r\n        bytes memory _data,\r\n        uint256 _flags,\r\n        bytes memory _nativeSender\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/libraries/Flags.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nlibrary Flags {\r\n\r\n    /* ========== FLAGS ========== */\r\n\r\n    // Flag to unwrap ETH\r\n    uint256 public constant UNWRAP_ETH = 0;\r\n    // Flag to revert if external call fails\r\n    uint256 public constant REVERT_IF_EXTERNAL_FAIL = 1;\r\n    // Flag to call proxy with a sender contract\r\n    uint256 public constant PROXY_WITH_SENDER = 2;\r\n\r\n    function getFlag(\r\n        uint256 _packedFlags,\r\n        uint256 _flag\r\n    ) internal pure returns (bool) {\r\n        uint256 flag = (_packedFlags >> _flag) & uint256(1);\r\n        return flag == 1;\r\n    }\r\n\r\n    // function setFlag(\r\n    //     uint256 _packedFlags,\r\n    //     uint256 _flag,\r\n    //     bool _value\r\n    // ) internal pure returns (uint256) {\r\n    //     if (_value)\r\n    //         return _packedFlags | uint256(1) << _flag;\r\n    //     else\r\n    //         return _packedFlags & ~(uint256(1) << _flag);\r\n    // }\r\n}\r\n"
    },
    "contracts/transfers/DeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"../interfaces/IERC20Permit.sol\";\r\nimport \"../interfaces/IDeBridgeToken.sol\";\r\nimport \"../interfaces/IDeBridgeTokenDeployer.sol\";\r\nimport \"../interfaces/ISignatureVerifier.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\nimport \"../interfaces/IDeBridgeGate.sol\";\r\nimport \"../interfaces/IConfirmationAggregator.sol\";\r\nimport \"../interfaces/ICallProxy.sol\";\r\nimport \"../interfaces/IFlashCallback.sol\";\r\nimport \"../libraries/SignatureUtil.sol\";\r\nimport \"../libraries/Flags.sol\";\r\n\r\ncontract DeBridgeGate is\r\n    Initializable,\r\n    AccessControlUpgradeable,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    IDeBridgeGate\r\n{\r\n    using SafeERC20 for IERC20;\r\n    using SignatureUtil for bytes;\r\n    using Flags for uint256;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Basis points or bps equal to 1/10000\r\n    // used to express relative values (fees)\r\n    uint256 public constant BPS_DENOMINATOR = 10000;\r\n    bytes32 public constant GOVMONITORING_ROLE = keccak256(\"GOVMONITORING_ROLE\"); // role allowed to stop transfers\r\n\r\n    address public deBridgeTokenDeployer;\r\n    address public signatureVerifier; // current signatureVerifier address to verify signatures\r\n    address public confirmationAggregator; // current aggregator address to verify by oracles confirmations\r\n    uint8 public excessConfirmations; // minimal required confirmations in case of too many confirmations\r\n    uint256 public flashFeeBps; // fee in basis points (1/10000)\r\n    uint256 public nonce; //outgoing submissions count\r\n\r\n    mapping(uint256 => address) public callProxyAddresses; // proxy to execute user's calls\r\n    mapping(bytes32 => DebridgeInfo) public getDebridge; // debridgeId (i.e. hash(native chainId, native tokenAddress)) => token\r\n    mapping(bytes32 => DebridgeFeeInfo) public getDebridgeFeeInfo;\r\n    mapping(bytes32 => bool) public isSubmissionUsed; // submissionId (i.e. hash( debridgeId, amount, receiver, nonce)) => whether is claimed\r\n    mapping(bytes32 => bool) public isBlockedSubmission; // submissionId  => is blocked\r\n    mapping(bytes32 => uint256) public getAmountThreshold; // debridge => amount threshold\r\n    mapping(uint256 => ChainSupportInfo) public getChainSupport; // whether the chain for the asset is supported\r\n    mapping(address => DiscountInfo) public feeDiscount; //fee discount for address\r\n\r\n    mapping(address => TokenInfo) public getNativeInfo; //return native token info by wrapped token address\r\n\r\n    address public defiController; // proxy to use the locked assets in Defi protocols\r\n    address public feeProxy; // proxy to convert the collected fees into Link's\r\n    IWETH public weth; // wrapped native token contract\r\n\r\n    address public feeContractUpdater; // contract address that can override globalFixedNativeFee\r\n\r\n    uint256 public globalFixedNativeFee;\r\n    uint16 public globalTransferFeeBps;\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error FeeProxyBadRole();\r\n    error DefiControllerBadRole();\r\n    error FeeContractUpdaterBadRole();\r\n    error AdminBadRole();\r\n    error GovMonitoringBadRole();\r\n    error DebridgeNotFound();\r\n\r\n    error WrongTargedChain();\r\n    error WrongArgument();\r\n    error WrongAutoArgument();\r\n\r\n    error TransferAmountTooHigh();\r\n\r\n    error NotSupportedFixedFee();\r\n    error TransferAmountNotCoverFees();\r\n    error InvalidTokenToSend();\r\n\r\n    error SubmissionUsed();\r\n    error SubmissionNotConfirmed();\r\n    error SubmissionAmountNotConfirmed();\r\n    error SubmissionBlocked();\r\n\r\n    error AmountMismatch();\r\n\r\n    error AssetAlreadyExist();\r\n    error AssetNotConfirmed();\r\n    error ZeroAddress();\r\n\r\n    error ProposedFeeTooHigh();\r\n    error FeeNotPaid();\r\n\r\n    error NotEnoughReserves();\r\n    error EthTransferFailed();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyFeeProxy() {\r\n        if (feeProxy != msg.sender) revert FeeProxyBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyDefiController() {\r\n        if (defiController != msg.sender) revert DefiControllerBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyFeeContractUpdater() {\r\n        if (feeContractUpdater != msg.sender) revert FeeContractUpdaterBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovMonitoring() {\r\n        if (!hasRole(GOVMONITORING_ROLE, msg.sender)) revert GovMonitoringBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _signatureVerifier Aggregator address to verify signatures\r\n    /// @param _confirmationAggregator Aggregator address to verify by oracles confirmations\r\n    function initialize(\r\n        uint8 _excessConfirmations,\r\n        address _signatureVerifier,\r\n        address _confirmationAggregator,\r\n        address _callProxy,\r\n        IWETH _weth,\r\n        address _feeProxy,\r\n        address _deBridgeTokenDeployer,\r\n        address _defiController\r\n    ) public initializer {\r\n        _addAsset(\r\n            getDebridgeId(getChainId(), address(_weth)),\r\n            address(_weth),\r\n            abi.encodePacked(address(_weth)),\r\n            getChainId()\r\n        );\r\n\r\n        signatureVerifier = _signatureVerifier;\r\n        confirmationAggregator = _confirmationAggregator;\r\n\r\n        callProxyAddresses[0] = _callProxy;\r\n        defiController = _defiController;\r\n        excessConfirmations = _excessConfirmations;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        weth = _weth;\r\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\r\n        feeProxy = _feeProxy;\r\n\r\n        __ReentrancyGuard_init();\r\n    }\r\n\r\n    /* ========== send, claim ========== */\r\n\r\n    /// @dev Locks asset on the chain and enables minting on the other chain.\r\n    /// @param _tokenAddress Asset identifier.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount to be transfered (note: the fee can be applyed).\r\n    /// @param _chainIdTo Chain id of the target chain.\r\n    /// @param _permit deadline + signature for approving the spender by signature.\r\n    function send(\r\n        address _tokenAddress,\r\n        uint256 _amount,\r\n        uint256 _chainIdTo,\r\n        bytes memory _receiver,\r\n        bytes memory _permit,\r\n        bool _useAssetFee,\r\n        uint32 _referralCode,\r\n        bytes calldata _autoParams\r\n    ) external payable override nonReentrant whenNotPaused {\r\n        bytes32 debridgeId;\r\n        FeeParams memory feeParams;\r\n        uint256 amountAfterFee;\r\n        // the amount will be reduced by the protocol fee\r\n        (amountAfterFee, debridgeId, feeParams) = _send(\r\n            _permit,\r\n            _tokenAddress,\r\n            _amount,\r\n            _chainIdTo,\r\n            _useAssetFee\r\n        );\r\n\r\n        SubmissionAutoParamsTo memory autoParams = _validateAutoParams(_autoParams, amountAfterFee);\r\n        amountAfterFee -= autoParams.executionFee;\r\n\r\n        // round down amount in order not to bridge dust\r\n        amountAfterFee = _normalizeTokenAmount(_tokenAddress, amountAfterFee);\r\n\r\n        bytes32 submissionId = getSubmissionIdTo(\r\n            debridgeId,\r\n            _chainIdTo,\r\n            amountAfterFee,\r\n            _receiver,\r\n            autoParams,\r\n            _autoParams.length > 0\r\n        );\r\n\r\n        emit Sent(\r\n            submissionId,\r\n            debridgeId,\r\n            amountAfterFee,\r\n            _receiver,\r\n            nonce,\r\n            _chainIdTo,\r\n            _referralCode,\r\n            feeParams,\r\n            _autoParams,\r\n            msg.sender\r\n        );\r\n        nonce++;\r\n    }\r\n\r\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\r\n    /// @param _nonce Submission id.\r\n    function claim(\r\n        bytes32 _debridgeId,\r\n        uint256 _amount,\r\n        uint256 _chainIdFrom,\r\n        address _receiver,\r\n        uint256 _nonce,\r\n        bytes calldata _signatures,\r\n        bytes calldata _autoParams\r\n    ) external override whenNotPaused {\r\n\r\n        SubmissionAutoParamsFrom memory autoParams;\r\n        if (_autoParams.length > 0) {\r\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsFrom));\r\n        }\r\n\r\n        bytes32 submissionId = getSubmissionIdFrom(\r\n            _debridgeId,\r\n            _chainIdFrom,\r\n            _amount,\r\n            _receiver,\r\n            _nonce,\r\n            autoParams,\r\n            _autoParams.length > 0\r\n        );\r\n\r\n        _checkConfirmations(submissionId, _debridgeId, _amount, _signatures);\r\n\r\n        bool isNativeToken =_claim(\r\n            submissionId,\r\n            _debridgeId,\r\n            _receiver,\r\n            _amount,\r\n            autoParams\r\n        );\r\n\r\n        emit Claimed(\r\n            submissionId,\r\n            _debridgeId,\r\n            _amount,\r\n            _receiver,\r\n            _nonce,\r\n            _chainIdFrom,\r\n            _autoParams,\r\n            isNativeToken\r\n        );\r\n    }\r\n\r\n    function flash(\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        bytes memory _data\r\n    ) external override nonReentrant whenNotPaused // noDelegateCall\r\n    {\r\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\r\n        if (!getDebridge[debridgeId].exist) revert DebridgeNotFound();\r\n        uint256 currentFlashFee = (_amount * flashFeeBps) / BPS_DENOMINATOR;\r\n        uint256 balanceBefore = IERC20(_tokenAddress).balanceOf(address(this));\r\n\r\n        IERC20(_tokenAddress).safeTransfer(_receiver, _amount);\r\n        IFlashCallback(msg.sender).flashCallback(currentFlashFee, _data);\r\n\r\n        uint256 balanceAfter = IERC20(_tokenAddress).balanceOf(address(this));\r\n        if (balanceBefore + currentFlashFee > balanceAfter) revert FeeNotPaid();\r\n\r\n        uint256 paid = balanceAfter - balanceBefore;\r\n        getDebridgeFeeInfo[debridgeId].collectedFees += paid;\r\n        emit Flash(msg.sender, _tokenAddress, _receiver, _amount, paid);\r\n    }\r\n\r\n    function deployNewAsset(\r\n        bytes memory _nativeTokenAddress,\r\n        uint256 _nativeChainId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        bytes memory _signatures\r\n    ) external nonReentrant whenNotPaused{\r\n        bytes32 debridgeId = getbDebridgeId(_nativeChainId, _nativeTokenAddress);\r\n\r\n        if (getDebridge[debridgeId].exist) revert AssetAlreadyExist();\r\n\r\n        bytes32 deployId =  keccak256(abi.encodePacked(debridgeId, _name, _symbol, _decimals));\r\n        if(_signatures.length > 0){\r\n            // verify signatures\r\n            ISignatureVerifier(signatureVerifier).submit(deployId, _signatures, excessConfirmations);\r\n        }\r\n        else {\r\n            bytes32 confirmedDeployId = IConfirmationAggregator(confirmationAggregator).getConfirmedDeployId(debridgeId);\r\n            if (deployId != confirmedDeployId) revert AssetNotConfirmed();\r\n        }\r\n\r\n        address deBridgeTokenAddress = IDeBridgeTokenDeployer(deBridgeTokenDeployer)\r\n            .deployAsset(debridgeId, _name, _symbol, _decimals);\r\n\r\n        _addAsset(debridgeId, deBridgeTokenAddress, _nativeTokenAddress, _nativeChainId);\r\n    }\r\n\r\n    /// @dev Update native fix fee. called by our fee update contract\r\n    /// @param _globalFixedNativeFee  new value\r\n    function autoUpdateFixedNativeFee(\r\n        uint256 _globalFixedNativeFee\r\n    ) external onlyFeeContractUpdater {\r\n        globalFixedNativeFee = _globalFixedNativeFee;\r\n        emit FixedNativeFeeAutoUpdated(_globalFixedNativeFee);\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev Update asset's fees.\r\n    /// @param _supportedChainIds Chain identifiers.\r\n    /// @param _chainSupportInfo Chain support info.\r\n    function updateChainSupport(\r\n        uint256[] memory _supportedChainIds,\r\n        ChainSupportInfo[] memory _chainSupportInfo\r\n    ) external onlyAdmin {\r\n        if (_supportedChainIds.length != _chainSupportInfo.length) revert WrongArgument();\r\n        for (uint256 i = 0; i < _supportedChainIds.length; i++) {\r\n            getChainSupport[_supportedChainIds[i]] = _chainSupportInfo[i];\r\n        }\r\n        emit ChainsSupportUpdated(_supportedChainIds);\r\n    }\r\n\r\n    function updateGlobalFee(\r\n        uint256 _globalFixedNativeFee,\r\n        uint16 _globalTransferFeeBps\r\n    ) external onlyAdmin {\r\n        globalFixedNativeFee = _globalFixedNativeFee;\r\n        globalTransferFeeBps = _globalTransferFeeBps;\r\n        emit FixedNativeFeeUpdated(_globalFixedNativeFee, _globalTransferFeeBps);\r\n    }\r\n\r\n    /// @dev Update asset's fees.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _supportedChainIds Chain identifiers.\r\n    /// @param _assetFeesInfo Chain support info.\r\n    function updateAssetFixedFees(\r\n        bytes32 _debridgeId,\r\n        uint256[] memory _supportedChainIds,\r\n        uint256[] memory _assetFeesInfo\r\n    ) external onlyAdmin {\r\n        if (_supportedChainIds.length != _assetFeesInfo.length) revert WrongArgument();\r\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\r\n        for (uint256 i = 0; i < _supportedChainIds.length; i++) {\r\n            debridgeFee.getChainFee[_supportedChainIds[i]] = _assetFeesInfo[i];\r\n        }\r\n    }\r\n\r\n    function updateExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\r\n        if (_excessConfirmations == 0) revert WrongArgument();\r\n        excessConfirmations = _excessConfirmations;\r\n    }\r\n\r\n    /// @dev Set support for the chains where the token can be transfered.\r\n    /// @param _chainId Chain id where tokens are sent.\r\n    /// @param _isSupported Whether the token is transferable to the other chain.\r\n    function setChainSupport(uint256 _chainId, bool _isSupported) external onlyAdmin {\r\n        getChainSupport[_chainId].isSupported = _isSupported;\r\n        emit ChainSupportUpdated(_chainId, _isSupported);\r\n    }\r\n\r\n    /// @dev Set proxy address.\r\n    /// @param _address Address of the proxy that executes external calls.\r\n    function setCallProxy(uint256 variation, address _address) external onlyAdmin {\r\n        callProxyAddresses[variation] = _address;\r\n        emit CallProxyUpdated(variation, _address);\r\n    }\r\n\r\n    function setWeth(IWETH _weth) external onlyAdmin {\r\n        bytes32 newWethDebridgeId = getDebridgeId(getChainId(), address(_weth));\r\n        DebridgeInfo storage debridge = getDebridge[newWethDebridgeId];\r\n\r\n        if (!debridge.exist) {\r\n            //Add if not exist\r\n            _addAsset(\r\n                newWethDebridgeId,\r\n                address(_weth),\r\n                abi.encodePacked(address(_weth)),\r\n                getChainId()\r\n            );\r\n        }\r\n        weth = _weth;\r\n    }\r\n\r\n    /// @dev Add support for the asset.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _maxAmount Maximum amount of current chain token to be wrapped.\r\n    /// @param _minReservesBps Minimal reserve ration in BPS.\r\n    function updateAsset(\r\n        bytes32 _debridgeId,\r\n        uint256 _maxAmount,\r\n        uint16 _minReservesBps,\r\n        uint256 _amountThreshold\r\n    ) external onlyAdmin {\r\n        if (_minReservesBps > BPS_DENOMINATOR) revert WrongArgument();\r\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\r\n        // don't check existance of debridge - it allows to setup asset before first transfer\r\n        debridge.maxAmount = _maxAmount;\r\n        debridge.minReservesBps = _minReservesBps;\r\n        getAmountThreshold[_debridgeId] = _amountThreshold;\r\n    }\r\n\r\n    /// @dev Set aggregator address.\r\n    /// @param _aggregator Submission aggregator address.\r\n    function setAggregator(address _aggregator) external onlyAdmin {\r\n        confirmationAggregator = _aggregator;\r\n    }\r\n\r\n    /// @dev Set signature verifier address.\r\n    /// @param _verifier Signature verifier address.\r\n    function setSignatureVerifier(address _verifier) external onlyAdmin {\r\n        signatureVerifier = _verifier;\r\n    }\r\n\r\n    /// @dev Set asset deployer address.\r\n    /// @param _deBridgeTokenDeployer Asset deployer address.\r\n    function setDeBridgeTokenDeployer(address _deBridgeTokenDeployer) external onlyAdmin {\r\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\r\n    }\r\n\r\n    /// @dev Set defi controoler.\r\n    /// @param _defiController Defi controller address address.\r\n    function setDefiController(address _defiController) external onlyAdmin {\r\n        // TODO: claim all the reserves before\r\n        defiController = _defiController;\r\n    }\r\n\r\n    /// @dev Set fee contract updater, that can update fix native fee\r\n    /// @param _value new contract address.\r\n    function setFeeContractUpdater(address _value) external onlyAdmin {\r\n        feeContractUpdater = _value;\r\n    }\r\n\r\n    /// @dev Stop all transfers.\r\n    function pause() external onlyGovMonitoring {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev Allow transfers.\r\n    function unpause() external onlyAdmin whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    /// @dev Withdraw fees.\r\n    /// @param _debridgeId Asset identifier.\r\n    function withdrawFee(bytes32 _debridgeId) external override nonReentrant onlyFeeProxy {\r\n        DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[_debridgeId];\r\n        // Amount for transfer to treasure\r\n        uint256 amount = debridgeFee.collectedFees - debridgeFee.withdrawnFees;\r\n        debridgeFee.withdrawnFees += amount;\r\n\r\n        if (amount == 0) revert NotEnoughReserves();\r\n\r\n        if (_debridgeId == getDebridgeId(getChainId(), address(0))) {\r\n            _safeTransferETH(feeProxy, amount);\r\n        } else {\r\n            // don't need this check as we check that amount is not zero\r\n            // if (!getDebridge[_debridgeId].exist) revert DebridgeNotFound();\r\n            IERC20(getDebridge[_debridgeId].tokenAddress).safeTransfer(feeProxy, amount);\r\n        }\r\n        emit WithdrawnFee(_debridgeId, amount);\r\n    }\r\n\r\n    /// @dev Request the assets to be used in defi protocol.\r\n    /// @param _tokenAddress Asset address.\r\n    /// @param _amount Amount of tokens to request.\r\n    function requestReserves(address _tokenAddress, uint256 _amount)\r\n        external\r\n        override\r\n        onlyDefiController\r\n        nonReentrant\r\n    {\r\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\r\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\r\n        if (!debridge.exist) revert DebridgeNotFound();\r\n        uint256 minReserves = (debridge.balance * debridge.minReservesBps) / BPS_DENOMINATOR;\r\n\r\n        if (minReserves + _amount > IERC20(_tokenAddress).balanceOf(address(this)))\r\n            revert NotEnoughReserves();\r\n\r\n        debridge.lockedInStrategies += _amount;\r\n        IERC20(_tokenAddress).safeTransfer(defiController, _amount);\r\n    }\r\n\r\n    /// @dev Return the assets that were used in defi protocol.\r\n    /// @param _tokenAddress Asset address.\r\n    /// @param _amount Amount of tokens to claim.\r\n    function returnReserves(address _tokenAddress, uint256 _amount)\r\n        external\r\n        override\r\n        onlyDefiController\r\n        nonReentrant\r\n    {\r\n        bytes32 debridgeId = getDebridgeId(getChainId(), _tokenAddress);\r\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\r\n        if (!debridge.exist) revert DebridgeNotFound();\r\n        debridge.lockedInStrategies -= _amount;\r\n        IERC20(debridge.tokenAddress).safeTransferFrom(\r\n            defiController,\r\n            address(this),\r\n            _amount\r\n        );\r\n    }\r\n\r\n    /// @dev Set fee converter proxy.\r\n    /// @param _feeProxy Fee proxy address.\r\n    function setFeeProxy(address _feeProxy) external onlyAdmin {\r\n        feeProxy = _feeProxy;\r\n    }\r\n\r\n    function blockSubmission(bytes32[] memory _submissionIds, bool isBlocked) external onlyAdmin {\r\n        for (uint256 i = 0; i < _submissionIds.length; i++) {\r\n            isBlockedSubmission[_submissionIds[i]] = isBlocked;\r\n            if (isBlocked) {\r\n                emit Blocked(_submissionIds[i]);\r\n            } else {\r\n                emit Unblocked(_submissionIds[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Update flash fees.\r\n    /// @param _flashFeeBps new fee in BPS\r\n    function updateFlashFee(uint256 _flashFeeBps) external onlyAdmin {\r\n        if (_flashFeeBps > BPS_DENOMINATOR) revert WrongArgument();\r\n        flashFeeBps = _flashFeeBps;\r\n    }\r\n\r\n    /// @dev Update discount.\r\n    /// @param _address customer address\r\n    /// @param _discountFixBps  fix discount in BPS\r\n    /// @param _discountTransferBps transfer % discount in BPS\r\n    function updateFeeDiscount(\r\n        address _address,\r\n        uint16 _discountFixBps,\r\n        uint16 _discountTransferBps\r\n    ) external onlyAdmin {\r\n        if (_address == address(0) ||\r\n            _discountFixBps > BPS_DENOMINATOR ||\r\n            _discountTransferBps > BPS_DENOMINATOR\r\n        ) revert WrongArgument();\r\n        DiscountInfo storage discountInfo = feeDiscount[_address];\r\n        discountInfo.discountFixBps = _discountFixBps;\r\n        discountInfo.discountTransferBps = _discountTransferBps;\r\n    }\r\n\r\n    // we need to accept ETH sends to unwrap WETH\r\n    receive() external payable {\r\n        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    /* ========== INTERNAL ========== */\r\n\r\n    function _checkConfirmations(\r\n        bytes32 _submissionId,\r\n        bytes32 _debridgeId,\r\n        uint256 _amount,\r\n        bytes calldata _signatures\r\n    ) internal {\r\n        if (isBlockedSubmission[_submissionId]) revert SubmissionBlocked();\r\n        if (_signatures.length > 0) {\r\n            // inside check is confirmed\r\n            ISignatureVerifier(signatureVerifier).submit(\r\n                _submissionId,\r\n                _signatures,\r\n                _amount >= getAmountThreshold[_debridgeId] ? excessConfirmations : 0\r\n            );\r\n        } else {\r\n            (uint8 confirmations, bool confirmed) = IConfirmationAggregator(confirmationAggregator)\r\n                .getSubmissionConfirmations(_submissionId);\r\n\r\n            if (!confirmed) revert SubmissionNotConfirmed();\r\n            if (_amount >= getAmountThreshold[_debridgeId]) {\r\n                if (confirmations < excessConfirmations) revert SubmissionAmountNotConfirmed();\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Add support for the asset.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _tokenAddress Address of the asset on the current chain.\r\n    /// @param _nativeAddress Address of the asset on the native chain.\r\n    /// @param _nativeChainId Native chain id.\r\n    function _addAsset(\r\n        bytes32 _debridgeId,\r\n        address _tokenAddress,\r\n        bytes memory _nativeAddress,\r\n        uint256 _nativeChainId\r\n    ) internal {\r\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\r\n\r\n        if (debridge.exist) revert AssetAlreadyExist();\r\n        if (_tokenAddress == address(0)) revert ZeroAddress();\r\n\r\n        debridge.exist = true;\r\n        debridge.tokenAddress = _tokenAddress;\r\n        debridge.chainId = _nativeChainId;\r\n        // Don't override if the admin already set maxAmount in updateAsset method before\r\n        if (debridge.maxAmount == 0) {\r\n            debridge.maxAmount = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        }\r\n        // debridge.minReservesBps = BPS;\r\n        if (getAmountThreshold[_debridgeId] == 0) {\r\n            getAmountThreshold[\r\n                _debridgeId\r\n            ] = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        }\r\n\r\n        TokenInfo storage tokenInfo = getNativeInfo[_tokenAddress];\r\n        tokenInfo.nativeChainId = _nativeChainId;\r\n        tokenInfo.nativeAddress = _nativeAddress;\r\n\r\n        emit PairAdded(\r\n            _debridgeId,\r\n            _tokenAddress,\r\n            _nativeAddress,\r\n            _nativeChainId,\r\n            debridge.maxAmount,\r\n            debridge.minReservesBps\r\n        );\r\n    }\r\n\r\n    /// @dev Locks asset on the chain and enables minting on the other chain.\r\n    /// @param _amount Amount to be transfered (note: the fee can be applyed).\r\n    /// @param _chainIdTo Chain id of the target chain.\r\n    /// @param _permit deadline + signature for approving the spender by signature.\r\n    function _send(\r\n        bytes memory _permit,\r\n        address _tokenAddress,\r\n        uint256 _amount,\r\n        uint256 _chainIdTo,\r\n        bool _useAssetFee\r\n    ) internal returns (\r\n        // bool isNativeToken,\r\n        uint256 amountAfterFee,\r\n        bytes32 debridgeId,\r\n        FeeParams memory feeParams\r\n    ) {\r\n        _validateToken(_tokenAddress);\r\n\r\n        // Run _permit first. Avoid Stack too deep\r\n        if (_permit.length > 0) {\r\n            // call permit before transfering token\r\n            uint256 deadline = _permit.toUint256(0);\r\n            (bytes32 r, bytes32 s, uint8 v) = _permit.parseSignature(32);\r\n            IERC20Permit(_tokenAddress).permit(\r\n                msg.sender,\r\n                address(this),\r\n                _amount,\r\n                deadline,\r\n                v,\r\n                r,\r\n                s);\r\n        }\r\n\r\n        TokenInfo memory nativeTokenInfo = getNativeInfo[_tokenAddress];\r\n        bool isNativeToken = nativeTokenInfo.nativeChainId  == 0\r\n            ? true // token not in mapping\r\n            : nativeTokenInfo.nativeChainId == getChainId(); // token native chain id the same\r\n\r\n        if (isNativeToken) {\r\n            //We use WETH debridgeId for transfer ETH\r\n            debridgeId = getDebridgeId(\r\n                getChainId(),\r\n                _tokenAddress == address(0) ? address(weth) : _tokenAddress\r\n            );\r\n        }\r\n        else {\r\n            debridgeId = getbDebridgeId(\r\n                nativeTokenInfo.nativeChainId,\r\n                nativeTokenInfo.nativeAddress\r\n            );\r\n        }\r\n\r\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\r\n        if (!debridge.exist) {\r\n            if (isNativeToken) {\r\n                _addAsset(\r\n                    debridgeId,\r\n                    _tokenAddress == address(0) ? address(weth) : _tokenAddress,\r\n                    abi.encodePacked(_tokenAddress),\r\n                    getChainId()\r\n                );\r\n            } else revert DebridgeNotFound();\r\n        }\r\n\r\n        ChainSupportInfo memory chainFees = getChainSupport[_chainIdTo];\r\n        if (!chainFees.isSupported) revert WrongTargedChain();\r\n        if (_amount > debridge.maxAmount) revert TransferAmountTooHigh();\r\n\r\n        if (_tokenAddress == address(0)) {\r\n            if (msg.value < _amount) revert AmountMismatch();\r\n            else if (msg.value > _amount) {\r\n                // refund extra eth\r\n                payable(msg.sender).transfer(msg.value - _amount);\r\n            }\r\n            weth.deposit{value: _amount}();\r\n            _useAssetFee = true;\r\n        } else {\r\n            IERC20 token = IERC20(_tokenAddress);\r\n            uint256 balanceBefore = token.balanceOf(address(this));\r\n            token.safeTransferFrom(msg.sender, address(this), _amount);\r\n            // Received real amount\r\n            _amount = token.balanceOf(address(this)) - balanceBefore;\r\n        }\r\n\r\n        //_processFeeForTransfer\r\n        {\r\n            DiscountInfo memory discountInfo = feeDiscount[msg.sender];\r\n            DebridgeFeeInfo storage debridgeFee = getDebridgeFeeInfo[debridgeId];\r\n\r\n            // calculate fixed fee\r\n            uint256 assetsFixedFee;\r\n            if (_useAssetFee) {\r\n                assetsFixedFee = debridgeFee.getChainFee[_chainIdTo];\r\n                if (assetsFixedFee == 0) revert NotSupportedFixedFee();\r\n                // Apply discount for a asset fixed fee\r\n                assetsFixedFee -= assetsFixedFee * discountInfo.discountFixBps / BPS_DENOMINATOR;\r\n            } else {\r\n                // collect native fees\r\n\r\n                // use globalFixedNativeFee if value for chain is not setted\r\n                uint256 nativeFee = chainFees.fixedNativeFee == 0 ? globalFixedNativeFee : chainFees.fixedNativeFee;\r\n                // Apply discount for a fixed fee\r\n                nativeFee -= nativeFee * discountInfo.discountFixBps / BPS_DENOMINATOR;\r\n\r\n                if (msg.value < nativeFee) revert TransferAmountNotCoverFees();\r\n                else if (msg.value > nativeFee) {\r\n                    // refund extra fee eth\r\n                    payable(msg.sender).transfer(msg.value - nativeFee);\r\n                }\r\n                bytes32 nativeDebridgeId = getDebridgeId(getChainId(), address(0));\r\n                getDebridgeFeeInfo[nativeDebridgeId].collectedFees += nativeFee;\r\n            }\r\n\r\n            // Calculate transfer fee\r\n            if (chainFees.transferFeeBps == 0) {\r\n                // use globalTransferFeeBps if value for chain is not setted\r\n                chainFees.transferFeeBps = globalTransferFeeBps;\r\n            }\r\n            uint256 transferFee = (_amount * chainFees.transferFeeBps) / BPS_DENOMINATOR;\r\n            // apply discount for a transfer fee\r\n            transferFee -= transferFee * discountInfo.discountTransferBps / BPS_DENOMINATOR;\r\n\r\n            uint256 totalFee = transferFee + assetsFixedFee;\r\n            if (_amount < totalFee) revert TransferAmountNotCoverFees();\r\n            debridgeFee.collectedFees += totalFee;\r\n            amountAfterFee = _amount - totalFee;\r\n\r\n            // initialize feeParams\r\n            feeParams.fixFee = _useAssetFee ? assetsFixedFee : msg.value;\r\n            feeParams.transferFee = transferFee;\r\n            feeParams.useAssetFee = _useAssetFee;\r\n            feeParams.receivedAmount = _amount;\r\n            feeParams.isNativeToken = isNativeToken;\r\n        }\r\n\r\n        // Is native token\r\n        if (isNativeToken) {\r\n            debridge.balance += amountAfterFee;\r\n        }\r\n        else {\r\n            debridge.balance -= amountAfterFee;\r\n            IDeBridgeToken(debridge.tokenAddress).burn(amountAfterFee);\r\n        }\r\n        return (amountAfterFee, debridgeId, feeParams);\r\n    }\r\n\r\n    function _validateToken(address _token) internal {\r\n        if (_token == address(0)) {\r\n            // no validation for native tokens\r\n            return;\r\n        }\r\n\r\n        // check existance of decimals method\r\n        (bool success, ) = _token.call(abi.encodeWithSignature(\"decimals()\"));\r\n        if (!success) revert InvalidTokenToSend();\r\n\r\n        // check existance of symbol method\r\n        (success, ) = _token.call(abi.encodeWithSignature(\"symbol()\"));\r\n        if (!success) revert InvalidTokenToSend();\r\n    }\r\n\r\n    function _validateAutoParams(\r\n        bytes calldata _autoParams,\r\n        uint256 _amount\r\n    ) internal pure returns (SubmissionAutoParamsTo memory autoParams) {\r\n        if (_autoParams.length > 0) {\r\n            autoParams = abi.decode(_autoParams, (SubmissionAutoParamsTo));\r\n            if (autoParams.executionFee > _amount) revert ProposedFeeTooHigh();\r\n            if (autoParams.data.length > 0 && autoParams.fallbackAddress.length == 0 ) revert WrongAutoArgument();\r\n        }\r\n    }\r\n\r\n    /// @dev Unlock the asset on the current chain and transfer to receiver.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\r\n    function _claim(\r\n        bytes32 _submissionId,\r\n        bytes32 _debridgeId,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        SubmissionAutoParamsFrom memory _autoParams\r\n    ) internal returns (bool isNativeToken) {\r\n        if (isSubmissionUsed[_submissionId]) revert SubmissionUsed();\r\n        isSubmissionUsed[_submissionId] = true;\r\n\r\n        DebridgeInfo storage debridge = getDebridge[_debridgeId];\r\n        if (!debridge.exist) revert DebridgeNotFound();\r\n        // if (debridge.chainId != getChainId()) revert WrongChain();\r\n        isNativeToken = debridge.chainId == getChainId();\r\n\r\n        if (isNativeToken) {\r\n            debridge.balance -= _amount + _autoParams.executionFee;\r\n        } else {\r\n            debridge.balance += _amount + _autoParams.executionFee;\r\n        }\r\n\r\n        address _token = debridge.tokenAddress;\r\n        bool unwrapETH = isNativeToken\r\n            && _autoParams.flags.getFlag(Flags.UNWRAP_ETH)\r\n            && _token == address(weth);\r\n\r\n        if (_autoParams.executionFee > 0) {\r\n            _mintOrTransfer(_token, msg.sender, _autoParams.executionFee, isNativeToken);\r\n        }\r\n        if (_autoParams.data.length > 0) {\r\n            address callProxyAddress = _autoParams.flags.getFlag(Flags.PROXY_WITH_SENDER)\r\n                ? callProxyAddresses[Flags.PROXY_WITH_SENDER]\r\n                : callProxyAddresses[0];\r\n\r\n            bool status;\r\n            if (unwrapETH) {\r\n                weth.withdraw(_amount);\r\n\r\n                status = ICallProxy(callProxyAddress).call{value: _amount}(\r\n                    _autoParams.fallbackAddress,\r\n                    _receiver,\r\n                    _autoParams.data,\r\n                    _autoParams.flags,\r\n                    _autoParams.nativeSender\r\n                );\r\n            }\r\n            else {\r\n                _mintOrTransfer(_token, callProxyAddress, _amount, isNativeToken);\r\n\r\n                status = ICallProxy(callProxyAddress).callERC20(\r\n                    _token,\r\n                    _autoParams.fallbackAddress,\r\n                    _receiver,\r\n                    _autoParams.data,\r\n                    _autoParams.flags,\r\n                    _autoParams.nativeSender\r\n                );\r\n            }\r\n            emit AutoRequestExecuted(_submissionId, status, callProxyAddress);\r\n        } else if (unwrapETH) {\r\n            // transferring WETH with unwrap flag\r\n            weth.withdraw(_amount);\r\n            _safeTransferETH(_receiver, _amount);\r\n        } else {\r\n            _mintOrTransfer(_token, _receiver, _amount, isNativeToken);\r\n        }\r\n    }\r\n\r\n    function _mintOrTransfer(\r\n        address _token,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        bool isNativeToken\r\n    ) internal {\r\n        if (isNativeToken) {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        } else {\r\n            IDeBridgeToken(_token).mint(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /*\r\n    * @dev transfer ETH to an address, revert if it fails.\r\n    * @param to recipient of the transfer\r\n    * @param value the amount to send\r\n    */\r\n    function _safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        if (!success) revert EthTransferFailed();\r\n    }\r\n\r\n    /*\r\n    * @dev round down token amount\r\n    * @param _token address of token, zero for native tokens\r\n    * @param __amount amount for rounding\r\n    */\r\n    function _normalizeTokenAmount(\r\n        address _token,\r\n        uint256 _amount\r\n    ) internal view returns (uint256) {\r\n        uint256 decimals = _token == address(0)\r\n            ? 18\r\n            : IERC20Metadata(_token).decimals();\r\n        uint256 maxDecimals = 8;\r\n        if (decimals > maxDecimals) {\r\n            uint256 multiplier = 10 ** (decimals - maxDecimals);\r\n            _amount = _amount / multiplier * multiplier;\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /* VIEW */\r\n\r\n    function getDefiAvaliableReserves(address _tokenAddress)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        DebridgeInfo storage debridge = getDebridge[getDebridgeId(getChainId(), _tokenAddress)];\r\n        return (debridge.balance * (BPS_DENOMINATOR - debridge.minReservesBps)) / BPS_DENOMINATOR;\r\n    }\r\n\r\n    /// @dev Calculates asset identifier.\r\n    /// @param _chainId Current chain id.\r\n    /// @param _tokenAddress Address of the asset on the other chain.\r\n    function getDebridgeId(uint256 _chainId, address _tokenAddress) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\r\n    }\r\n\r\n    /// @dev Calculates asset identifier.\r\n    /// @param _chainId Current chain id.\r\n    /// @param _tokenAddress Address of the asset on the other chain.\r\n    function getbDebridgeId(uint256 _chainId, bytes memory _tokenAddress) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\r\n    }\r\n\r\n    /// @dev Calculate submission id for auto claimable transfer.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _chainIdFrom Chain identifier of the chain where tokens are sent from.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\r\n    /// @param _nonce Submission id.\r\n    function getSubmissionIdFrom(\r\n        bytes32 _debridgeId,\r\n        uint256 _chainIdFrom,\r\n        uint256 _amount,\r\n        address _receiver,\r\n        uint256 _nonce,\r\n        SubmissionAutoParamsFrom memory autoParams,\r\n        bool hasAutoParams\r\n    ) public view returns (bytes32) {\r\n        bytes memory packedSubmission = abi.encodePacked(\r\n            _debridgeId,\r\n            _chainIdFrom,\r\n            getChainId(),\r\n            _amount,\r\n            _receiver,\r\n            _nonce\r\n        );\r\n        if (hasAutoParams) {\r\n            // auto submission\r\n            return keccak256(\r\n                abi.encodePacked(\r\n                    packedSubmission,\r\n                    autoParams.executionFee,\r\n                    autoParams.flags,\r\n                    autoParams.fallbackAddress,\r\n                    autoParams.data,\r\n                    autoParams.nativeSender\r\n                )\r\n            );\r\n        }\r\n        // regular submission\r\n        return keccak256(packedSubmission);\r\n    }\r\n\r\n    function getSubmissionIdTo(\r\n        bytes32 _debridgeId,\r\n        uint256 _chainIdTo,\r\n        uint256 _amount,\r\n        bytes memory _receiver,\r\n        SubmissionAutoParamsTo memory autoParams,\r\n        bool hasAutoParams\r\n    ) private view returns (bytes32) {\r\n        bytes memory packedSubmission = abi.encodePacked(\r\n            _debridgeId,\r\n            getChainId(),\r\n            _chainIdTo,\r\n            _amount,\r\n            _receiver,\r\n            nonce\r\n        );\r\n        if (hasAutoParams) {\r\n            // auto submission\r\n            return keccak256(\r\n                abi.encodePacked(\r\n                    packedSubmission,\r\n                    autoParams.executionFee,\r\n                    autoParams.flags,\r\n                    autoParams.fallbackAddress,\r\n                    autoParams.data,\r\n                    msg.sender\r\n                )\r\n            );\r\n        }\r\n        // regular submission\r\n        return keccak256(packedSubmission);\r\n    }\r\n\r\n    function getNativeTokenInfo(address currentTokenAddress)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 nativeChainId, bytes memory nativeAddress)\r\n    {\r\n        TokenInfo memory tokenInfo = getNativeInfo[currentTokenAddress];\r\n        return (tokenInfo.nativeChainId, tokenInfo.nativeAddress);\r\n    }\r\n\r\n    function getChainId() public view virtual returns (uint256 cid) {\r\n        assembly {\r\n            cid := chainid()\r\n        }\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 110; // 1.1.0\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/ISignatureVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface ISignatureVerifier {\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event Confirmed(bytes32 submissionId, address operator); // emitted once the submission is confirmed by the only oracle\r\n    event DeployConfirmed(bytes32 deployId, address operator); // emitted once the submission is confirmed by one oracle\r\n\r\n    /* ========== FUNCTIONS ========== */\r\n\r\n    function submit(\r\n        bytes32 _submissionId,\r\n        bytes memory _signatures,\r\n        uint8 _excessConfirmations\r\n    ) external;\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IConfirmationAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IConfirmationAggregator {\r\n    /* ========== STRUCTS ========== */\r\n\r\n    struct SubmissionInfo {\r\n        uint8 confirmations; // received confirmations count\r\n        uint8 requiredConfirmations; // required oracles (DSRM) received confirmations count\r\n        bool isConfirmed; // is confirmed submission (user can claim)\r\n        mapping(address => bool) hasVerified; // verifier => has already voted\r\n    }\r\n    struct DebridgeDeployInfo {\r\n        uint256 chainId; //native chainId\r\n        bytes nativeAddress; //native token address\r\n        uint8 confirmations; // received confirmations count\r\n        uint8 requiredConfirmations; // required oracles (DSRM) received confirmations count\r\n        uint8 decimals;\r\n        string name;\r\n        string symbol;\r\n        mapping(address => bool) hasVerified; // verifier => has already voted\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event DeployConfirmed(bytes32 deployId, address operator); // emitted once the submission is confirmed by one oracle\r\n    event Confirmed(bytes32 submissionId, address operator); // emitted once the submission is confirmed by one oracle\r\n\r\n    /* ========== FUNCTIONS ========== */\r\n\r\n    function submit(bytes32 _submissionId) external;\r\n\r\n    function submitMany(bytes32[] memory _submissionIds) external;\r\n\r\n    function getSubmissionConfirmations(bytes32 _submissionId)\r\n        external\r\n        view\r\n        returns (uint8 _confirmations, bool _isConfirmed);\r\n\r\n    function getConfirmedDeployId(bytes32 _debridgeId)\r\n        external\r\n        view\r\n        returns (bytes32);\r\n}\r\n"
    },
    "contracts/interfaces/IFlashCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\n/// @title Callback for IDeBridgeGate#flash\r\n/// @notice Any contract that calls IDeBridgeGate#flash must implement this interface\r\ninterface IFlashCallback {\r\n    /// @param fee The fee amount in token due to the pool by the end of the flash\r\n    /// @param data Any data passed through by the caller via the IDeBridgeGate#flash call\r\n    function flashCallback(uint256 fee, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/libraries/SignatureUtil.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nlibrary SignatureUtil {\r\n    /* ========== ERRORS ========== */\r\n\r\n    error WrongArgumentLength();\r\n    error SignatureInvalidLength();\r\n    error SignatureInvalidV();\r\n\r\n    /// @dev Prepares raw msg that was signed by the oracle.\r\n    /// @param _submissionId Submission identifier.\r\n    function getUnsignedMsg(bytes32 _submissionId) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _submissionId));\r\n    }\r\n\r\n    /// @dev Splits signature bytes to r,s,v components.\r\n    /// @param _signature Signature bytes in format r+s+v.\r\n    function splitSignature(bytes memory _signature)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        if (_signature.length != 65) revert SignatureInvalidLength();\r\n        return parseSignature(_signature, 0);\r\n    }\r\n\r\n    function parseSignature(bytes memory _signatures, uint256 offset)\r\n        internal\r\n        pure\r\n        returns (\r\n            bytes32 r,\r\n            bytes32 s,\r\n            uint8 v\r\n        )\r\n    {\r\n        assembly {\r\n            r := mload(add(_signatures, add(32, offset)))\r\n            s := mload(add(_signatures, add(64, offset)))\r\n            v := and(mload(add(_signatures, add(65, offset))), 0xff)\r\n        }\r\n\r\n        if (v < 27) v += 27;\r\n        if (v != 27 && v != 28) revert SignatureInvalidV();\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint256 _offset)\r\n        internal\r\n        pure\r\n        returns (uint256 result)\r\n    {\r\n        if (_bytes.length < _offset + 32) revert WrongArgumentLength();\r\n\r\n        assembly {\r\n            result := mload(add(add(_bytes, 0x20), _offset))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockDeBridgeGateForDefiController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../transfers/DeBridgeGate.sol\";\r\n\r\ncontract MockDeBridgeGateForDefiController is DeBridgeGate {\r\n    function init() external {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    function sendETH() external payable {}\r\n\r\n    function addDebridge(\r\n        address tokenAddress,\r\n        uint256 chainId,\r\n        uint256 maxAmount,\r\n        uint256 collectedFees,\r\n        uint256 balance,\r\n        uint256 lockedInStrategies,\r\n        uint16 minReservesBps,\r\n        uint256 chainFee,\r\n        bool exist\r\n    ) public {\r\n        bytes32 debridgeId = getDebridgeId(chainId, tokenAddress);\r\n        DebridgeInfo storage debridge = getDebridge[debridgeId];\r\n        debridge.tokenAddress = tokenAddress;\r\n        debridge.maxAmount = maxAmount;\r\n        getDebridgeFeeInfo[debridgeId].collectedFees = collectedFees;\r\n        debridge.balance = balance;\r\n        debridge.lockedInStrategies = lockedInStrategies;\r\n        debridge.minReservesBps = minReservesBps;\r\n        getDebridgeFeeInfo[debridgeId].getChainFee[chainId] = chainFee;\r\n        debridge.exist = exist;\r\n    }\r\n\r\n    // override chain id\r\n    function getChainId() public pure override returns (uint256 cid) {\r\n        return 1;\r\n    }\r\n}\r\n"
    },
    "contracts/transfers/SignatureVerifier.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"./AggregatorBase.sol\";\r\nimport \"../interfaces/ISignatureVerifier.sol\";\r\nimport \"../libraries/SignatureUtil.sol\";\r\n\r\ncontract SignatureVerifier is AggregatorBase, ISignatureVerifier {\r\n    using SignatureUtil for bytes;\r\n    using SignatureUtil for bytes32;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint8 public confirmationThreshold; // required confirmations per block after extra check enabled\r\n\r\n    uint40 public submissionsInBlock; //submissions count in current block\r\n    uint40 public currentBlock; //Current block\r\n\r\n    address public debridgeAddress; // Debridge gate address\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error NotConfirmedByRequiredOracles();\r\n    error NotConfirmedThreshold();\r\n    error SubmissionNotConfirmed();\r\n    error DuplicateSignatures();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyDeBridgeGate() {\r\n        if (msg.sender != debridgeAddress) revert DeBridgeGateBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _minConfirmations Common confirmations count.\r\n    /// @param _confirmationThreshold Confirmations per block after extra check enabled.\r\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\r\n    function initialize(\r\n        uint8 _minConfirmations,\r\n        uint8 _confirmationThreshold,\r\n        uint8 _excessConfirmations,\r\n        address _debridgeAddress\r\n    ) public initializer {\r\n        AggregatorBase.initializeBase(_minConfirmations, _excessConfirmations);\r\n        confirmationThreshold = _confirmationThreshold;\r\n        debridgeAddress = _debridgeAddress;\r\n    }\r\n\r\n\r\n    /// @dev Check is valid signatures.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @param _signatures Array of signatures by oracles.\r\n    /// @param _excessConfirmations override min confirmations count\r\n    function submit(\r\n        bytes32 _submissionId,\r\n        bytes memory _signatures,\r\n        uint8 _excessConfirmations\r\n    ) external override onlyDeBridgeGate {\r\n        //Need confirmation to confirm submission\r\n        uint8 needConfirmations = _excessConfirmations > minConfirmations\r\n            ? _excessConfirmations\r\n            : minConfirmations;\r\n        // Count of required(DSRM) oracles confirmation\r\n        uint256 currentRequiredOraclesCount;\r\n        // stack variable to aggregate confirmations and write to storage once\r\n        uint8 confirmations;\r\n        uint256 signaturesCount = _countSignatures(_signatures);\r\n        address[] memory validators = new address[](signaturesCount);\r\n        for (uint256 i = 0; i < signaturesCount; i++) {\r\n            (bytes32 r, bytes32 s, uint8 v) = _signatures.parseSignature(i * 65);\r\n            address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\r\n            if (getOracleInfo[oracle].isValid) {\r\n                for (uint256 k = 0; k < i; k++) {\r\n                    if (validators[k] == oracle) revert DuplicateSignatures();\r\n                }\r\n                validators[i] = oracle;\r\n\r\n                confirmations += 1;\r\n                emit Confirmed(_submissionId, oracle);\r\n                if (getOracleInfo[oracle].required) {\r\n                    currentRequiredOraclesCount += 1;\r\n                }\r\n                if (\r\n                    confirmations >= needConfirmations &&\r\n                    currentRequiredOraclesCount >= requiredOraclesCount\r\n                ) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (currentRequiredOraclesCount != requiredOraclesCount)\r\n            revert NotConfirmedByRequiredOracles();\r\n\r\n        if (confirmations >= minConfirmations) {\r\n            // TODO: don't update state when verifying new asset deploy\r\n            if (currentBlock == uint40(block.number)) {\r\n                submissionsInBlock += 1;\r\n            } else {\r\n                currentBlock = uint40(block.number);\r\n                submissionsInBlock = 1;\r\n            }\r\n            emit SubmissionApproved(_submissionId);\r\n        }\r\n\r\n        if (submissionsInBlock > confirmationThreshold) {\r\n            if (confirmations < excessConfirmations) revert NotConfirmedThreshold();\r\n        }\r\n\r\n        if (confirmations < needConfirmations) revert SubmissionNotConfirmed();\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev Sets minimal required confirmations.\r\n    /// @param _confirmationThreshold Confirmation info.\r\n    function setThreshold(uint8 _confirmationThreshold) external onlyAdmin {\r\n        if (_confirmationThreshold == 0) revert WrongArgument();\r\n        confirmationThreshold = _confirmationThreshold;\r\n    }\r\n\r\n    /// @dev Sets core debridge conrtact address.\r\n    /// @param _debridgeAddress Debridge address.\r\n    function setDebridgeAddress(address _debridgeAddress) external onlyAdmin {\r\n        debridgeAddress = _debridgeAddress;\r\n    }\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    /// @dev Check is valid signature\r\n    /// @param _submissionId Submission identifier.\r\n    /// @param _signature signature by oracle.\r\n    function isValidSignature(bytes32 _submissionId, bytes memory _signature)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        (bytes32 r, bytes32 s, uint8 v) = _signature.splitSignature();\r\n        address oracle = ecrecover(_submissionId.getUnsignedMsg(), v, r, s);\r\n        return getOracleInfo[oracle].isValid;\r\n    }\r\n\r\n    /* ========== INTERNAL ========== */\r\n\r\n    function _countSignatures(bytes memory _signatures) internal pure returns (uint256) {\r\n        return _signatures.length % 65 == 0 ? _signatures.length / 65 : 0;\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/transfers/AggregatorBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"../interfaces/IAggregatorBase.sol\";\r\n\r\ncontract AggregatorBase is Initializable, AccessControlUpgradeable, IAggregatorBase {\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint8 public minConfirmations; // minimal required confirmations\r\n    uint8 public excessConfirmations; // minimal required confirmations in case of too many confirmations\r\n    uint8 public requiredOraclesCount; // count of required oracles\r\n\r\n    address[] public oracleAddresses;\r\n    mapping(address => OracleInfo) public getOracleInfo; // oracle address => oracle details\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n    error OracleBadRole();\r\n    error DeBridgeGateBadRole();\r\n\r\n\r\n    error OracleAlreadyExist();\r\n    error OracleNotFound();\r\n\r\n    error WrongArgument();\r\n    error LowMinConfirmations();\r\n\r\n    error SubmittedAlready();\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n    modifier onlyOracle() {\r\n        if (!getOracleInfo[msg.sender].isValid) revert OracleBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _minConfirmations Common confirmations count.\r\n    function initializeBase(uint8 _minConfirmations, uint8 _excessConfirmations) internal {\r\n        if (_minConfirmations == 0 || _excessConfirmations < _minConfirmations) revert LowMinConfirmations();\r\n        minConfirmations = _minConfirmations;\r\n        excessConfirmations = _excessConfirmations;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev Sets minimal required confirmations.\r\n    /// @param _minConfirmations Confirmation info.\r\n    function setMinConfirmations(uint8 _minConfirmations) external onlyAdmin {\r\n        if (_minConfirmations < oracleAddresses.length / 2 + 1) revert LowMinConfirmations();\r\n        minConfirmations = _minConfirmations;\r\n    }\r\n\r\n    /// @dev Sets minimal required confirmations.\r\n    /// @param _excessConfirmations new excessConfirmations count.\r\n    function setExcessConfirmations(uint8 _excessConfirmations) external onlyAdmin {\r\n        if (_excessConfirmations < minConfirmations) revert LowMinConfirmations();\r\n        excessConfirmations = _excessConfirmations;\r\n    }\r\n\r\n    /// @dev Add oracle.\r\n    /// @param _oracles Oracles addresses.\r\n    /// @param _required Without this oracle, the transfer will not be confirmed\r\n    function addOracles(\r\n        address[] memory _oracles,\r\n        bool[] memory _required\r\n    ) external onlyAdmin {\r\n        if (_oracles.length != _required.length) revert WrongArgument();\r\n        if (minConfirmations < (oracleAddresses.length +  _oracles.length) / 2 + 1) revert LowMinConfirmations();\r\n\r\n        for (uint256 i = 0; i < _oracles.length; i++) {\r\n            OracleInfo storage oracleInfo = getOracleInfo[_oracles[i]];\r\n            if (oracleInfo.exist) revert OracleAlreadyExist();\r\n\r\n            oracleAddresses.push(_oracles[i]);\r\n\r\n            if (_required[i]) {\r\n                requiredOraclesCount += 1;\r\n            }\r\n\r\n            oracleInfo.exist = true;\r\n            oracleInfo.isValid = true;\r\n            oracleInfo.required = _required[i];\r\n\r\n            emit AddOracle(_oracles[i], _required[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Update oracle.\r\n    /// @param _oracle Oracle address.\r\n    /// @param _isValid is valid oracle\r\n    /// @param _required Without this oracle, the transfer will not be confirmed\r\n    function updateOracle(\r\n        address _oracle,\r\n        bool _isValid,\r\n        bool _required\r\n    ) external onlyAdmin {\r\n        //If oracle is invalid, it must be not required\r\n        if (!_isValid && _required) revert WrongArgument();\r\n\r\n        OracleInfo storage oracleInfo = getOracleInfo[_oracle];\r\n        if (!oracleInfo.exist) revert OracleNotFound();\r\n\r\n        if (oracleInfo.required && !_required) {\r\n            requiredOraclesCount -= 1;\r\n        } else if (!oracleInfo.required && _required) {\r\n            requiredOraclesCount += 1;\r\n        }\r\n        if (oracleInfo.isValid && !_isValid) {\r\n            // remove oracle from oracleAddresses array without keeping an order\r\n            for (uint256 i = 0; i < oracleAddresses.length; i++) {\r\n                if (oracleAddresses[i] == _oracle) {\r\n                    oracleAddresses[i] = oracleAddresses[oracleAddresses.length - 1];\r\n                    oracleAddresses.pop();\r\n                    break;\r\n                }\r\n            }\r\n        } else if (!oracleInfo.isValid && _isValid) {\r\n            if (minConfirmations < (oracleAddresses.length + 1) / 2 + 1) revert LowMinConfirmations();\r\n            oracleAddresses.push(_oracle);\r\n        }\r\n        oracleInfo.isValid = _isValid;\r\n        oracleInfo.required = _required;\r\n        emit UpdateOracle(_oracle, _required, _isValid);\r\n    }\r\n\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    /// @dev Calculates asset identifier.\r\n    function getDeployId(\r\n        bytes32 _debridgeId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_debridgeId, _name, _symbol, _decimals));\r\n    }\r\n\r\n    /// @dev Calculates asset identifier.\r\n    /// @param _chainId Current chain id.\r\n    /// @param _tokenAddress Address of the asset on the other chain.\r\n    function getDebridgeId(uint256 _chainId, bytes memory _tokenAddress)\r\n        public\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_chainId, _tokenAddress));\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IAggregatorBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IAggregatorBase {\r\n    /* ========== STRUCTS ========== */\r\n\r\n    struct OracleInfo {\r\n        bool exist; // exist oracle\r\n        bool isValid; // is valid oracle\r\n        bool required; // without this oracle (DSRM), the transfer will not be confirmed\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AddOracle(address oracle, bool required); // add oracle by admin\r\n    event UpdateOracle(address oracle, bool required, bool isValid); // update oracle by admin\r\n    event DeployApproved(bytes32 deployId); // emitted once the submission is confirmed by min required aount of oracles\r\n    event SubmissionApproved(bytes32 submissionId); // emitted once the submission is confirmed by min required aount of oracles\r\n}\r\n"
    },
    "contracts/transfers/SignatureAggregator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"./AggregatorBase.sol\";\r\nimport \"../interfaces/ISignatureAggregator.sol\";\r\nimport \"../libraries/SignatureUtil.sol\";\r\n\r\ncontract SignatureAggregator is AggregatorBase, ISignatureAggregator {\r\n    using SignatureUtil for bytes;\r\n    using SignatureUtil for bytes32;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    mapping(bytes32 => DebridgeDeployInfo) public getDeployInfo; // mint id => debridge info\r\n    mapping(bytes32 => SubmissionInfo) public getSubmissionInfo; // mint id => submission info\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error SenderSignatureMismatch();\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _minConfirmations Common confirmations count.\r\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\r\n    function initialize(uint8 _minConfirmations, uint8 _excessConfirmations) public initializer {\r\n        AggregatorBase.initializeBase(_minConfirmations, _excessConfirmations);\r\n    }\r\n\r\n    /* ========== ORACLES  ========== */\r\n\r\n    /// @dev Confirms the transfer request.\r\n    function confirmNewAsset(\r\n        bytes memory _tokenAddress,\r\n        uint256 _chainId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        bytes memory _signature\r\n    ) external onlyOracle {\r\n        bytes32 debridgeId = getDebridgeId(_chainId, _tokenAddress);\r\n        bytes32 deployId = getDeployId(debridgeId, _name, _symbol, _decimals);\r\n        DebridgeDeployInfo storage debridgeInfo = getDeployInfo[deployId];\r\n\r\n        if (debridgeInfo.hasVerified[msg.sender]) revert SubmittedAlready();\r\n\r\n        _checkSignature(_signature, deployId);\r\n\r\n        debridgeInfo.confirmations += 1;\r\n        debridgeInfo.nativeAddress = _tokenAddress;\r\n        debridgeInfo.chainId = _chainId;\r\n        debridgeInfo.name = _name;\r\n        debridgeInfo.symbol = _symbol;\r\n        debridgeInfo.decimals = _decimals;\r\n        debridgeInfo.signatures.push(_signature);\r\n        debridgeInfo.hasVerified[msg.sender] = true;\r\n        if (debridgeInfo.confirmations >= minConfirmations\r\n            && debridgeInfo.confirmations >= excessConfirmations) {\r\n            debridgeInfo.approved = true;\r\n            emit DeployApproved(deployId);\r\n        }\r\n        emit DeployConfirmed(deployId, msg.sender, _signature);\r\n    }\r\n\r\n    /// @dev Confirms few transfer requests.\r\n    /// @param _submissionIds Submission identifiers.\r\n    /// @param _signatures Oracles signature.\r\n    function submitMany(bytes32[] memory _submissionIds, bytes[] memory _signatures)\r\n        external\r\n        override\r\n        onlyOracle\r\n    {\r\n        if (_submissionIds.length != _signatures.length) revert WrongArgument();\r\n        for (uint256 i; i < _submissionIds.length; i++) {\r\n            _submit(_submissionIds[i], _signatures[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Confirms the transfer request.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @param _signature Oracle's signature.\r\n    function submit(bytes32 _submissionId, bytes memory _signature) external override onlyOracle {\r\n        _submit(_submissionId, _signature);\r\n    }\r\n\r\n    /// @dev Confirms single transfer request.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @param _signature Oracle's signature.\r\n    function _submit(bytes32 _submissionId, bytes memory _signature) internal {\r\n        SubmissionInfo storage submissionInfo = getSubmissionInfo[_submissionId];\r\n        if (submissionInfo.hasVerified[msg.sender]) revert SubmittedAlready();\r\n\r\n        _checkSignature(_signature, _submissionId);\r\n\r\n        submissionInfo.confirmations += 1;\r\n        submissionInfo.signatures.push(_signature);\r\n        submissionInfo.hasVerified[msg.sender] = true;\r\n        emit Confirmed(_submissionId, msg.sender, _signature);\r\n    }\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    /// @dev Returns whether transfer request is confirmed.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @return _confirmations number of confirmation.\r\n    /// @return _confirmed Whether transfer request is confirmed.\r\n    function getSubmissionConfirmations(bytes32 _submissionId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint8 _confirmations, bool _confirmed)\r\n    {\r\n        SubmissionInfo storage submissionInfo = getSubmissionInfo[_submissionId];\r\n        _confirmations = submissionInfo.confirmations;\r\n        return (_confirmations, _confirmations >= minConfirmations);\r\n    }\r\n\r\n    /// @dev Returns whether transfer request is confirmed.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @return Oracles signatures.\r\n    function getSubmissionSignatures(bytes32 _submissionId) external view returns (bytes[] memory) {\r\n        return getSubmissionInfo[_submissionId].signatures;\r\n    }\r\n\r\n    /* ========== INTERNAL ========== */\r\n\r\n    function _checkSignature(bytes memory _signature, bytes32 _message) internal view {\r\n        (bytes32 r, bytes32 s, uint8 v) = _signature.splitSignature();\r\n        address oracle = ecrecover(_message.getUnsignedMsg(), v, r, s);\r\n        if (msg.sender != oracle) revert SenderSignatureMismatch();\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ISignatureAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface ISignatureAggregator {\r\n    /* ========== STRUCTS ========== */\r\n\r\n    struct SubmissionInfo {\r\n        uint8 confirmations; // received confirmations count\r\n        bytes[] signatures;\r\n        mapping(address => bool) hasVerified; // verifier => has already voted\r\n    }\r\n    struct DebridgeDeployInfo {\r\n        uint256 chainId; //native chainId\r\n        bytes nativeAddress; //native token address\r\n        uint8 decimals;\r\n        uint8 confirmations; // received confirmations count\r\n        bool approved;\r\n        string name;\r\n        string symbol;\r\n        bytes[] signatures;\r\n        mapping(address => bool) hasVerified; // verifier => has already voted\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event DeployConfirmed(bytes32 deployId, address operator, bytes signature); // emitted once the submission is confirmed by one oracle\r\n    event Confirmed(bytes32 submissionId, address operator, bytes signature); // emitted once the submission is confirmed by one oracle\r\n\r\n    /* ========== FUNCTIONS ========== */\r\n\r\n    function submitMany(bytes32[] memory _submissionIds, bytes[] memory _signatures) external;\r\n\r\n    function submit(bytes32 _submissionId, bytes memory _signature) external;\r\n\r\n    function getSubmissionConfirmations(bytes32 _submissionId)\r\n        external\r\n        view\r\n        returns (uint8 _confirmations, bool _blockConfirmationPassed);\r\n}\r\n"
    },
    "contracts/transfers/ConfirmationAggregator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"./AggregatorBase.sol\";\r\nimport \"../interfaces/IConfirmationAggregator.sol\";\r\n\r\ncontract ConfirmationAggregator is AggregatorBase, IConfirmationAggregator {\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint8 public confirmationThreshold; // required confirmations per block after extra check enabled\r\n\r\n    mapping(bytes32 => bytes32) public confirmedDeployInfo; // debridge Id => deploy Id\r\n    mapping(bytes32 => DebridgeDeployInfo) public getDeployInfo; // mint id => debridge info\r\n    mapping(bytes32 => SubmissionInfo) public getSubmissionInfo; // mint id => submission info\r\n\r\n    uint40 public submissionsInBlock; //submissions count in current block\r\n    uint40 public currentBlock; //Current block\r\n\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _minConfirmations Common confirmations count.\r\n    /// @param _confirmationThreshold Confirmations per block after extra check enabled.\r\n    /// @param _excessConfirmations Confirmations count in case of excess activity.\r\n    function initialize(\r\n        uint8 _minConfirmations,\r\n        uint8 _confirmationThreshold,\r\n        uint8 _excessConfirmations\r\n    ) public initializer {\r\n        AggregatorBase.initializeBase(_minConfirmations, _excessConfirmations);\r\n        confirmationThreshold = _confirmationThreshold;\r\n    }\r\n\r\n    /* ========== ORACLES  ========== */\r\n\r\n    /// @dev Confirms few transfer requests.\r\n    /// @param _submissionIds Submission identifiers.\r\n    function submitMany(bytes32[] memory _submissionIds) external override onlyOracle {\r\n        for (uint256 i; i < _submissionIds.length; i++) {\r\n            _submit(_submissionIds[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Confirms the transfer request.\r\n    function confirmNewAsset(\r\n        bytes memory _tokenAddress,\r\n        uint256 _chainId,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) external onlyOracle {\r\n        bytes32 debridgeId = getDebridgeId(_chainId, _tokenAddress);\r\n\r\n        bytes32 deployId = getDeployId(debridgeId, _name, _symbol, _decimals);\r\n        DebridgeDeployInfo storage debridgeInfo = getDeployInfo[deployId];\r\n        if (debridgeInfo.hasVerified[msg.sender]) revert SubmittedAlready();\r\n\r\n        debridgeInfo.name = _name;\r\n        debridgeInfo.symbol = _symbol;\r\n        debridgeInfo.nativeAddress = _tokenAddress;\r\n        debridgeInfo.chainId = _chainId;\r\n        debridgeInfo.decimals = _decimals;\r\n        debridgeInfo.confirmations += 1;\r\n        if (getOracleInfo[msg.sender].required) {\r\n            debridgeInfo.requiredConfirmations += 1;\r\n        }\r\n        debridgeInfo.hasVerified[msg.sender] = true;\r\n\r\n        if (debridgeInfo.confirmations >= minConfirmations) {\r\n            confirmedDeployInfo[debridgeId] = deployId;\r\n        }\r\n\r\n        emit DeployConfirmed(deployId, msg.sender);\r\n    }\r\n\r\n    /// @dev Confirms the transfer request.\r\n    /// @param _submissionId Submission identifier.\r\n    function submit(bytes32 _submissionId) external override onlyOracle {\r\n        _submit(_submissionId);\r\n    }\r\n\r\n    /// @dev Confirms single transfer request.\r\n    /// @param _submissionId Submission identifier.\r\n    function _submit(bytes32 _submissionId) internal {\r\n        SubmissionInfo storage submissionInfo = getSubmissionInfo[_submissionId];\r\n        if (submissionInfo.hasVerified[msg.sender]) revert SubmittedAlready();\r\n\r\n        submissionInfo.confirmations += 1;\r\n        if (getOracleInfo[msg.sender].required) {\r\n            submissionInfo.requiredConfirmations += 1;\r\n        }\r\n        submissionInfo.hasVerified[msg.sender] = true;\r\n        if (submissionInfo.confirmations >= minConfirmations) {\r\n            if (currentBlock != uint40(block.number)) {\r\n                currentBlock = uint40(block.number);\r\n                submissionsInBlock = 0;\r\n            }\r\n            bool requireExtraCheck = submissionsInBlock >= confirmationThreshold;\r\n\r\n            if (\r\n                submissionInfo.requiredConfirmations >= requiredOraclesCount &&\r\n                !submissionInfo.isConfirmed &&\r\n                (!requireExtraCheck ||\r\n                    (requireExtraCheck && submissionInfo.confirmations >= excessConfirmations))\r\n            ) {\r\n                submissionsInBlock += 1;\r\n                submissionInfo.isConfirmed = true;\r\n                emit SubmissionApproved(_submissionId);\r\n            }\r\n        }\r\n        emit Confirmed(_submissionId, msg.sender);\r\n    }\r\n\r\n    /* ========== deployAsset ========== */\r\n\r\n    function getConfirmedDeployId(bytes32 _debridgeId) external override view returns (bytes32) {\r\n        return confirmedDeployInfo[_debridgeId];\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev Sets minimal required confirmations.\r\n    /// @param _confirmationThreshold Confirmation info.\r\n    function setThreshold(uint8 _confirmationThreshold) external onlyAdmin {\r\n        if (_confirmationThreshold == 0) revert WrongArgument();\r\n        confirmationThreshold = _confirmationThreshold;\r\n    }\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    /// @dev Returns whether transfer request is confirmed.\r\n    /// @param _submissionId Submission identifier.\r\n    /// @return confirmations number of confirmation.\r\n    /// @return isConfirmed is confirmed sumbission.\r\n    function getSubmissionConfirmations(bytes32 _submissionId)\r\n        external\r\n        view\r\n        override\r\n        returns (uint8 confirmations, bool isConfirmed)\r\n    {\r\n        SubmissionInfo storage submissionInfo = getSubmissionInfo[_submissionId];\r\n\r\n        return (submissionInfo.confirmations, submissionInfo.isConfirmed);\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/oracles/DelegatedStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"../interfaces/ISwapProxy.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\nimport \"../interfaces/IPriceConsumer.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\nlibrary DelegatedStakingHelper {\r\n    /**\r\n     * @dev Calculates shares\r\n     * @param _amount amount of collateral\r\n     * @param _totalShares total number of shares\r\n     * @param _totalAmount total amount of collateral\r\n     */\r\n    function _calculateShares(\r\n        uint256 _amount,\r\n        uint256 _totalShares,\r\n        uint256 _totalAmount\r\n    ) internal pure returns (uint256) {\r\n        if (_totalAmount > 0) {\r\n            return (_amount * _totalShares) / _totalAmount;\r\n        } else {\r\n            return _amount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates amount from shares\r\n     * @param _shares number of shares\r\n     * @param _totalAmount total amount of collateral\r\n     * @param _totalShares total number of shares\r\n     */\r\n    function _calculateFromShares(\r\n        uint256 _shares,\r\n        uint256 _totalAmount,\r\n        uint256 _totalShares\r\n    ) internal pure returns (uint256) {\r\n        if (_totalShares == 0) {\r\n            return 0;\r\n        }\r\n        return (_shares * _totalAmount) / _totalShares;\r\n    }\r\n}\r\n\r\ncontract DelegatedStaking is\r\n    Initializable,\r\n    AccessControlUpgradeable,\r\n    PausableUpgradeable,\r\n    ReentrancyGuardUpgradeable\r\n{\r\n    uint256 public constant UINT_MAX_VALUE =\r\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct RewardInfo {\r\n        uint256 totalAmount; // total rewards\r\n        uint256 distributed; // distributed rewards\r\n    }\r\n\r\n    struct WithdrawalInfo {\r\n        address delegator;\r\n        uint256 amount; // amount of withdrawn token\r\n        uint256 slashingAmount; // slashing amount by governance\r\n        uint256 timelock; // time till the asset is locked\r\n        address receiver; // token receiver\r\n        address collateral; // collateral identifier\r\n        bool executed; // whether is executed\r\n        bool paused; // whether is paused\r\n    }\r\n\r\n    struct WithdrawalRequests {\r\n        mapping(uint256 => WithdrawalInfo) withdrawals;\r\n        uint256 count; // counter of withdrawals from specific validator\r\n    }\r\n\r\n    struct DelegatorsInfo {\r\n        uint256 shares; // delegator share of collateral tokens\r\n        uint256 locked; // share locked by depositing to strategy\r\n        // mapping(address => uint256) strategyShares; // map strategy(aave/compound/yearn) for each collateral\r\n        uint256 accumulatedRewards; // info how many reward tokens were earned\r\n    }\r\n\r\n    struct ValidatorCollateral {\r\n        uint256 stakedAmount; // total tokens staked by delegators\r\n        uint256 shares; // total share of collateral tokens\r\n        uint256 locked; // total share locked by depositing to strategy\r\n        // mapping(address => uint256) strategyShares;\r\n        mapping(address => DelegatorsInfo) delegators; // delegation info for each delegator\r\n        uint256 accumulatedRewards; // how many reward tokens were earned\r\n        uint256 rewardsForWithdrawal; // how many reward tokens validator can withdrawal\r\n    }\r\n\r\n    struct ValidatorInfo {\r\n        address admin;\r\n        mapping(address => ValidatorCollateral) collateralPools; // collateral pools of validator\r\n        uint256 rewardWeightCoefficient;\r\n        uint256 profitSharingBPS; // profit sharing basis points.\r\n        bool delegatorActionPaused; // paused stake/unstake for this validator\r\n        bool isEnabled;\r\n        bool exists;\r\n    }\r\n\r\n    struct Collateral {\r\n        uint256 slashedAmount; // balance of slashing treasury of this assets\r\n        uint256 totalLocked; // total staked tokens\r\n        uint256 rewards; // total accumulated rewards\r\n        uint256 maxStakeAmount; // maximum stake for each validator's collateral\r\n        uint8 decimals;\r\n        bool isEnabled;\r\n        bool exists;\r\n    }\r\n\r\n    // struct Strategy {\r\n    //     address stakeToken;\r\n    //     address strategyToken;\r\n    //     address rewardToken;\r\n    //     uint256 totalShares;\r\n    //     uint256 totalReserves;\r\n    //     uint256 rewards;\r\n    //     bool isEnabled;\r\n    //     bool exists;\r\n    //     bool isRecoverable;\r\n    // }\r\n\r\n    mapping(address => RewardInfo) public getRewardsInfo;\r\n    mapping(address => ValidatorInfo) public getValidatorInfo; // validator address => validator details\r\n    mapping(address => WithdrawalRequests) public getWithdrawalRequests; // validators address => withdrawal requests\r\n\r\n    uint256 public withdrawTimelock; // duration of withdrawal timelock\r\n    uint256 public constant BPS_DENOMINATOR = 1e4; // Basis points, or bps, equal to 1/10000 used to express relative value\r\n    uint256 public constant PPM_DENOMINATOR = 1e6; // parts per million, equal to 1/1000000 used\r\n    uint256 public minProfitSharingBPS;\r\n    uint256 public weightCoefficientDenominator;\r\n    mapping(address => Collateral) public collaterals;\r\n    address[] public validatorAddresses;\r\n    address[] public collateralAddresses;\r\n    // mapping(address => mapping(address => Strategy)) public strategies;\r\n    // address[] public strategyControllerAddresses;\r\n    // mapping(address => bool) public strategyControllerExists;\r\n    IPriceConsumer public priceConsumer;\r\n    ISwapProxy public swapProxy; // proxy to convert the collected rewards into other collaterals\r\n    address public slashingTreasury;\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n    error CollateralDisabled();\r\n    error CollateralLimited();\r\n    error WrongArgument();\r\n    error WrongRequest(uint256 id);\r\n    error AlreadyExecuted(uint256 id);\r\n    error AccessDenied();\r\n\r\n    error DelegatorActionPaused();\r\n    error RequestPaused(uint256 id);\r\n    error Timelock();\r\n    error AlreadyExists();\r\n    error NotExists();\r\n    error ZeroAmount();\r\n    error ZeroAddress();\r\n    error WrongAmount();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier collateralEnabled(address _collateral) {\r\n        if (!collaterals[_collateral].isEnabled) revert CollateralDisabled();\r\n        _;\r\n    }\r\n\r\n    modifier notZeroAddress(address _address) {\r\n        if (_address == address(0)) revert ZeroAddress();\r\n        _;\r\n    }\r\n    /* ========== Events ========== */\r\n\r\n    event Staked(\r\n        address sender,\r\n        address receiver,\r\n        address validator,\r\n        address collateral,\r\n        uint256 stakeAmount,\r\n        uint256 receivedShares\r\n    );\r\n    event UnstakeRequested(\r\n        address delegator,\r\n        address validator,\r\n        address collateral,\r\n        address receipient,\r\n        uint256 timelock,\r\n        uint256 shares,\r\n        uint256 tokenAmount,\r\n        uint256 index\r\n    );\r\n\r\n    event ValidatorRewardsExchanged(\r\n        address _validator,\r\n        address _admin,\r\n        address _collateral,\r\n        uint256 _rewardAmount\r\n    );\r\n\r\n    event SlashedUnstakeRequest(\r\n        address delegator,\r\n        address validator,\r\n        address collateral,\r\n        uint256 slashedAmount,\r\n        uint256 index\r\n    );\r\n\r\n    event SlashedValidatorCollateral(address validator, address collateral, uint256 slashedAmount);\r\n\r\n    event SlashedValidatorRewards(address validator, address collateral, uint256 slashedAmount);\r\n\r\n    event UnstakeExecuted(\r\n        address delegator,\r\n        address validator,\r\n        address collateral,\r\n        uint256 amount,\r\n        uint256 withdrawalId\r\n    );\r\n    event UnstakeCancelled(address delegator, address validator, uint256 withdrawalId);\r\n    event UnstakePaused(address validator, uint256 withdrawalId, bool paused);\r\n    event Liquidated(address validator, address collateral, uint256 amount);\r\n    event SlashedDelegator(\r\n        address delegator,\r\n        address validator,\r\n        address collateral,\r\n        uint256 shares,\r\n        uint256 amount\r\n    );\r\n\r\n    event LiquidatedDelegator(\r\n        address delegator,\r\n        address validator,\r\n        address collateral,\r\n        uint256 amount\r\n    );\r\n    event DepositedToStrategy(\r\n        address validator,\r\n        address delegator,\r\n        uint256 amount,\r\n        address strategy,\r\n        address collateral\r\n    );\r\n    event WithdrawnFromStrategy(\r\n        address validator,\r\n        address delegator,\r\n        uint256 amount,\r\n        address strategy,\r\n        address collateral\r\n    );\r\n    event EmergencyWithdrawnFromStrategy(uint256 amount, address strategy, address collateral);\r\n    event RecoveredFromEmergency(\r\n        address validator,\r\n        uint256 amount,\r\n        address strategy,\r\n        address collateral\r\n    );\r\n    event StrategyReset(address _strategy, address collateral);\r\n    event RewardsReceived(address token, uint256 amount);\r\n    event RewardsDistributed(address rewardToken, uint256 rewardAmount);\r\n    event WithdrawSlashingTreasury(address collateral, uint256 amount);\r\n    event UpdateSlashingTreasury(address newTreasury);\r\n    event WithdrawTimelockUpdated(uint256 newTimelock);\r\n\r\n    event UpdateCollateralEnabled(address collateral, bool isEnabled);\r\n    event UpdateCollateral(address collateral, uint256 maxStakeAmount);\r\n    event UpdateRewardWeight(address validator, uint256 value);\r\n    event EnableValidator(address validator, bool isEnabled);\r\n\r\n    /* PUBLIC */\r\n\r\n    /**\r\n     * @dev Initializer that initializes the most important configurations.\r\n     * @param _withdrawTimelock Duration of withdrawal timelock.\r\n     * @param _priceConsumer Price consumer contract.\r\n     * @param _slashingTreasury Address of slashing treasury.\r\n     */\r\n    function initialize(\r\n        uint256 _withdrawTimelock,\r\n        IPriceConsumer _priceConsumer,\r\n        ISwapProxy _swapProxy,\r\n        address _slashingTreasury\r\n    ) public initializer {\r\n        // Grant the contract deployer the default admin role: it will be able\r\n        // to grant and revoke any roles\r\n        if (\r\n            _slashingTreasury == address(0) ||\r\n            address(_swapProxy) == address(0) ||\r\n            address(_priceConsumer) == address(0)\r\n        ) revert ZeroAddress();\r\n        if (_withdrawTimelock == 0) revert WrongAmount();\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        withdrawTimelock = _withdrawTimelock;\r\n        priceConsumer = _priceConsumer;\r\n        swapProxy = _swapProxy;\r\n        slashingTreasury = _slashingTreasury;\r\n        minProfitSharingBPS = 5000;\r\n\r\n        __ReentrancyGuard_init();\r\n    }\r\n\r\n    /**\r\n     * @dev stake collateral to validator.\r\n     * @param _receiver Delegator receiver address.\r\n     * @param _validator Validator address.\r\n     * @param _collateral address of collateral\r\n     * @param _amount Amount to stake.\r\n     */\r\n    function stake(\r\n        address _receiver,\r\n        address _validator,\r\n        address _collateral,\r\n        uint256 _amount\r\n    ) external nonReentrant whenNotPaused collateralEnabled(_collateral) notZeroAddress(_receiver) {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (validator.delegatorActionPaused) revert DelegatorActionPaused();\r\n        Collateral storage collateral = collaterals[_collateral];\r\n        ValidatorCollateral storage validatorCollateral = validator.collateralPools[_collateral];\r\n        if (validatorCollateral.stakedAmount + _amount > collaterals[_collateral].maxStakeAmount)\r\n            revert CollateralLimited();\r\n        DelegatorsInfo storage delegator = validatorCollateral.delegators[_receiver];\r\n\r\n        IERC20(_collateral).safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Calculate amount of shares to be issued to delegator\r\n        uint256 shares = DelegatedStakingHelper._calculateShares(\r\n            _amount,\r\n            validatorCollateral.shares,\r\n            validatorCollateral.stakedAmount\r\n        );\r\n\r\n        //Increase total collateral of the protocol for this asset\r\n        collateral.totalLocked += _amount;\r\n        //Increase total collateral of the validator for this asset\r\n        validatorCollateral.stakedAmount += _amount;\r\n        validatorCollateral.shares += shares;\r\n        delegator.shares += shares;\r\n\r\n        emit Staked(msg.sender, _receiver, _validator, _collateral, _amount, shares);\r\n\r\n        console.log(\"collateral %s\", _collateral);\r\n        console.log(\"validator %s\", _validator);\r\n        console.log(\"delegation %s\", msg.sender);\r\n        console.log(\"_receiver %s\", _receiver);\r\n        console.log(\"_amount %s\", _amount);\r\n        console.log(\"collateral.totalLocked %s\", collateral.totalLocked);\r\n        console.log(\"validatorCollateral.stakedAmount %s\", validatorCollateral.stakedAmount);\r\n        console.log(\"validatorCollateral.shares %s\", validatorCollateral.shares);\r\n        console.log(\"delegator.shares %s\", delegator.shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws validator reward.\r\n     * @param _validator Validator address.\r\n     * @param _collateral Index of collateral\r\n     * @param _recipient Recepient reward.\r\n     * @param _shares Shares to withdraw.\r\n     */\r\n    function requestUnstake(\r\n        address _validator,\r\n        address _collateral,\r\n        address _recipient,\r\n        uint256 _shares\r\n    ) external nonReentrant whenNotPaused notZeroAddress(_recipient) {\r\n        console.log(\"requestUnstake _validator %s\", _validator);\r\n        console.log(\"requestUnstake _collateral %s\", _collateral);\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (validator.delegatorActionPaused) revert DelegatorActionPaused();\r\n        ValidatorCollateral storage validatorCollateral = validator.collateralPools[_collateral];\r\n        WithdrawalRequests storage withdrawalRequests = getWithdrawalRequests[_validator];\r\n        DelegatorsInfo storage delegator = validatorCollateral.delegators[msg.sender];\r\n\r\n        //if amount is equal to uint(-1), the user wants to redeem everything\r\n        if (_shares == UINT_MAX_VALUE) {\r\n            _shares = delegator.shares;\r\n            console.log(\"set max delegators shares %s\", _shares);\r\n        } else if (_shares > delegator.shares) {\r\n            revert WrongAmount();\r\n        }\r\n\r\n        console.log(\"requestUnstake _shares %s\", _shares);\r\n\r\n        uint256 withdrawTokenAmount = DelegatedStakingHelper._calculateFromShares(\r\n            _shares,\r\n            validatorCollateral.stakedAmount,\r\n            validatorCollateral.shares\r\n        );\r\n\r\n        if (withdrawTokenAmount == 0) revert ZeroAmount();\r\n\r\n        delegator.shares -= _shares;\r\n        console.log(\"new  delegator.shares %s\", delegator.shares);\r\n        validatorCollateral.shares -= _shares;\r\n        validatorCollateral.stakedAmount -= withdrawTokenAmount;\r\n        collaterals[_collateral].totalLocked -= withdrawTokenAmount;\r\n\r\n        uint256 withdrawIndex = withdrawalRequests.count;\r\n        uint256 timelock = block.timestamp + withdrawTimelock;\r\n        WithdrawalInfo storage withdraw = withdrawalRequests.withdrawals[withdrawIndex];\r\n        withdraw.delegator = msg.sender;\r\n        withdraw.amount = withdrawTokenAmount;\r\n        withdraw.timelock = timelock;\r\n        withdraw.receiver = _recipient;\r\n        withdraw.collateral = _collateral;\r\n        //TODO: we can start from 1. If will be changed change everywhere 'currentWithdrawId >= maxCount' to 'currentWithdrawId > maxCount'\r\n        withdrawalRequests.count++;\r\n        emit UnstakeRequested(\r\n            msg.sender,\r\n            _validator,\r\n            _collateral,\r\n            _recipient,\r\n            timelock,\r\n            _shares,\r\n            withdrawTokenAmount,\r\n            withdrawIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Execute withdrawal requests.\r\n     * @param _validator Validator address.\r\n     * @param _withdrawIds Withdrawal identifiers.\r\n     */\r\n    function executeUnstake(address _validator, uint256[] calldata _withdrawIds)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        if (getValidatorInfo[_validator].delegatorActionPaused) revert DelegatorActionPaused();\r\n        WithdrawalRequests storage withdrawalRequests = getWithdrawalRequests[_validator];\r\n        uint256 maxCount = withdrawalRequests.count;\r\n        for (uint256 i = 0; i < _withdrawIds.length; i++) {\r\n            uint256 currentWithdrawId = _withdrawIds[i];\r\n            if (currentWithdrawId >= maxCount) revert WrongRequest(currentWithdrawId);\r\n            WithdrawalInfo storage withdrawal = withdrawalRequests.withdrawals[currentWithdrawId];\r\n            if (withdrawal.executed) revert AlreadyExecuted(currentWithdrawId);\r\n            if (withdrawal.paused) revert RequestPaused(currentWithdrawId);\r\n            if (withdrawal.timelock > block.timestamp) revert Timelock();\r\n\r\n            withdrawal.executed = true;\r\n            uint256 withdrawAmount = withdrawal.amount - withdrawal.slashingAmount; // I think this is already accounted for on L#428\r\n            IERC20(withdrawal.collateral).safeTransfer(withdrawal.receiver, withdrawAmount);\r\n            emit UnstakeExecuted(\r\n                withdrawal.delegator,\r\n                _validator,\r\n                withdrawal.collateral,\r\n                withdrawAmount,\r\n                currentWithdrawId\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel unstake.\r\n     * @param _validator Validator address.\r\n     * @param _withdrawIds Withdrawal identifiers.\r\n     */\r\n    function cancelUnstake(address _validator, uint256[] calldata _withdrawIds)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (validator.delegatorActionPaused) revert DelegatorActionPaused();\r\n        WithdrawalRequests storage withdrawalRequests = getWithdrawalRequests[_validator];\r\n        // uint256 maxCount = withdrawalRequests.count;\r\n        for (uint256 i = 0; i < _withdrawIds.length; i++) {\r\n            uint256 currentWithdrawId = _withdrawIds[i];\r\n            //We will check 'msg.sender != withdrawal.delegator' this extra check\r\n            // if (currentWithdrawId >= maxCount) revert WrongRequest(currentWithdrawId);\r\n            WithdrawalInfo storage withdrawal = withdrawalRequests.withdrawals[currentWithdrawId];\r\n            if (withdrawal.executed) revert AlreadyExecuted(currentWithdrawId);\r\n            if (withdrawal.paused) revert RequestPaused(currentWithdrawId);\r\n            if (msg.sender != withdrawal.delegator) revert AccessDenied();\r\n\r\n            ValidatorCollateral storage validatorCollateral = validator.collateralPools[\r\n                withdrawal.collateral\r\n            ];\r\n            DelegatorsInfo storage delegator = validatorCollateral.delegators[withdrawal.delegator];\r\n\r\n            withdrawal.executed = true;\r\n            uint256 _shares = DelegatedStakingHelper._calculateShares(\r\n                withdrawal.amount,\r\n                validatorCollateral.shares,\r\n                validatorCollateral.stakedAmount\r\n            );\r\n\r\n            collaterals[withdrawal.collateral].totalLocked += withdrawal.amount;\r\n            delegator.shares += _shares;\r\n            validatorCollateral.shares += _shares;\r\n            validatorCollateral.stakedAmount += withdrawal.amount;\r\n            emit UnstakeCancelled(withdrawal.delegator, _validator, currentWithdrawId);\r\n        }\r\n    }\r\n\r\n    // /**\r\n    // * @dev Slash validator rewards.\r\n    // * @param _validator Validator address.\r\n    // * @param _collateral Collateral address.\r\n    // * @param _bpsAmount Basis points to be slashed.\r\n    // */\r\n    // function slashValidatorRewards(\r\n    //     address _validator,\r\n    //     address _collateral,\r\n    //     uint256 _bpsAmount\r\n    // ) external onlyAdmin {\r\n    //     Collateral storage collateral = collaterals[_collateral];\r\n    //     uint256 slashingFraction = _bpsAmount/BPS_DENOMINATOR;\r\n    //     uint256 _slashAmount = getValidatorInfo[_validator].collateralPools[_collateral].rewardsForWithdrawal * slashingFraction;\r\n    //     //TODO: a strange sense, which only increases slashedAmount\r\n    //     collateral.slashedAmount += _slashAmount;\r\n    //     emit SlashedValidatorRewards(_validator, _collateral, _slashAmount);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Stake token to strategies to earn rewards\r\n    //  * @param _validator address of validator\r\n    //  * @param _shares Shares to be staked\r\n    //  * @param _strategy strategy to stake into.\r\n    //  */\r\n    // function depositToStrategy(address _validator, uint256 _shares, address _strategy, address _stakeToken)\r\n    //     external\r\n    //     nonReentrant\r\n    //     whenNotPaused\r\n    // {\r\n    //     Strategy storage strategy = strategies[_strategy][_stakeToken];\r\n    //     DelegatedStakingHelper._validateStrategy(strategy.isEnabled);\r\n    //     IStrategy strategyController = IStrategy(_strategy);\r\n    //     Collateral storage stakeCollateral = collaterals[strategy.stakeToken];\r\n    //     ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n    //     ValidatorCollateral storage validatorCollateral = validator.collateralPools[_stakeToken];\r\n\r\n    //     DelegatorsInfo storage delegator = validator.delegators[msg.sender];\r\n    //     DelegatedStakingHelper._validateDelegator(delegator.exists);\r\n    //     DelegatorsInfo storage delegation = validatorCollateral.delegation[msg.sender];\r\n    //     uint256 _amount = DelegatedStakingHelper._calculateFromShares(\r\n    //         _shares,\r\n    //         validatorCollateral.stakedAmount,\r\n    //         validatorCollateral.shares\r\n    //     );\r\n    //     DelegatedStakingHelper._validateGtE(\r\n    //         delegation.shares\r\n    //         - delegation.locked,\r\n    //         _shares\r\n    //     );\r\n    //     delegation.locked += _shares;\r\n    //     validatorCollateral.locked += _shares;\r\n\r\n    //     IERC20(strategy.stakeToken).safeApprove(address(strategyController), 0);\r\n    //     IERC20(strategy.stakeToken).safeApprove(address(strategyController), _amount);\r\n    //     strategy.totalReserves = strategyController.updateReserves(address(this), strategy.strategyToken);\r\n    //     strategyController.deposit(strategy.stakeToken, _amount);\r\n    //     uint256 afterBalance = strategyController.updateReserves(address(this), strategy.strategyToken);\r\n    //     uint256 receivedAmount = afterBalance - strategy.totalReserves;\r\n    //     strategy.totalReserves = strategyController.updateReserves(address(this), strategy.strategyToken);\r\n    //     uint256 shares = strategy.totalShares > 0\r\n    //         ? DelegatedStakingHelper._calculateShares(receivedAmount, strategy.totalShares, strategy.totalReserves)\r\n    //         : receivedAmount;\r\n    //     strategy.totalShares += shares;\r\n    //     strategy.totalReserves = strategyController.updateReserves(address(this), strategy.strategyToken);\r\n    //     delegation.strategyShares[_strategy] += shares;\r\n    //     validatorCollateral.strategyShares[_strategy] += shares;\r\n    //     stakeCollateral.totalLocked -= _amount;\r\n    //     emit DepositedToStrategy(_validator, msg.sender, _amount, _strategy, strategy.stakeToken);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Withdraw token from strategies to claim rewards\r\n    //  * @param _validator address of validator\r\n    //  * @param _shares number of shares to redeem\r\n    //  * @param _strategy strategy to withdraw from.\r\n    //  */\r\n    // function withdrawFromStrategy(address _validator, uint256 _shares, address _strategy, address _stakeToken)\r\n    //     external\r\n    //     nonReentrant\r\n    //     whenNotPaused\r\n    // {\r\n    //     Strategy storage strategy = strategies[_strategy][_stakeToken];\r\n    //     DelegatedStakingHelper._validateStrategy(strategy.isEnabled);\r\n    //     ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n    //     ValidatorCollateral storage validatorCollateral = validator.collateralPools[_stakeToken];\r\n    //     DelegatorsInfo storage delegator = validator.delegators[msg.sender];\r\n    //     DelegatedStakingHelper._validateDelegator(delegator.exists);\r\n    //     DelegatorsInfo storage delegation = validatorCollateral.delegation[msg.sender];\r\n    //     uint256 beforeBalance = IERC20(strategy.stakeToken).balanceOf(address(this));\r\n    //     strategy.totalReserves = IStrategy(_strategy).updateReserves(address(this), strategy.strategyToken);\r\n    //     uint256 stakeTokenAmount = DelegatedStakingHelper._calculateFromShares(\r\n    //         _shares, strategy.totalReserves, strategy.totalShares\r\n    //     );\r\n\r\n    //     { // scope to avoid stack too deep errors\r\n    //         DelegatedStakingHelper._validateGtE(delegation.strategyShares[_strategy], _shares);\r\n    //         delegation.strategyShares[_strategy] -= _shares;\r\n    //         validatorCollateral.strategyShares[_strategy] -= _shares;\r\n    //         strategy.totalShares -= _shares;\r\n    //         IERC20(strategy.strategyToken).safeApprove(address(_strategy), 0);\r\n    //         IERC20(strategy.strategyToken).safeApprove(address(_strategy), stakeTokenAmount);\r\n    //         IStrategy(_strategy).withdraw(strategy.stakeToken, stakeTokenAmount);\r\n    //     }\r\n    //     uint256 receivedAmount = IERC20(strategy.stakeToken).balanceOf(address(this)) - beforeBalance;\r\n    //     collaterals[strategy.stakeToken].totalLocked += receivedAmount;\r\n    //     strategy.totalReserves = IStrategy(_strategy).updateReserves(address(this), strategy.strategyToken);\r\n    //     uint256 rewardAmount = receivedAmount - stakeTokenAmount;\r\n    //     collaterals[strategy.stakeToken].rewards += rewardAmount;\r\n    //     strategy.rewards += rewardAmount;\r\n    //     validatorCollateral.accumulatedRewards += rewardAmount;\r\n    //     delegation.accumulatedRewards += rewardAmount;\r\n    //     uint256 rewardShares = validatorCollateral.shares > 0\r\n    //     ? DelegatedStakingHelper._calculateShares(rewardAmount, validatorCollateral.shares,\r\n    //         validatorCollateral.stakedAmount)\r\n    //     : rewardAmount;\r\n    //     uint256 stakeTokenShares = DelegatedStakingHelper._calculateShares(\r\n    //         stakeTokenAmount,\r\n    //         validatorCollateral.shares,\r\n    //         validatorCollateral.stakedAmount\r\n    //     );\r\n    //     delegation.shares += rewardShares;\r\n    //     delegation.locked -= stakeTokenShares;\r\n    //     validatorCollateral.locked -= stakeTokenShares;\r\n    //     validatorCollateral.stakedAmount += rewardAmount;\r\n    //     validatorCollateral.shares += rewardShares;\r\n    //     emit WithdrawnFromStrategy(_validator, msg.sender, receivedAmount, _strategy, strategy.stakeToken);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Recovers user share of all funds emergency withdrawn from the strategy.\r\n    //  * @param _strategy Strategy to recover from.\r\n    //  * @param _stakeToken Address of collateral.\r\n    //  * @param _validators Array of validator addresses.\r\n    //  */\r\n    // function recoverFromEmergency(address _strategy, address _stakeToken, address[] calldata _validators)\r\n    //     external\r\n    //     nonReentrant\r\n    //     whenNotPaused\r\n    // {\r\n    //     _recoverFromEmergency(_strategy, _stakeToken, _validators);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Recovers user share of all funds emergency withdrawn from the strategy.\r\n    //  * @param _strategy Strategy to recover from.\r\n    //  * @param _stakeToken Address of collateral.\r\n    //  * @param _validators Array of validator addresses.\r\n    //  */\r\n    // function _recoverFromEmergency(address _strategy, address _stakeToken, address[] memory _validators) internal {\r\n    //     Strategy storage strategy = strategies[_strategy][_stakeToken];\r\n    //     require(!strategy.isEnabled, \"strategy enabled\");\r\n    //     require(strategy.isRecoverable, \"not recoverable\");\r\n    //     for (uint256 i=0; i<_validators.length; i++) {\r\n    //         ValidatorInfo storage validator = getValidatorInfo[_validators[i]];\r\n    //         ValidatorCollateral storage validatorCollateral = validator.collateralPools[_stakeToken];\r\n    //         strategy.totalReserves = IStrategy(_strategy).updateReserves(address(this), strategy.strategyToken);\r\n    //         uint256 amount = DelegatedStakingHelper._calculateFromShares(\r\n    //             validatorCollateral.strategyShares[_strategy], strategy.totalReserves, strategy.totalShares\r\n    //         );\r\n    //         uint256 fullAmount = DelegatedStakingHelper._calculateFromShares(\r\n    //             validatorCollateral.locked, validatorCollateral.stakedAmount, validatorCollateral.shares);\r\n    //         uint256 lost = fullAmount - amount;\r\n    //         strategy.totalShares -= validatorCollateral.strategyShares[_strategy];\r\n    //         validatorCollateral.locked -= validatorCollateral.strategyShares[_strategy];\r\n    //         validatorCollateral.stakedAmount -= lost;\r\n    //         validatorCollateral.strategyShares[_strategy] = 0;\r\n    //         strategy.totalReserves -= amount;\r\n\r\n    //         for (uint256 k=0; k<validator.delegatorCount; k++) {\r\n    //             DelegatorsInfo storage delegation = validatorCollateral.delegation[validator.delegatorAddresses[k]];\r\n    //             if (delegation.strategyShares[_strategy] == 0) continue;\r\n    //             delegation.locked -= delegation.strategyShares[_strategy];\r\n    //             delegation.strategyShares[_strategy] = 0;\r\n    //         }\r\n    //         emit RecoveredFromEmergency(_validators[i], amount, _strategy, strategy.stakeToken);\r\n    //     }\r\n    // }\r\n\r\n    /**\r\n     * @dev Receive protocol rewards.\r\n     * @param _rewardToken Address of reward token.\r\n     * @param _amount Amount of reward tokem.\r\n     */\r\n    function sendRewards(address _rewardToken, uint256 _amount)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        collateralEnabled(_rewardToken)\r\n    {\r\n        IERC20(_rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\r\n        getRewardsInfo[_rewardToken].totalAmount += _amount;\r\n\r\n        emit RewardsReceived(_rewardToken, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates rewards to swapped and credited to validators collateral\r\n     * @param _rewardToken address of reward token\r\n     * @param _rewardAmount amount of reward token\r\n     */\r\n    function _calculateAndUpdateValidatorRewards(address _rewardToken, uint256 _rewardAmount)\r\n        internal\r\n        returns (uint256[] memory, uint256[][] memory)\r\n    {\r\n        uint256 collateralLength = collateralAddresses.length;\r\n        uint256[] memory collectedRewards = new uint256[](collateralLength);\r\n        uint256[][] memory validatorRewards = new uint256[][](validatorAddresses.length);\r\n        //TODO: avoid Stack too deep\r\n        address rewardToken = _rewardToken;\r\n        for (uint256 v = 0; v < validatorAddresses.length; v++) {\r\n            address validatorAddress = validatorAddresses[v];\r\n            ValidatorInfo storage validator = getValidatorInfo[validatorAddress];\r\n            uint256 validatorAmount = (validator.rewardWeightCoefficient * _rewardAmount) /\r\n                weightCoefficientDenominator;\r\n            uint256 delegatorsAmount = (validatorAmount * validator.profitSharingBPS) /\r\n                BPS_DENOMINATOR;\r\n\r\n            (uint256[] memory poolsETHAmounts, uint256 totalETHAmount) = getTotalETHAmount(\r\n                validatorAddress\r\n            );\r\n\r\n            uint256[] memory tempValidatorRewards = new uint256[](collateralLength);\r\n            for (uint256 c = 0; c < collateralLength; c++) {\r\n                uint256 delegatorReward = (delegatorsAmount * poolsETHAmounts[c]) / totalETHAmount;\r\n                if (rewardToken == collateralAddresses[c]) {\r\n                    ValidatorCollateral storage validatorRewardCollateral = validator\r\n                        .collateralPools[rewardToken];\r\n                    validatorRewardCollateral.stakedAmount += delegatorReward;\r\n                    validatorRewardCollateral.accumulatedRewards += validatorAmount;\r\n                    validatorRewardCollateral.rewardsForWithdrawal +=\r\n                        validatorAmount -\r\n                        delegatorsAmount;\r\n\r\n                    collaterals[rewardToken].totalLocked += delegatorReward;\r\n                    collaterals[rewardToken].rewards += delegatorReward;\r\n                    // tempValidatorRewards[c] = 0;\r\n                    // collectedRewards[c] += 0;\r\n                } else {\r\n                    tempValidatorRewards[c] = delegatorReward;\r\n                    collectedRewards[c] += delegatorReward;\r\n                }\r\n            }\r\n            validatorRewards[v] = tempValidatorRewards;\r\n        }\r\n        return (collectedRewards, validatorRewards);\r\n    }\r\n\r\n    /**\r\n     * @dev Distributes validator rewards to validator/delegators\r\n     * @param _rewardToken address of reward token\r\n     */\r\n    function distributeValidatorRewards(address _rewardToken)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        collateralEnabled(_rewardToken)\r\n    {\r\n        RewardInfo storage rewardInfo = getRewardsInfo[_rewardToken];\r\n        uint256 _rewardAmount = rewardInfo.totalAmount - rewardInfo.distributed;\r\n        if (_rewardAmount == 0) revert ZeroAmount();\r\n        rewardInfo.distributed += _rewardAmount;\r\n\r\n        // we need to know how much tokens to swap for each pool;\r\n        // Sample\r\n        //         bob\t\t\t        david\t\t\t        sarah\r\n        //        LINK\tUSDC\tUSDT\tLINK\tUSDC\tUSDT\tLINK\tUSDC\tUSDT\r\n\r\n        // ALICE  2000\t10000\t10000\t1000\t10000\t10000\t1000\t10000\t10000\r\n\r\n        // EVE\t  1000\t10000\t10000\t1000\t20000\t10000\t1000\t10000\t10000\r\n\r\n        // SAM\t  1000\t10000\t10000\t1000\t10000\t10000\t1000\t10000\t20000\r\n        // profitSharingBPS 50          75                      100\r\n        // we distrubute reward 1800 USDT (600 USDT for each validator)\r\n        // bob will have 300 usdt and his validators 300 usdt\r\n        // link price 25 usd\r\n        // bob                  LINK\t                    USDC\t            USDT\r\n        // Pool cost in USD     4000*25=100000                      30000               30000\r\n        // will receive usdt    100000*300/160000=187,5     56,25               56,25\r\n        // we need to swap  187,5 usdt to link and just increment link collateral.totalStaked += receivedLinkAmount;\r\n        // we need to swap  56,25 usdt to usdc and just increment usdc collateral.totalStaked += receivedUSDCAmount;\r\n        // We don't need to create swap for each validators pool. Firs we need to calulate total Link to swap\r\n\r\n        // uint256[] memory collectedRewards = new uint256[](collateralAddresses.length);\r\n        // uint256[][] memory validatorRewards = new uint256[][](validatorAddresses.length);\r\n        (\r\n            uint256[] memory collectedRewards,\r\n            uint256[][] memory validatorRewards\r\n        ) = _calculateAndUpdateValidatorRewards(_rewardToken, _rewardAmount);\r\n\r\n        for (uint256 cc = 0; cc < collateralAddresses.length; cc++) {\r\n            address currentCollateral = collateralAddresses[cc];\r\n            uint256 tokenRewardAmount = collectedRewards[cc];\r\n\r\n            if (currentCollateral == _rewardToken || tokenRewardAmount == 0) {\r\n                console.log(\r\n                    \"Warn  %s _rewardToken: %s tokenRewardAmount %s\",\r\n                    currentCollateral,\r\n                    _rewardToken,\r\n                    tokenRewardAmount\r\n                );\r\n                continue;\r\n            }\r\n\r\n            // transfer direct to our swap contract\r\n            IERC20(_rewardToken).safeTransfer(address(swapProxy), tokenRewardAmount);\r\n\r\n            uint256 balanceBefore = IERC20(currentCollateral).balanceOf(address(this));\r\n            swapProxy.swap(_rewardToken, currentCollateral, address(this));\r\n            uint256 balanceAfter = IERC20(currentCollateral).balanceOf(address(this));\r\n            // override amount to received swapped tokens\r\n            tokenRewardAmount = balanceAfter - balanceBefore;\r\n            console.log(\"tokenReward amount: %s for %s\", tokenRewardAmount, currentCollateral);\r\n            collaterals[currentCollateral].totalLocked += tokenRewardAmount;\r\n            collaterals[currentCollateral].rewards += tokenRewardAmount;\r\n\r\n            // now we need to split amountOut for each current collateral between validator pools\r\n            uint256 postSwapRewardAmount;\r\n            for (uint256 vv = 0; vv < validatorAddresses.length; vv++) {\r\n                postSwapRewardAmount =\r\n                    (validatorRewards[vv][cc] * tokenRewardAmount) /\r\n                    collectedRewards[cc];\r\n                ValidatorCollateral storage validatorCollateral = getValidatorInfo[\r\n                    validatorAddresses[vv]\r\n                ].collateralPools[currentCollateral];\r\n                console.log(\r\n                    \"postSwapRewardAmount amount: %s for %s and validator %s\",\r\n                    postSwapRewardAmount,\r\n                    currentCollateral,\r\n                    validatorAddresses[vv]\r\n                );\r\n                validatorCollateral.stakedAmount += postSwapRewardAmount;\r\n                validatorCollateral.accumulatedRewards += postSwapRewardAmount;\r\n            }\r\n        }\r\n        emit RewardsDistributed(_rewardToken, _rewardAmount);\r\n    }\r\n\r\n    function exchangeValidatorRewards(address _validator, address _collateral)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (validator.delegatorActionPaused) revert DelegatorActionPaused();\r\n        ValidatorCollateral storage validatorCollateral = validator.collateralPools[_collateral];\r\n        DelegatorsInfo storage admin = validatorCollateral.delegators[validator.admin];\r\n        uint256 rewardAmount = validatorCollateral.rewardsForWithdrawal;\r\n        uint256 rewardShares = DelegatedStakingHelper._calculateShares(\r\n            rewardAmount,\r\n            validatorCollateral.shares,\r\n            validatorCollateral.stakedAmount\r\n        );\r\n        if (rewardShares == 0) revert ZeroAmount();\r\n\r\n        validatorCollateral.rewardsForWithdrawal -= rewardAmount;\r\n        collaterals[_collateral].totalLocked += rewardAmount;\r\n        validatorCollateral.stakedAmount += rewardAmount;\r\n        validatorCollateral.shares += rewardShares;\r\n        admin.accumulatedRewards += rewardAmount;\r\n        admin.shares += rewardShares;\r\n        emit ValidatorRewardsExchanged(_validator, validator.admin, _collateral, rewardAmount);\r\n    }\r\n\r\n    /* ========== VALIDATOR SETTINGS ========== */\r\n\r\n    /**\r\n     * @dev set basis points of profit sharing\r\n     * @param _validator address of validator\r\n     * @param _profitSharingBPS profit sharing basis points\r\n     */\r\n    function setProfitSharing(address _validator, uint256 _profitSharingBPS)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n    {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (validator.admin != msg.sender) revert AdminBadRole();\r\n        if (_profitSharingBPS < minProfitSharingBPS || _profitSharingBPS > BPS_DENOMINATOR)\r\n            revert WrongArgument();\r\n        validator.profitSharingBPS = _profitSharingBPS;\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    // /**\r\n    //  * @dev Withdraws all funds from the strategy.\r\n    //  * @param _strategy Strategy to withdraw from.\r\n    //  */\r\n    // function emergencyWithdrawFromStrategy(address _strategy, address _stakeToken)\r\n    //     external\r\n    //     onlyAdmin\r\n    // {\r\n    //     Strategy storage strategy = strategies[_strategy][_stakeToken];\r\n    //     DelegatedStakingHelper._validateStrategy(strategy.isEnabled);\r\n    //     IStrategy strategyController = IStrategy(_strategy);\r\n    //     Collateral storage stakeCollateral = collaterals[strategy.stakeToken];\r\n    //     IERC20(strategy.strategyToken).safeApprove(address(_strategy), 0);\r\n    //     IERC20(strategy.strategyToken).safeApprove(address(_strategy), type(uint256).max);\r\n    //     uint256 beforeBalance = strategyController.updateReserves(address(this), strategy.stakeToken);\r\n    //     strategyController.withdrawAll(strategy.stakeToken);\r\n    //     uint256 afterBalance = strategyController.updateReserves(address(this), strategy.stakeToken);\r\n    //     uint256 receivedAmount = afterBalance - beforeBalance;\r\n    //     stakeCollateral.totalLocked += receivedAmount;\r\n    //     strategy.totalReserves = receivedAmount;\r\n    //     strategy.isEnabled = false;\r\n    //     strategy.isRecoverable = true;\r\n    //     emit EmergencyWithdrawnFromStrategy(receivedAmount, _strategy, strategy.stakeToken);\r\n    // }\r\n\r\n    // function resetStrategy(address _strategy, address _stakeToken)\r\n    //     external\r\n    //     onlyAdmin\r\n    // {\r\n    //     Strategy storage strategy = strategies[_strategy][_stakeToken];\r\n    //     require(!strategy.isEnabled, \"strategy enabled\");\r\n    //     _recoverFromEmergency(_strategy, _stakeToken, validatorAddresses);\r\n    //     strategy.totalReserves = 0;\r\n    //     strategy.totalShares = 0;\r\n    //     strategy.isEnabled = true;\r\n    //     strategy.isRecoverable = false;\r\n    //     emit StrategyReset(_strategy, strategy.stakeToken);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Confiscate collateral.\r\n    //  * @param _validator Validator address.\r\n    //  * @param _collaterals Collateral addresses.\r\n    //  * @param _slashPPM Slashing ppm (1e6 DENOMINATOR)\r\n    //  */\r\n    // function liquidate(address _validator, address[] calldata _collaterals, uint256 _slashPPM) external onlyAdmin { //TODO:_bpsAmount to ppmNumerator\r\n    //     ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n    //     //TODO: removed\r\n    //     // uint256 _delegatorBPS = validator.profitSharingBPS * _bpsAmount / BPS_DENOMINATOR;\r\n    //     // uint256 validatorBPS = _bpsAmount - _delegatorBPS;\r\n\r\n    //     // slashUnstakeRequests(_validator, , , _delegatorBPS * (10 ** (18 - BPS_DENOMINATOR))); TODO\r\n\r\n    //     for (uint256 i=0; i<_collaterals.length; i++) {\r\n    //         address _collateral = _collaterals[i];\r\n    //         uint256 delegatorBPS = _delegatorBPS;\r\n    //         ValidatorCollateral storage validatorCollateral = validator.collateralPools[_collateral];\r\n    //         DelegatorsInfo storage adminCollateral = validatorCollateral.delegators[validator.admin];\r\n    //         Collateral storage collateral = collaterals[_collateral];\r\n    //         uint256 totalSlashed;\r\n    //         // slash admin start\r\n    //         if (adminCollateral.shares/validatorCollateral.shares < validatorBPS) {\r\n    //             _liquidateDelegator(_validator, validator.admin, _collateral, BPS_DENOMINATOR);\r\n    //             delegatorBPS += validatorBPS - adminCollateral.shares/validatorCollateral.shares;\r\n    //         } else {\r\n    //             _liquidateDelegator(_validator, validator.admin, _collateral, validatorBPS);\r\n    //         }\r\n    //         slashValidatorRewards(_validator, _collateral, validatorBPS);\r\n    //         // slash admin end\r\n    //         // slash strategy deposits\r\n    //         totalSlashed += _slashValidatorCollateralStrategyDeposits(_validator, _collateral, delegatorBPS);\r\n    //         // slash unlocked collateral\r\n    //         uint256 slashedAmount = DelegatedStakingHelper._calculateFromShares(\r\n    //             (validatorCollateral.shares - validatorCollateral.locked) * delegatorBPS / BPS_DENOMINATOR,\r\n    //             validatorCollateral.stakedAmount,\r\n    //             validatorCollateral.shares\r\n    //         );\r\n    //         validatorCollateral.stakedAmount -= slashedAmount;\r\n    //         collateral.slashedAmount += slashedAmount;\r\n    //         collateral.totalLocked -= slashedAmount;\r\n    //         totalSlashed += slashedAmount;\r\n\r\n    //         IERC20(_collateral).safeTransfer(slashingTreasury, totalSlashed);\r\n    //         emit Liquidated(_validator, _collateral, totalSlashed);\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Confiscate delegator collateral.\r\n    //  * @param _validator Validator address.\r\n    //  * @param _delegator Delegator address.\r\n    //  * @param _collateral Index of collateral.\r\n    //  * @param _bpsAmount Basis points to slash.\r\n    //  */\r\n    // function _liquidateDelegator(address _validator, address _delegator, address _collateral, uint256 _bpsAmount) internal {\r\n    //     ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n    //     ValidatorCollateral storage validatorCollateral = validator.collateralPools[_collateral];\r\n    //     DelegatorsInfo storage delegator = validatorCollateral.delegators[_delegator];\r\n    //     Collateral storage collateral = collaterals[_collateral];\r\n    //     uint256 slashingFraction = _bpsAmount/BPS_DENOMINATOR;\r\n    //     uint256 totalSlashed;\r\n\r\n    //     // slash strategy deposits\r\n    //     _slashDelegatorStrategyDeposits(_validator, _delegator, _collateral, _bpsAmount);\r\n\r\n    //     // slash delegation collateral start\r\n    //     uint256 _shares = (validatorCollateral.shares - validatorCollateral.locked) * slashingFraction;\r\n    //     uint256 slashedAmount = DelegatedStakingHelper._calculateFromShares(\r\n    //         _shares,\r\n    //         validatorCollateral.stakedAmount,\r\n    //         validatorCollateral.shares\r\n    //     );\r\n    //     delegator.shares -= _shares;\r\n    //     validatorCollateral.shares -= _shares;\r\n    //     validatorCollateral.stakedAmount -= slashedAmount;\r\n    //     collateral.slashedAmount += slashedAmount;\r\n    //     collateral.totalLocked -= slashedAmount;\r\n    //     totalSlashed += slashedAmount;\r\n    //     // slash delegation collateral end\r\n\r\n    //     IERC20(_collateral).safeTransfer(slashingTreasury, totalSlashed);\r\n    //     emit LiquidatedDelegator(_delegator, _validator, _collateral, totalSlashed);\r\n    // }\r\n\r\n    // function liquidateDelegator(address _validator, address _delegator, address _collateral, uint256 _bpsAmount) external onlyAdmin {\r\n    //     _liquidateDelegator(_validator, _delegator, _collateral, _bpsAmount);\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Confiscates collateral deposited to strategy\r\n    //  * @param _validator Validator address.\r\n    //  * @param _collateral Collateral address.\r\n    //  * @param _bpsAmount Basis points to slash.\r\n    //  */\r\n    // function _slashValidatorCollateralStrategyDeposits(address _validator, address _collateral, uint256 _bpsAmount) internal returns(uint256) {\r\n    //     Collateral storage collateral = collaterals[_collateral];\r\n    //     ValidatorCollateral storage validatorCollateral = getValidatorInfo[_validator].collateralPools[_collateral];\r\n    //     uint256 slashingFraction = _bpsAmount / BPS_DENOMINATOR;\r\n    //     uint256 totalSlashed;\r\n    //     for (uint256 j=0; j<strategyControllerAddresses.length; j++) {\r\n    //         address _strategyController = strategyControllerAddresses[j];\r\n    //         Strategy storage strategy = strategies[_strategyController][_collateral];\r\n    //         uint256 beforeBalance = IERC20(_collateral).balanceOf(address(this));\r\n    //         strategy.totalReserves = IStrategy(_strategyController).updateReserves(address(this), strategy.strategyToken);\r\n    //         uint256 _strategyShares = validatorCollateral.strategyShares[_strategyController] * slashingFraction;\r\n    //         uint256 stakeTokenCollateral = DelegatedStakingHelper._calculateFromShares(\r\n    //             _strategyShares, strategy.totalReserves, strategy.totalShares\r\n    //         );\r\n    //         strategy.totalShares -= _strategyShares;\r\n    //         IERC20(strategy.strategyToken).safeApprove(_strategyController, 0);\r\n    //         IERC20(strategy.strategyToken).safeApprove(_strategyController, _strategyShares);\r\n    //         IStrategy(_strategyController).withdraw(_collateral, _strategyShares);\r\n    //         uint256 receivedAmount = IERC20(_collateral).balanceOf(address(this)) - beforeBalance;\r\n    //         strategy.totalReserves = IStrategy(_strategyController).updateReserves(address(this), strategy.strategyToken);\r\n    //         uint256 rewardAmount = receivedAmount - stakeTokenCollateral;\r\n    //         collateral.rewards += rewardAmount;\r\n    //         strategy.rewards += rewardAmount;\r\n    //         validatorCollateral.stakedAmount -= stakeTokenCollateral;\r\n    //         collateral.slashedAmount += receivedAmount;\r\n    //         totalSlashed += receivedAmount;\r\n    //     }\r\n    //     return totalSlashed;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Confiscates delegator collateral deposited to strategy\r\n    //  * @param _validator Validator address.\r\n    //  * @param _delegator Delegator address.\r\n    //  * @param _collateral Collateral address.\r\n    //  * @param _bpsAmount Basis points to slash.\r\n    //  */\r\n    // function _slashDelegatorStrategyDeposits(address _validator, address _delegator, address _collateral, uint256 _bpsAmount) internal returns(uint256) {\r\n    //     ValidatorCollateral storage validatorCollateral = getValidatorInfo[_validator].collateralPools[_collateral];\r\n    //     DelegatorsInfo storage delegator = validatorCollateral.delegators[_delegator];\r\n    //     Collateral storage collateral = collaterals[_collateral];\r\n    //     uint256 slashingFraction = _bpsAmount/BPS_DENOMINATOR;\r\n    //     uint256 totalSlashed;\r\n    //     for (uint i=0; i<strategyControllerAddresses.length; i++) {\r\n    //         address _strategyController = strategyControllerAddresses[i];\r\n    //         Strategy storage strategy = strategies[_strategyController][_collateral];\r\n    //         uint256 beforeBalance = IERC20(_collateral).balanceOf(address(this));\r\n    //         strategy.totalReserves = IStrategy(_strategyController).updateReserves(address(this), strategy.strategyToken);\r\n    //         uint256 _strategyShares = delegator.strategyShares[_strategyController] * slashingFraction;\r\n    //         uint256 stakeTokenCollateral = DelegatedStakingHelper._calculateFromShares(\r\n    //             _strategyShares, strategy.totalReserves, strategy.totalShares\r\n    //         );\r\n    //         delegator.strategyShares[_strategyController] -= _strategyShares;\r\n    //         validatorCollateral.strategyShares[_strategyController] -= _strategyShares;\r\n    //         strategy.totalShares -= _strategyShares;\r\n    //         IERC20(strategy.strategyToken).safeApprove(_strategyController, 0);\r\n    //         IERC20(strategy.strategyToken).safeApprove(_strategyController, _strategyShares);\r\n    //         IStrategy(_strategyController).withdraw(_collateral, _strategyShares);\r\n    //         uint256 receivedAmount = IERC20(_collateral).balanceOf(address(this)) - beforeBalance;\r\n    //         strategy.totalReserves = IStrategy(_strategyController).updateReserves(address(this), strategy.strategyToken);\r\n    //         uint256 rewardAmount = receivedAmount - stakeTokenCollateral;\r\n    //         uint256 slashedStrategyShares = DelegatedStakingHelper._calculateShares(\r\n    //                 stakeTokenCollateral,\r\n    //                 validatorCollateral.shares,\r\n    //                 validatorCollateral.stakedAmount);\r\n    //         collateral.rewards += rewardAmount;\r\n    //         strategy.rewards += rewardAmount;\r\n    //         delegator.shares -= slashedStrategyShares;\r\n    //         validatorCollateral.shares -= slashedStrategyShares;\r\n    //         delegator.locked -= slashedStrategyShares;\r\n    //         validatorCollateral.locked -= slashedStrategyShares;\r\n    //         validatorCollateral.stakedAmount -= stakeTokenCollateral;\r\n    //         collateral.slashedAmount += receivedAmount;\r\n    //         totalSlashed += receivedAmount;\r\n    //     }\r\n    //     return totalSlashed;\r\n    // }\r\n\r\n    /**\r\n     * @dev Updates slashing treasury address.\r\n     * @param _newTreasury New slashing treasury address.\r\n     */\r\n    function updateSlashingTreasury(address _newTreasury)\r\n        external\r\n        onlyAdmin\r\n        notZeroAddress(_newTreasury)\r\n    {\r\n        slashingTreasury = _newTreasury;\r\n        emit UpdateSlashingTreasury(_newTreasury);\r\n    }\r\n\r\n    /**\r\n     * @dev Add new validator.\r\n     * @param _validator Validator address.\r\n     * @param _admin Admin address.\r\n     */\r\n    function addValidator(\r\n        address _validator,\r\n        address _admin,\r\n        uint256 _rewardWeightCoefficient,\r\n        uint256 _profitSharingBPS\r\n    ) external onlyAdmin notZeroAddress(_validator) notZeroAddress(_admin) {\r\n        if (_profitSharingBPS < minProfitSharingBPS || _profitSharingBPS > BPS_DENOMINATOR)\r\n            revert WrongArgument();\r\n\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (!validator.exists) {\r\n            validatorAddresses.push(_validator);\r\n        }\r\n        validator.admin = _admin;\r\n        validator.rewardWeightCoefficient = _rewardWeightCoefficient;\r\n        weightCoefficientDenominator += _rewardWeightCoefficient;\r\n        validator.profitSharingBPS = _profitSharingBPS;\r\n        validator.exists = true;\r\n        validator.isEnabled = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update validator enabled status.\r\n     * @param _validator Validator address.\r\n     * @param _isEnabled Is validator enabled.\r\n     */\r\n    function setValidatorEnabled(address _validator, bool _isEnabled) external onlyAdmin {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (!validator.exists || validator.isEnabled == _isEnabled) revert WrongArgument();\r\n        // If we enable validator\r\n        if (_isEnabled) {\r\n            validatorAddresses.push(_validator);\r\n        }\r\n        // If we disable validator\r\n        else {\r\n            for (uint256 i = 0; i < validatorAddresses.length; i++) {\r\n                if (validatorAddresses[i] == _validator) {\r\n                    validatorAddresses[i] = validatorAddresses[validatorAddresses.length - 1];\r\n                    validatorAddresses.pop();\r\n                }\r\n            }\r\n        }\r\n        validator.isEnabled = _isEnabled;\r\n        emit EnableValidator(_validator, _isEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new collateral\r\n     * @param _token Address of token\r\n     */\r\n    function addCollateral(address _token, uint256 _maxStakeAmount)\r\n        external\r\n        onlyAdmin\r\n        notZeroAddress(_token)\r\n    {\r\n        Collateral storage collateral = collaterals[_token];\r\n        if (collateral.exists) revert AlreadyExists();\r\n\r\n        collateral.exists = true;\r\n        collateral.isEnabled = true;\r\n        collateral.decimals = ERC20(_token).decimals();\r\n        collateral.maxStakeAmount = _maxStakeAmount;\r\n        collateralAddresses.push(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Update collateral enabled\r\n     * @param _collateral address of collateral\r\n     * @param _isEnabled bool of enable\r\n     */\r\n    function updateCollateralEnabled(address _collateral, bool _isEnabled) external onlyAdmin {\r\n        Collateral storage collateral = collaterals[_collateral];\r\n        if (!collateral.exists || collateral.isEnabled == _isEnabled) revert WrongArgument();\r\n        if (_isEnabled) {\r\n            collateralAddresses.push(_collateral);\r\n        } else {\r\n            for (uint256 i = 0; i < collateralAddresses.length; i++) {\r\n                if (collateralAddresses[i] == _collateral) {\r\n                    collateralAddresses[i] = collateralAddresses[collateralAddresses.length - 1];\r\n                    collateralAddresses.pop();\r\n                }\r\n            }\r\n        }\r\n        collateral.isEnabled = _isEnabled;\r\n        emit UpdateCollateralEnabled(_collateral, _isEnabled);\r\n    }\r\n\r\n    /**\r\n     * @dev update collateral max amount\r\n     * @param _collateral address of collateral\r\n     * @param _maxStakeAmount max amount\r\n     */\r\n    function updateCollateral(address _collateral, uint256 _maxStakeAmount) external onlyAdmin {\r\n        collaterals[_collateral].maxStakeAmount = _maxStakeAmount;\r\n        emit UpdateCollateral(_collateral, _maxStakeAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev update validator reward weight coefficient\r\n     * @param _validator address of validator\r\n     * @param _value reward weight coefficient\r\n     */\r\n    function updateRewardWeight(address _validator, uint256 _value) external onlyAdmin {\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        if (!validator.exists) revert NotExists();\r\n        if (_value == 0) revert WrongAmount();\r\n        weightCoefficientDenominator -= validator.rewardWeightCoefficient;\r\n        validator.rewardWeightCoefficient = _value;\r\n        weightCoefficientDenominator += _value;\r\n        emit UpdateRewardWeight(_validator, _value);\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Add a new strategy controller\r\n    //  * @param _strategyController Strategy controller address\r\n    //  */\r\n    // function addStrategyController(address _strategyController) external onlyAdmin {\r\n    //     if (strategyControllerExists[_strategyController]) revert AlreadyExists();\r\n    //     strategyControllerAddresses.push(_strategyController);\r\n    //     strategyControllerExists[_strategyController] = true;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Add a new strategy\r\n    //  * @param _strategyController address to strategy\r\n    //  * @param _stakeToken collateralId of stakeToken\r\n    //  * @param _rewardToken collateralId of rewardToken\r\n    //  */\r\n    // function addStrategy(address _strategyController, address _stakeToken, address _rewardToken) external onlyAdmin {\r\n    //     Strategy storage strategy = strategies[_strategyController][_stakeToken];\r\n    //     if (strategy.exists)  revert AlreadyExists();\r\n    //     strategy.stakeToken = _stakeToken;\r\n    //     strategy.strategyToken = IStrategy(_strategyController).strategyToken(_stakeToken);\r\n    //     strategy.rewardToken = _rewardToken;\r\n    //     strategy.isEnabled = true;\r\n    //     strategy.exists = true;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev enable strategy\r\n    //  * @param _strategy address of strategy\r\n    //  * @param _stakeToken address of token\r\n    //  * @param _isEnabled bool of enable\r\n    //  */\r\n    // function updateStrategy(address _strategy, address _stakeToken, bool _isEnabled) external onlyAdmin {\r\n    //     strategies[_strategy][_stakeToken].isEnabled = _isEnabled;\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev enable strategy recoverable\r\n    //  * @param _strategy address of strategy\r\n    //  * @param _stakeToken address of token\r\n    //  * @param _isRecoverable bool of recoverable\r\n    //  */\r\n    // function updateStrategyRecoverable(address _strategy, address _stakeToken, bool _isRecoverable) external onlyAdmin {\r\n    //     strategies[_strategy][_stakeToken].isRecoverable = _isRecoverable;\r\n    // }\r\n\r\n    /**\r\n     * @dev Pause/unpause unstaking request.\r\n     * @param _validator Validator address.\r\n     * @param _withdrawIds Withdraw requests ids.\r\n     * @param _paused pause/unpause.\r\n     */\r\n    function pauseUnstakeRequests(\r\n        address _validator,\r\n        uint256[] memory _withdrawIds,\r\n        bool _paused\r\n    ) external onlyAdmin {\r\n        WithdrawalRequests storage withdrawalRequests = getWithdrawalRequests[_validator];\r\n        uint256 maxCount = withdrawalRequests.count;\r\n        for (uint256 i = 0; i < _withdrawIds.length; i++) {\r\n            uint256 currentWithdrawId = _withdrawIds[i];\r\n            if (currentWithdrawId >= maxCount) revert WrongRequest(currentWithdrawId);\r\n            WithdrawalInfo storage withdrawal = withdrawalRequests.withdrawals[currentWithdrawId];\r\n            if (!withdrawal.executed) {\r\n                withdrawal.paused = _paused;\r\n                emit UnstakePaused(_validator, currentWithdrawId, _paused);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set Price Consumer\r\n     * @param _priceConsumer address of price consumer\r\n     */\r\n    function setPriceConsumer(IPriceConsumer _priceConsumer)\r\n        external\r\n        onlyAdmin\r\n        notZeroAddress(address(_priceConsumer))\r\n    {\r\n        priceConsumer = _priceConsumer;\r\n    }\r\n\r\n    /**\r\n     * @dev Set swap converter proxy.\r\n     * @param _swapProxy Swap proxy address.\r\n     */\r\n    function setSwapProxy(ISwapProxy _swapProxy)\r\n        external\r\n        onlyAdmin\r\n        notZeroAddress(address(_swapProxy))\r\n    {\r\n        if (address(_swapProxy) == address(0)) revert ZeroAddress();\r\n        swapProxy = _swapProxy;\r\n    }\r\n\r\n    /**\r\n     * @dev Change withdrawal timelock.\r\n     * @param _newTimelock New timelock.\r\n     */\r\n    function setWithdrawTimelock(uint256 _newTimelock) external onlyAdmin {\r\n        if (_newTimelock == 0) revert WrongAmount();\r\n        withdrawTimelock = _newTimelock;\r\n        emit WithdrawTimelockUpdated(_newTimelock);\r\n    }\r\n\r\n    /**\r\n     * @dev set min basis points of profit sharing\r\n     * @param _profitSharingBPS profit sharing basis points\r\n     */\r\n    function setMinProfitSharing(uint256 _profitSharingBPS) external onlyAdmin {\r\n        if (_profitSharingBPS > BPS_DENOMINATOR) revert WrongArgument();\r\n        for (uint256 i = 0; i < validatorAddresses.length; i++) {\r\n            ValidatorInfo storage validator = getValidatorInfo[validatorAddresses[i]];\r\n            if (validator.profitSharingBPS < _profitSharingBPS) {\r\n                validator.profitSharingBPS = _profitSharingBPS;\r\n            }\r\n        }\r\n        minProfitSharingBPS = _profitSharingBPS;\r\n    }\r\n\r\n    /* ========== SLASHING ========== */\r\n\r\n    /**\r\n     * @dev Slash withdrawal requests.\r\n     * @param _validator Validator address.\r\n     * @param _fromWithdrawId Starting from withdrawal identifier.\r\n     * @param _toWithdrawId Up to withdrawal identifier.\r\n     * @param _slashPPM Slashing ppm (1e6 DENOMINATOR)\r\n     */\r\n    function slashUnstakeRequests(\r\n        address _validator,\r\n        uint256 _fromWithdrawId,\r\n        uint256 _toWithdrawId,\r\n        uint256 _slashPPM\r\n    ) public onlyAdmin {\r\n        WithdrawalRequests storage withdrawalRequests = getWithdrawalRequests[_validator];\r\n        if (_toWithdrawId >= withdrawalRequests.count) revert WrongArgument();\r\n        //TODO: write test Do we have gas optimization when load to variable?\r\n        address[] memory collateralAddresses_ = collateralAddresses;\r\n        uint256[] memory slashingAmounts = new uint256[](collateralAddresses.length);\r\n        for (\r\n            uint256 currentWithdrawId = _fromWithdrawId;\r\n            currentWithdrawId <= _toWithdrawId;\r\n            currentWithdrawId++\r\n        ) {\r\n            WithdrawalInfo storage withdrawal = withdrawalRequests.withdrawals[currentWithdrawId];\r\n            if (!withdrawal.executed) {\r\n                uint256 slashingAmount = (withdrawal.amount * _slashPPM) / PPM_DENOMINATOR;\r\n                withdrawal.amount = withdrawal.amount - slashingAmount;\r\n                withdrawal.slashingAmount = slashingAmount;\r\n                address collateralAddress = withdrawal.collateral;\r\n                uint256 collateralIndex;\r\n                // Find collateral index\r\n                for (uint256 i = 0; i < collateralAddresses_.length; i++) {\r\n                    if (collateralAddresses_[i] == collateralAddress) {\r\n                        collateralIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                // Increase slashing amount in local variable\r\n                slashingAmounts[collateralIndex] += slashingAmount;\r\n\r\n                emit SlashedUnstakeRequest(\r\n                    withdrawal.delegator,\r\n                    _validator,\r\n                    withdrawal.collateral,\r\n                    slashingAmount,\r\n                    currentWithdrawId\r\n                );\r\n            }\r\n        }\r\n\r\n        for (uint256 i = 0; i < slashingAmounts.length; i++) {\r\n            if (slashingAmounts[i] > 0) {\r\n                collaterals[collateralAddresses_[i]].slashedAmount += slashingAmounts[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Slash validator.\r\n     * @param _validator Validator address.\r\n     * @param _collaterals Collaterals addresses.\r\n     * @param _slashAmounts Amounts to be slashed.\r\n     */\r\n    function slashValidator(\r\n        address _validator,\r\n        address[] calldata _collaterals,\r\n        uint256[] calldata _slashAmounts\r\n    ) external onlyAdmin {\r\n        if (_collaterals.length != _slashAmounts.length) revert WrongArgument();\r\n        for (uint256 i = 0; i < _collaterals.length; i++) {\r\n            address collateralAddress = _collaterals[i];\r\n            uint256 slashAmount = _slashAmounts[i];\r\n            Collateral storage collateral = collaterals[collateralAddress];\r\n            //Decrease total collateral of the protocol for this asset\r\n            collateral.totalLocked -= slashAmount;\r\n            collateral.slashedAmount += slashAmount;\r\n            //Decrease total collateral of the validator for this asset\r\n            getValidatorInfo[_validator]\r\n                .collateralPools[collateralAddress]\r\n                .stakedAmount -= slashAmount;\r\n            emit SlashedValidatorCollateral(_validator, collateralAddress, slashAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Slash delegator.\r\n     * @param _delegator Delegator address.\r\n     * @param _validator Validator address.\r\n     * @param _collaterals Collaterals addresses.\r\n     * @param _slashShares Shares to be confiscated.\r\n     */\r\n    function slashDelegator(\r\n        address _delegator,\r\n        address _validator,\r\n        address[] calldata _collaterals,\r\n        uint256[] calldata _slashShares\r\n    ) external onlyAdmin {\r\n        if (_collaterals.length != _slashShares.length) revert WrongArgument();\r\n        ValidatorInfo storage validator = getValidatorInfo[_validator];\r\n        for (uint256 i = 0; i < _collaterals.length; i++) {\r\n            address collateralAddress = _collaterals[i];\r\n            uint256 slashShare = _slashShares[i];\r\n            ValidatorCollateral storage validatorCollateral = validator.collateralPools[\r\n                collateralAddress\r\n            ];\r\n            DelegatorsInfo storage delegator = validatorCollateral.delegators[_delegator];\r\n            Collateral storage collateral = collaterals[collateralAddress];\r\n\r\n            uint256 slashedAmount = DelegatedStakingHelper._calculateFromShares(\r\n                slashShare,\r\n                validatorCollateral.stakedAmount,\r\n                validatorCollateral.shares\r\n            );\r\n\r\n            delegator.shares -= slashShare;\r\n            validatorCollateral.shares -= slashShare;\r\n            validatorCollateral.stakedAmount -= slashedAmount;\r\n            collateral.slashedAmount += slashedAmount;\r\n            collateral.totalLocked -= slashedAmount;\r\n\r\n            emit SlashedDelegator(\r\n                _delegator,\r\n                _validator,\r\n                collateralAddress,\r\n                slashShare,\r\n                slashedAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw collected slashed amounts of all assets to protocol slashing treasury address\r\n     */\r\n    function withdrawSlashingTreasury() external onlyAdmin {\r\n        for (uint256 i = 0; i < collateralAddresses.length; i++) {\r\n            address collateralAddress = collateralAddresses[i];\r\n            Collateral storage currentCollateral = collaterals[collateralAddress];\r\n            uint256 slashedAmount = currentCollateral.slashedAmount;\r\n            if (slashedAmount > 0) {\r\n                currentCollateral.slashedAmount = 0;\r\n                IERC20(collateralAddress).safeTransfer(slashingTreasury, slashedAmount);\r\n                emit WithdrawSlashingTreasury(collateralAddress, slashedAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== INTERNAL ========== */\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    // /**\r\n    //  * @dev checks strategy reserves\r\n    //  * @param _strategyController Strategy controller address\r\n    //  * @param _validator Validator address\r\n    //  * @param _collateral Collateral address\r\n    //  */\r\n    // NOTE: this doesnt work for multiple validators staked to same strategy as the gain/loss needs to be shared between them\r\n    // function _checkReserves(address _strategyController, address _validator, address _collateral) internal {\r\n    //     Strategy storage strategy = strategies[_strategyController][_collateral];\r\n    //     ValidatorCollateral storage validatorCollateral = getValidatorInfo[_validator].collateralPools[_collateral];\r\n    //     uint256 cachedReserves = strategy.totalReserves;\r\n    //     strategy.totalReserves = IStrategy(_strategyController).updateReserves(address(this), strategy.strategyToken);\r\n    //     if (strategy.totalReserves > cachedReserves) {\r\n    //        uint256 additionalShares = DelegatedStakingHelper._calculateShares(\r\n    //            strategy.totalReserves - cachedReserves,\r\n    //            strategy.totalShares,\r\n    //            strategy.totalReserves\r\n    //        );\r\n    //        validatorCollateral.strategyShares[_strategyController] += additionalShares;\r\n    //        strategy.totalShares += additionalShares;\r\n    //        validatorCollateral.locked += additionalShares;\r\n    //     } else {\r\n    //         uint256 reducedShares = DelegatedStakingHelper._calculateShares(\r\n    //             cachedReserves - strategy.totalReserves,\r\n    //             strategy.totalShares,\r\n    //             strategy.totalReserves\r\n    //         );\r\n    //         validatorCollateral.strategyShares[_strategyController] -= reducedShares;\r\n    //         strategy.totalShares -= reducedShares;\r\n    //         validatorCollateral.locked -= reducedShares;\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Get price per share\r\n    //  * @param _strategy Address of strategy\r\n    //  * @param _collateral Address of collateral\r\n    //  */\r\n    // function getPricePerFullStrategyShare(address _strategy, address _stakeToken, address _collateral)\r\n    //     external\r\n    //     view\r\n    //     returns (uint256)\r\n    // {\r\n    //     if (strategies[_strategy][_stakeToken].totalShares == 0) revert ZeroAmount();\r\n    //     uint256 totalStrategyTokenReserves = IStrategy(_strategy).updateReserves(address(this), _collateral);\r\n    //     return totalStrategyTokenReserves/strategies[_strategy][_stakeToken].totalShares;\r\n    // }\r\n\r\n    /**\r\n     * @dev Get price per validator share\r\n     * @param _validator Address of validator\r\n     * @param _collateral Address of collateral\r\n     */\r\n    function getPricePerFullValidatorShare(address _validator, address _collateral)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        ValidatorCollateral storage validatorCollateral = getValidatorInfo[_validator]\r\n            .collateralPools[_collateral];\r\n        Collateral memory collateral = collaterals[_collateral];\r\n        if (validatorCollateral.shares == 0) revert ZeroAmount();\r\n        return\r\n            (validatorCollateral.stakedAmount * 10**collateral.decimals) /\r\n            validatorCollateral.shares;\r\n    }\r\n\r\n    /**\r\n     * @dev Get ETH amount of validator collateral\r\n     * @param _validator Address of validator\r\n     * @param _collateral Address of collateral\r\n     * @return ETH amount with decimals 18\r\n     */\r\n    function getPoolETHAmount(address _validator, address _collateral)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 collateralPrice = priceConsumer.getPriceOfTokenInWETH(_collateral);\r\n        Collateral memory collateral = collaterals[_collateral];\r\n        return\r\n            (getValidatorInfo[_validator].collateralPools[_collateral].stakedAmount *\r\n                10**(18 - collateral.decimals) *\r\n                collateralPrice) / 10**18;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total ETH amount of validator collateral\r\n     * @param _validator Address of validator\r\n     */\r\n    function getTotalETHAmount(address _validator)\r\n        public\r\n        view\r\n        returns (uint256[] memory poolsAmounts, uint256 totalAmount)\r\n    {\r\n        poolsAmounts = new uint256[](collateralAddresses.length);\r\n        for (uint256 i = 0; i < collateralAddresses.length; i++) {\r\n            uint256 poolAmount = getPoolETHAmount(_validator, collateralAddresses[i]);\r\n            totalAmount += poolAmount;\r\n            poolsAmounts[i] = poolAmount;\r\n        }\r\n        return (poolsAmounts, totalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get withdrawal request.\r\n     * @param _validator Validator address.\r\n     * @param _withdrawalId Withdrawal identifier.\r\n     */\r\n    function getWithdrawalRequest(address _validator, uint256 _withdrawalId)\r\n        external\r\n        view\r\n        returns (WithdrawalInfo memory)\r\n    {\r\n        return getWithdrawalRequests[_validator].withdrawals[_withdrawalId];\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Get strategy info\r\n    //  * @param _strategy Strategy address\r\n    //  * @param _stakeToken Stake token address\r\n    //  */\r\n    // function getStrategy(address _strategy, address _stakeToken) external view returns (Strategy memory) {\r\n    //     return strategies[_strategy][_stakeToken];\r\n    // }\r\n\r\n    /**\r\n     * @dev get delegator, collateral and protocol rewards\r\n     * @param _validator address of validator\r\n     * @param _collateral Address of collateral\r\n     */\r\n    function getRewards(address _validator, address _collateral)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (\r\n            getValidatorInfo[_validator].collateralPools[_collateral].accumulatedRewards,\r\n            collaterals[_collateral].rewards\r\n        );\r\n    }\r\n\r\n    function getValidatorCollateral(address _validator, address _collateral)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 stakedAmount,\r\n            uint256 shares,\r\n            uint256 locked,\r\n            uint256 accumulatedRewards,\r\n            uint256 rewardsForWithdrawal\r\n        )\r\n    {\r\n        ValidatorCollateral storage item = getValidatorInfo[_validator].collateralPools[\r\n            _collateral\r\n        ];\r\n        return (\r\n            item.stakedAmount, // total tokens staked by delegators\r\n            item.shares, // total share of collateral tokens\r\n            item.locked, // total share locked by depositing to strategy\r\n            item.accumulatedRewards, // how many reward tokens was earned\r\n            item.rewardsForWithdrawal // how many reward tokens validator can withdrawal\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev get delegator stakes: returns whether shares, locked shares and passed rewards\r\n     * @param _validator address of validator\r\n     * @param _collateral Address of collateral\r\n     * @param _delegator address of delegator\r\n     */\r\n    function getDelegatorsInfo(\r\n        address _validator,\r\n        address _collateral,\r\n        address _delegator\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 shares, // delegator share of collateral tokens\r\n            uint256 locked, // share locked by depositing to strategy\r\n            // uint256 passedRewards, // rewards per collateral address, calculated before stake\r\n            uint256 accumulatedRewards //info how many reward tokens were earned\r\n        )\r\n    {\r\n        DelegatorsInfo storage item = getValidatorInfo[_validator]\r\n            .collateralPools[_collateral]\r\n            .delegators[_delegator];\r\n        return (\r\n            item.shares, // delegator share of collateral tokens\r\n            item.locked, // share locked by depositing to strategy\r\n            // item.passedRewards, // rewards per collateral address, calculated before stake\r\n            item.accumulatedRewards //info how many reward tokens were earned\r\n        );\r\n    }\r\n\r\n    // /**\r\n    //  * @dev Get total stake to strategy: returns total reserve amount, total shares and total rewards\r\n    //  * @param _strategy Address of strategy\r\n    //  */\r\n    // function getStrategyStakes(address _strategy, address _stakeToken) external view returns(uint256, uint256, uint256) {\r\n    //     return (\r\n    //         strategies[_strategy][_stakeToken].totalReserves,\r\n    //         strategies[_strategy][_stakeToken].totalShares,\r\n    //         strategies[_strategy][_stakeToken].rewards\r\n    //     );\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Gets total strategy shares for validator\r\n    //  * @param _validator Validator address\r\n    //  * @param _strategy Strategy address\r\n    //  */\r\n    // function getStrategyDepositInfo(address _validator, address _strategy, address _stakeToken)\r\n    //     external\r\n    //     view\r\n    //     returns(uint256)\r\n    // {\r\n    //     return getValidatorInfo[_validator].collateralPools[_stakeToken].strategyShares[_strategy];\r\n    // }\r\n\r\n    // /**\r\n    //  * @dev Gets delegator strategy shares\r\n    //  * @param _validator Validator address\r\n    //  * @param _delegator Delegator address\r\n    //  * @param _strategy Strategy address\r\n    //  */\r\n    // function getStrategyDepositInfo(address _validator, address _delegator, address _strategy, address _stakeToken)\r\n    //     external\r\n    //     view\r\n    //     returns(uint256)\r\n    // {\r\n    //     return getValidatorInfo[_validator].collateralPools[_stakeToken].delegators[_delegator].strategyShares[_strategy];\r\n    // }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockDelegatedStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../oracles/DelegatedStaking.sol\";\r\n\r\ncontract MockDelegatedStaking is DelegatedStaking {\r\n\r\n    function initializeMock(\r\n        uint256 _withdrawTimelock,\r\n        IPriceConsumer _priceConsumer,\r\n        ISwapProxy _swapProxy,\r\n        address _slashingTreasury\r\n    ) public initializer {\r\n        DelegatedStaking.initialize( _withdrawTimelock,\r\n        _priceConsumer,\r\n        _swapProxy,\r\n        _slashingTreasury);\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version2() external pure returns (uint256) {\r\n        return 102; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/periphery/DefiController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\r\nimport \"../interfaces/IUniswapV2Pair.sol\";\r\nimport \"../interfaces/IUniswapV2Factory.sol\";\r\nimport \"../interfaces/IDeBridgeGate.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract DefiController is Initializable, AccessControlUpgradeable, PausableUpgradeable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Strategy {\r\n        bool exists;\r\n        bool isEnabled;\r\n        // bool isRecoverable;\r\n        uint16 maxReservesBps;\r\n        address stakeToken;\r\n        address strategyToken;\r\n        // address rewardToken;\r\n        // uint256 totalShares;\r\n        // uint256 totalReserves;\r\n    }\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    uint256 public constant BPS_DENOMINATOR = 10000;\r\n    uint256 public constant STRATEGY_RESERVES_DELTA_BPS = 200; // 2%\r\n    bytes32 public constant WORKER_ROLE = keccak256(\"WORKER_ROLE\"); // role allowed to submit the data\r\n\r\n    mapping(address => Strategy) public strategies;\r\n    // token address => total maxReserves for all strategies using this token in bps, should be <= BPS_DENOMINATOR\r\n    mapping(address => uint256) public tokenTotalReservesBps;\r\n\r\n    IDeBridgeGate public deBridgeGate;\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AddStrategy(\r\n        address strategy,\r\n        bool isEnabled,\r\n        uint16 maxReservesBps,\r\n        address stakeToken,\r\n        address strategyToken\r\n    );\r\n\r\n    event UpdateStrategy(address indexed strategy, bool isEnabled, uint16 maxReservesBps);\r\n\r\n    event DepositToStrategy(address indexed strategy, uint256 indexed amount);\r\n\r\n    event WithdrawFromStrategy(address indexed strategy, uint256 indexed amount);\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error WorkerBadRole();\r\n    error AdminBadRole();\r\n    error StrategyNotFound();\r\n    error StrategyAlreadyExists();\r\n\r\n    error ExceedMaxStrategyReserves();\r\n\r\n    error InvalidMaxReservesBps();\r\n    error InvalidTotalMaxReservesBps();\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyWorker() {\r\n        if (!hasRole(WORKER_ROLE, msg.sender)) revert WorkerBadRole();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize()\r\n        public\r\n        //IDeBridgeGate _deBridgeGate)\r\n        initializer\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        // deBridgeGate = _deBridgeGate;\r\n    }\r\n\r\n    function depositToStrategy(uint256 _amount, address _strategy) internal {\r\n        Strategy memory strategy = strategies[_strategy];\r\n        // already checked in rebalanceStrategy\r\n        // require(strategy.isEnabled, \"strategy is not enabled\");\r\n        IStrategy strategyController = IStrategy(_strategy);\r\n\r\n        // Check that strategy will use only allowed % of all avaliable for DefiController reserves\r\n        uint256 avaliableReserves = deBridgeGate.getDefiAvaliableReserves(strategy.stakeToken);\r\n        uint256 maxStrategyReserves = (avaliableReserves * strategy.maxReservesBps) /\r\n            BPS_DENOMINATOR;\r\n        uint256 currentReserves = strategyController.updateReserves(\r\n            address(this),\r\n            strategy.strategyToken\r\n        );\r\n\r\n        if (currentReserves + _amount > maxStrategyReserves) revert ExceedMaxStrategyReserves();\r\n\r\n        // Get tokens from Gate\r\n        deBridgeGate.requestReserves(strategy.stakeToken, _amount);\r\n\r\n        // Deposit tokens to strategy\r\n        IERC20(strategy.stakeToken).safeApprove(address(strategyController), 0);\r\n        IERC20(strategy.stakeToken).safeApprove(address(strategyController), _amount);\r\n        strategyController.deposit(strategy.stakeToken, _amount);\r\n\r\n        emit DepositToStrategy(_strategy, _amount);\r\n    }\r\n\r\n    function withdrawFromStrategy(uint256 _amount, address _strategy) internal {\r\n        Strategy memory strategy = strategies[_strategy];\r\n        // already checked in rebalanceStrategy\r\n        // require(strategy.isEnabled, \" strategy is not enabled\");\r\n        IStrategy strategyController = IStrategy(_strategy);\r\n\r\n        // Withdraw tokens from strategy\r\n        strategyController.withdraw(strategy.strategyToken, _amount);\r\n        IERC20(strategy.stakeToken).safeApprove(address(deBridgeGate), 0);\r\n        IERC20(strategy.stakeToken).safeApprove(address(deBridgeGate), _amount);\r\n\r\n        // TODO: get rewards from strategy\r\n\r\n        // Return tokens to Gate\r\n        deBridgeGate.returnReserves(strategy.stakeToken, _amount);\r\n\r\n        emit WithdrawFromStrategy(_strategy, _amount);\r\n    }\r\n\r\n    function rebalanceStrategy(address _strategy) external onlyWorker whenNotPaused {\r\n        (uint256 deltaAmount, bool toDeposit) = isStrategyUnbalanced(_strategy);\r\n        if (deltaAmount > 0) {\r\n            if (toDeposit) {\r\n                depositToStrategy(deltaAmount, _strategy);\r\n            } else {\r\n                withdrawFromStrategy(deltaAmount, _strategy);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== VIEW ========== */\r\n\r\n    // isStrategyUnbalanced view method checks if strategy needs to be rebalanced,\r\n    // and if so returns [deltaAmount, directionToTransfer]\r\n    // where deltaAmount - delta between current strategy state and optimal state\r\n    // directionToTransfer - true if deposit is needed, false if withdraw is needed\r\n    // if strategy in optimal state it returns [0, false]\r\n    function isStrategyUnbalanced(address _strategy)\r\n        public\r\n        view\r\n        returns (uint256 _deltaAmount, bool _toDeposit)\r\n    {\r\n        Strategy memory strategy = strategies[_strategy];\r\n        if (!strategy.exists) revert StrategyNotFound();\r\n\r\n        IStrategy strategyController = IStrategy(_strategy);\r\n\r\n        // avaliableReserves = 100%\r\n        uint256 avaliableReserves = deBridgeGate.getDefiAvaliableReserves(strategy.stakeToken);\r\n        uint256 currentReserves = strategyController.updateReserves(\r\n            address(this),\r\n            strategy.strategyToken\r\n        );\r\n\r\n        // if strategy disabled\r\n        // or no reserves avaliable for stake token\r\n        // or strategy not allowed to use gate's reserves\r\n        if (!strategy.isEnabled || avaliableReserves == 0 || strategy.maxReservesBps == 0) {\r\n            // withdraw current reserves if there they are\r\n            return (currentReserves, false);\r\n        }\r\n\r\n        // current strategy reserves in bps\r\n        uint256 currentReservesBps = (currentReserves * BPS_DENOMINATOR) / avaliableReserves;\r\n        // calculate optimal value of strategy reserves in bps:\r\n        uint256 optimalReservesBps = strategy.maxReservesBps - STRATEGY_RESERVES_DELTA_BPS / 2;\r\n\r\n        if (currentReservesBps > strategy.maxReservesBps) {\r\n            // strategy reserves are more than allowed value, withdraw some to keep optimal balance\r\n            return (\r\n                ((currentReservesBps - optimalReservesBps) * avaliableReserves) / BPS_DENOMINATOR,\r\n                false\r\n            );\r\n        } else if (currentReservesBps + STRATEGY_RESERVES_DELTA_BPS < strategy.maxReservesBps) {\r\n            // strategy reserves are less than optimal value, deposit some to keep optimal balance\r\n            return (\r\n                ((optimalReservesBps - currentReservesBps) * avaliableReserves) / BPS_DENOMINATOR,\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    /* ========== ADMIN ========== */\r\n\r\n    /// @dev add new strategy\r\n    function addStrategy(\r\n        address _strategy,\r\n        bool _isEnabled,\r\n        uint16 _maxReservesBps,\r\n        address _stakeToken,\r\n        address _strategyToken\r\n    ) external onlyAdmin {\r\n        if (\r\n            _maxReservesBps != 0 &&\r\n            (_maxReservesBps <= STRATEGY_RESERVES_DELTA_BPS || BPS_DENOMINATOR < _maxReservesBps)\r\n        ) revert InvalidMaxReservesBps();\r\n\r\n        // require(_maxReservesBps == 0 ||\r\n        //     (_maxReservesBps > STRATEGY_RESERVES_DELTA_BPS && BPS_DENOMINATOR >= _maxReservesBps),\r\n        //     \"invalid maxReservesBps\");\r\n\r\n        Strategy storage strategy = strategies[_strategy];\r\n        if (strategy.exists) revert StrategyAlreadyExists();\r\n\r\n        if (_isEnabled) {\r\n            if (tokenTotalReservesBps[_stakeToken] + _maxReservesBps > BPS_DENOMINATOR)\r\n                revert InvalidTotalMaxReservesBps();\r\n            // require(tokenTotalReservesBps[_stakeToken] + _maxReservesBps <= BPS_DENOMINATOR, \"invalid total maxReservesBps\");\r\n            tokenTotalReservesBps[_stakeToken] += _maxReservesBps;\r\n        }\r\n\r\n        strategy.exists = true;\r\n        strategy.isEnabled = _isEnabled;\r\n        strategy.maxReservesBps = _maxReservesBps;\r\n        strategy.stakeToken = _stakeToken;\r\n        strategy.strategyToken = _strategyToken;\r\n\r\n        emit AddStrategy(_strategy, _isEnabled, _maxReservesBps, _stakeToken, _strategyToken);\r\n    }\r\n\r\n    function updateStrategy(\r\n        address _strategy,\r\n        bool _isEnabled,\r\n        uint16 _maxReservesBps\r\n    ) external onlyAdmin {\r\n        Strategy storage strategy = strategies[_strategy];\r\n        if (!strategy.exists) revert StrategyNotFound();\r\n        // require(strategy.exists, \"strategy doesn't exist\");\r\n\r\n        if (strategy.isEnabled) {\r\n            tokenTotalReservesBps[strategy.stakeToken] -= strategy.maxReservesBps;\r\n        }\r\n        if (_isEnabled) {\r\n            if (tokenTotalReservesBps[strategy.stakeToken] + _maxReservesBps > BPS_DENOMINATOR)\r\n                revert InvalidTotalMaxReservesBps();\r\n\r\n            //require(tokenTotalReservesBps[strategy.stakeToken] + _maxReservesBps <= BPS_DENOMINATOR, \"invalid total maxReservesBps\");\r\n            tokenTotalReservesBps[strategy.stakeToken] += _maxReservesBps;\r\n        }\r\n\r\n        strategy.isEnabled = _isEnabled;\r\n        strategy.maxReservesBps = _maxReservesBps;\r\n\r\n        emit UpdateStrategy(_strategy, _isEnabled, _maxReservesBps);\r\n    }\r\n\r\n    function setDeBridgeGate(IDeBridgeGate _deBridgeGate) external onlyAdmin {\r\n        deBridgeGate = _deBridgeGate;\r\n    }\r\n\r\n    function addWorker(address _worker) external onlyAdmin {\r\n        grantRole(WORKER_ROLE, _worker);\r\n    }\r\n\r\n    function removeWorker(address _worker) external onlyAdmin {\r\n        revokeRole(WORKER_ROLE, _worker);\r\n    }\r\n\r\n    /// @dev Disable strategies rebalancing for workers\r\n    function pause() external onlyAdmin whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    /// @dev Allow strategies rebalancing for workers\r\n    function unpause() external onlyAdmin whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockFlashCallBack.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../interfaces/IDeBridgeGate.sol\";\r\n\r\ncontract MockFlashCallback {\r\n    using SafeERC20 for IERC20;\r\n    uint256 public lastAmount;\r\n    address public lastTokenAddress;\r\n    address public lastFlashReceiver;\r\n    bool public revertOrNo;\r\n\r\n    /// @param fee The fee amount in token due to the pool by the end of the flash\r\n    // /// @param data Any data passed through by the caller via the IDeBridgeGate#flash call\r\n    function flashCallback(uint256 fee, bytes calldata /* data */) external {\r\n        if (revertOrNo) {\r\n            IERC20(lastTokenAddress).safeTransfer(lastFlashReceiver, lastAmount);\r\n        } else {\r\n            IERC20(lastTokenAddress).safeTransfer(lastFlashReceiver, lastAmount + fee);\r\n        }\r\n    }\r\n\r\n    function flash(\r\n        address _flashReceiver,\r\n        address _tokenAddress,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        bool _revert\r\n    ) external {\r\n        revertOrNo = _revert;\r\n        lastAmount = _amount;\r\n        lastTokenAddress = _tokenAddress;\r\n        lastFlashReceiver = _flashReceiver;\r\n        IDeBridgeGate(_flashReceiver).flash(_tokenAddress, _receiver, _amount, \"0\");\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockDefiController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../periphery/DefiController.sol\";\r\n\r\ncontract MockDefiController is DefiController {}\r\n"
    },
    "contracts/mock/MockWethTest.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\ncontract MockWethTest is Initializable, AccessControlUpgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    IWETH public weth; // wrapped native token contract\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    error AdminBadRole();\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyAdmin() {\r\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    function initialize(\r\n        IWETH _weth\r\n    ) public initializer {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        weth = _weth;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        weth.deposit{value: msg.value}();\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        weth.withdraw(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    function setWeth(IWETH _weth) external onlyAdmin {\r\n        weth = _weth;\r\n    }\r\n\r\n    // we need to accept ETH sends to unwrap WETH\r\n    receive() external payable {\r\n        assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockWethTestNonUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"../interfaces/IWETH.sol\";\r\n\r\ncontract MockWethTestNonUpgradeable\r\n{\r\n    using SafeERC20 for IERC20;\r\n\r\n    mapping (address => uint) public balanceOf;\r\n\r\n    IWETH public weth; // wrapped native token contract\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed src, uint wad);\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    constructor(IWETH _weth) {\r\n        weth = _weth;\r\n    }\r\n\r\n    function deposit() public payable {\r\n        balanceOf[msg.sender] += msg.value;\r\n        weth.deposit{value: msg.value}();\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] -= wad;\r\n        weth.withdraw(wad);\r\n        emit Withdrawal(msg.sender, wad);\r\n    }\r\n\r\n    // we need to accept ETH sends to unwrap WETH\r\n    receive() external payable {\r\n       // assert(msg.sender == address(weth)); // only accept ETH via fallback from the WETH contract\r\n    }\r\n\r\n    // ============ Version Control ============\r\n    function version() external pure returns (uint256) {\r\n        return 101; // 1.0.1\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockProxyConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"../interfaces/ICallProxy.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract MockProxyConsumer {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public callProxy;\r\n    address public token;\r\n    bool public lastOperationStatus;\r\n\r\n    constructor(address _callProxy, address _token) {\r\n        callProxy = _callProxy;\r\n        token = _token;\r\n    }\r\n\r\n    function transferToken(\r\n        address _token,\r\n        address _receiver,\r\n        address _fallbackAddress,\r\n        bytes memory _data\r\n    ) external payable {\r\n        bool status;\r\n        if (_token == address(0)) {\r\n            status = ICallProxy(callProxy).call{value: msg.value}(\r\n                _fallbackAddress,\r\n                _receiver,\r\n                _data,\r\n                0,\r\n                \"\"\r\n            );\r\n        } else {\r\n            IERC20(_token).transfer(callProxy, msg.value);\r\n            status = ICallProxy(callProxy).callERC20(\r\n                _token,\r\n                _fallbackAddress,\r\n                _receiver,\r\n                _data,\r\n                0,\r\n                \"\"\r\n            );\r\n        }\r\n        lastOperationStatus = status;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockDeBridgeGate.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../transfers/DeBridgeGate.sol\";\r\n\r\ncontract MockDeBridgeGate is DeBridgeGate {\r\n    uint256 public chainId;\r\n\r\n    /* ========== CONSTRUCTOR  ========== */\r\n\r\n    /// @dev Constructor that initializes the most important configurations.\r\n    /// @param _signatureVerifier Aggregator address to verify signatures\r\n    /// @param _confirmationAggregator Aggregator address to verify by oracles confirmations\r\n    function initializeMock(\r\n        uint8 _excessConfirmations,\r\n        address _signatureVerifier,\r\n        address _confirmationAggregator,\r\n        address _callProxy,\r\n        IWETH _weth,\r\n        address _feeProxy,\r\n        address _deBridgeTokenDeployer,\r\n        address _defiController,\r\n        uint256 overrideChainId\r\n    ) public initializer {\r\n        // DeBridgeGate.initialize(_excessConfirmations,\r\n        // _signatureVerifier,\r\n        // _confirmationAggregator,\r\n        // _callProxy,\r\n        // _weth,\r\n        // _feeProxy,\r\n        // _defiController);\r\n\r\n        chainId = overrideChainId;\r\n        _addAsset(\r\n            getDebridgeId(chainId, address(_weth)),\r\n            address(_weth),\r\n            abi.encodePacked(address(_weth)),\r\n            chainId\r\n        );\r\n\r\n        signatureVerifier = _signatureVerifier;\r\n        confirmationAggregator = _confirmationAggregator;\r\n\r\n        callProxyAddresses[0] = _callProxy;\r\n        defiController = _defiController;\r\n        excessConfirmations = _excessConfirmations;\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        weth = _weth;\r\n        feeProxy = _feeProxy;\r\n        deBridgeTokenDeployer = _deBridgeTokenDeployer;\r\n\r\n        flashFeeBps = 10;\r\n    }\r\n\r\n    // return overrided chain id\r\n    function getChainId() public view override returns (uint256 cid) {\r\n        return chainId;\r\n    }\r\n\r\n    /// @dev Calculate submission id.\r\n    /// @param _debridgeId Asset identifier.\r\n    /// @param _chainIdFrom Chain identifier of the chain where tokens are sent from.\r\n    /// @param _chainIdTo Chain identifier of the chain where tokens are sent to.\r\n    /// @param _receiver Receiver address.\r\n    /// @param _amount Amount of the transfered asset (note: the fee can be applyed).\r\n    /// @param _nonce Submission id.\r\n    function getSubmissionId(\r\n        bytes32 _debridgeId,\r\n        uint256 _chainIdFrom,\r\n        uint256 _chainIdTo,\r\n        uint256 _amount,\r\n        address _receiver,\r\n        uint256 _nonce\r\n    ) public pure returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encodePacked(_debridgeId, _chainIdFrom, _chainIdTo, _amount, _receiver, _nonce)\r\n            );\r\n    }\r\n\r\n    // function getEncodePackedFROM(\r\n    //     bytes memory _nativeSender,\r\n    //     bytes32 _debridgeId,\r\n    //     uint256 _chainIdFrom,\r\n    //     uint256 _amount,\r\n    //     address _receiver,\r\n    //     uint256 _nonce,//hello\r\n    //     address _fallbackAddress,\r\n    //     uint256 _executionFee,\r\n    //     bytes memory _data\r\n    // ) public view returns (bytes memory) {\r\n    //     return\r\n    //             abi.encodePacked(\r\n    //                 // To avoid error:\r\n    //                 // Variable value0 is 1 slot(s) too deep inside the stack.\r\n    //                 abi.encodePacked(\r\n    //                     //TODO: ALARM CHECK that we have the same abi.encodePacked from and TO getAutoSubmissionIdTo\r\n    //                     _nativeSender,\r\n    //                     _debridgeId,\r\n    //                     _chainIdFrom\r\n    //                 ),\r\n    //                 getChainId(),//_chainIdTo,\r\n    //                 _amount,\r\n    //                 _receiver,\r\n    //                 _nonce,\r\n    //                 _fallbackAddress,\r\n    //                 _executionFee,\r\n    //                 _data\r\n    //             );\r\n    // }\r\n\r\n    // function getEncodePackedTO(\r\n    //     bytes32 _debridgeId,\r\n    //     uint256 _chainIdTo,\r\n    //     uint256 _amount,\r\n    //     bytes memory _receiver,\r\n    //     // uint256 _nonce,\r\n    //     bytes memory _fallbackAddress,\r\n    //     uint256 _executionFee,\r\n    //     bytes memory _data\r\n    // ) public view returns  (bytes memory) {\r\n    //     return\r\n    //             abi.encodePacked(\r\n    //                 address(this), // only for test\r\n    //                 // msg.sender,\r\n    //                 _debridgeId,\r\n    //                 getChainId(),\r\n    //                 _chainIdTo,\r\n    //                 _amount,\r\n    //                 _receiver,\r\n    //                 nonce, //_nonce,\r\n    //                 _fallbackAddress,\r\n    //                 _executionFee,\r\n    //                 _data\r\n    //             );\r\n    // }\r\n}\r\n"
    },
    "contracts/periphery/AaveController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/aave/ILendingPool.sol\";\r\nimport \"../interfaces/aave/ILendingPoolAddressesProvider.sol\";\r\nimport \"../interfaces/aave/IAaveProtocolDataProvider.sol\";\r\nimport \"../interfaces/aave/IAToken.sol\";\r\nimport \"../interfaces/IStrategy.sol\";\r\n\r\ncontract AaveController is IStrategy {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public lendingPoolProvider;\r\n  address public protocolDataProvider;\r\n\r\n    constructor(address _lendingPoolProvider, address _protocolDataProvider) {\r\n        lendingPoolProvider = _lendingPoolProvider;\r\n        protocolDataProvider = _protocolDataProvider;\r\n    }\r\n\r\n    function lendingPool() public view returns (address) {\r\n        return ILendingPoolAddressesProvider(lendingPoolProvider).getLendingPool();\r\n    }\r\n\r\n  function strategyToken(address _token) public view override returns (address) {\r\n    (address newATokenAddress,,) =\r\n      IAaveProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(_token);\r\n    return newATokenAddress;\r\n  }\r\n\r\n  function updateReserves(address _account, address _token)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return IERC20(_token).balanceOf(_account);\r\n  }\r\n\r\n  function deposit(address _token, uint256 _amount) external override {\r\n    address lendPool = lendingPool();\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    IERC20(_token).safeApprove(lendPool, 0);\r\n    IERC20(_token).safeApprove(lendPool, _amount);\r\n\r\n        ILendingPool(lendPool).deposit(\r\n            _token,\r\n            _amount,\r\n            msg.sender,\r\n            0 // referral code\r\n        );\r\n    }\r\n\r\n    function withdrawAll(address _token) external override {\r\n        withdraw(_token, type(uint256).max);\r\n    }\r\n\r\n  function withdraw(address _token, uint256 _amount) public override {\r\n    address lendPool = lendingPool();\r\n    address aToken = strategyToken(_token);\r\n    IERC20(_token).safeApprove(lendPool, 0);\r\n    IERC20(_token).safeApprove(lendPool, _amount);\r\n    uint256 maxAmount = IERC20(aToken).balanceOf(msg.sender);\r\n\r\n    uint256 userBalance = IERC20(aToken).balanceOf(msg.sender);\r\n    uint256 amountToWithdraw = _amount;\r\n\r\n    if (_amount == type(uint256).max || _amount > userBalance) {\r\n      amountToWithdraw = userBalance;\r\n    }\r\n\r\n    IERC20(aToken).transferFrom(msg.sender, address(this), amountToWithdraw);\r\n\r\n    uint256 amountWithdrawn = ILendingPool(lendPool).withdraw(\r\n      _token,\r\n      amountToWithdraw,\r\n      msg.sender\r\n    );\r\n\r\n    _collectProtocolToken(aToken, amountToWithdraw/maxAmount);\r\n\r\n    require(\r\n      amountWithdrawn == _amount ||\r\n      (_amount == type(uint256).max && maxAmount == amountWithdrawn),\r\n      \"Didn't withdraw requested amount\"\r\n    );\r\n  }\r\n\r\n  // Collect stkAAVE\r\n  function _collectProtocolToken(address _token, uint256 _amount) internal {\r\n    address[] memory assets = new address[](1);\r\n    assets[0] = address(_token);\r\n    IAaveIncentivesController incentivesController = IAToken(_token).getIncentivesController();\r\n    uint256 rewardsBalance = incentivesController.getRewardsBalance(assets, address(this));\r\n    incentivesController.claimRewards(assets, _amount*rewardsBalance, address(this));\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/aave/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.8.7;\r\n\r\ninterface ILendingPool {\r\n    /**\r\n     * @dev Emitted on deposit()\r\n     * @param reserve The address of the underlying asset of the reserve\r\n     * @param user The address initiating the deposit\r\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n     * @param amount The amount deposited\r\n     * @param referral The referral code used\r\n     **/\r\n    event Deposit(\r\n        address indexed reserve,\r\n        address user,\r\n        address indexed onBehalfOf,\r\n        uint256 amount,\r\n        uint16 indexed referral\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted on withdraw()\r\n     * @param reserve The address of the underlyng asset being withdrawn\r\n     * @param user The address initiating the withdrawal, owner of aTokens\r\n     * @param to Address that will receive the underlying\r\n     * @param amount The amount to be withdrawn\r\n     **/\r\n    event Withdraw(\r\n        address indexed reserve,\r\n        address indexed user,\r\n        address indexed to,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n     * @param asset The address of the underlying asset to deposit\r\n     * @param amount The amount to be deposited\r\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n     *   is a different wallet\r\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n     *   0 if the action is executed directly by the user, without any middle-man\r\n     **/\r\n    function deposit(\r\n        address asset,\r\n        uint256 amount,\r\n        address onBehalfOf,\r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n     * @param asset The address of the underlying asset to withdraw\r\n     * @param amount The underlying amount to be withdrawn\r\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n     * @param to Address that will receive the underlying, same as msg.sender if the user\r\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n     *   different wallet\r\n     * @return The final amount withdrawn\r\n     **/\r\n    function withdraw(\r\n        address asset,\r\n        uint256 amount,\r\n        address to\r\n    ) external returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/aave/ILendingPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPool() external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/aave/IAaveProtocolDataProvider.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.8.7;\r\n\r\ninterface IAaveProtocolDataProvider {\r\n    function getReserveTokensAddresses(address asset)\r\n        external\r\n        view\r\n        returns (\r\n            address aTokenAddress,\r\n            address stableDebtTokenAddress,\r\n            address variableDebtTokenAddress\r\n        );\r\n}\r\n"
    },
    "contracts/interfaces/aave/IAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IAaveIncentivesController.sol\";\r\n\r\ninterface IAToken is IERC20 {\r\n\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n  function getIncentivesController() external view returns (IAaveIncentivesController);\r\n\r\n  // always returns the most up to date balance of the user, including their\r\n  // principal balance + the interest generated by the principal balance.\r\n  function balanceOf(address user)\r\n    external\r\n    view\r\n    override(IERC20)\r\n    returns (uint256);\r\n}\r\n"
    },
    "contracts/mock/yearn/MockYearnController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./MockYToken.sol\";\r\nimport \"./YRegistry.sol\";\r\nimport \"./MockYVault.sol\";\r\nimport \"../../interfaces/IStrategy.sol\";\r\nimport \"hardhat/console.sol\";\r\n\r\ncontract MockYearnController is IStrategy {\r\n\r\n  using SafeERC20 for IERC20;\r\n\r\n  address yRegistry;\r\n  mapping(address => address) public underlyingToYToken;\r\n\r\n  constructor(address _yRegistry) {\r\n    yRegistry = _yRegistry;\r\n    mapToYTokens();\r\n  }\r\n\r\n  function mapToYTokens() internal {\r\n    MockYearnVault[] memory yTokens = YRegistry(yRegistry).getVaults();\r\n    for (uint256 i = 0; i < yTokens.length; i++) {\r\n      underlyingToYToken[MockYearnVault(yTokens[i]).underlying()] = address(yTokens[i]);\r\n    }\r\n  }\r\n\r\n  function strategyToken(address _token) public view override returns (address) {\r\n      require(underlyingToYToken[_token] != address(0), \"MockYearnController: underlying does not map to yToken\");\r\n    return underlyingToYToken[_token];\r\n  }\r\n\r\n  function updateReserves(address _account, address _token)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return MockYToken(_token).balanceOf(_account);\r\n  }\r\n\r\n  function deposit(address _token, uint256 _amount) external override {\r\n    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    address yToken = strategyToken(_token);\r\n    IERC20(_token).safeApprove(yToken, 0);\r\n    IERC20(_token).safeApprove(yToken, _amount);\r\n    MockYToken(yToken).deposit(_amount);\r\n  }\r\n\r\n  function withdrawAll(address _token) external override {\r\n    withdraw(_token, type(uint256).max);\r\n  }\r\n\r\n  function withdraw(address _token, uint256 _amount) public override {\r\n    MockYToken(_token).withdraw(_amount);\r\n  }\r\n}\r\n"
    },
    "contracts/mock/MockProxyReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n// MockProxyReceiver receives payable and non-payable calls from CallProxy.sol.\r\n// Used for positive proxy tests\r\ncontract MockProxyReceiver {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint256 public result = 0;\r\n    uint256[] public resultArray;\r\n    uint256 public weiReceived = 0;\r\n    uint256 public tokensReceived;\r\n    string public lastHit = \"\";\r\n\r\n    function setUint256Payable(uint256 _result) external payable {\r\n        lastHit = \"setUint256Payable\";\r\n        result = _result;\r\n        weiReceived = msg.value;\r\n    }\r\n\r\n    function setArrayUint256Payable(uint256[] memory _result) external payable {\r\n        lastHit = \"setArrayUint256Payable\";\r\n        resultArray = _result;\r\n        weiReceived = msg.value;\r\n    }\r\n\r\n    function setArrayAndPullToken(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256[] memory _result\r\n    ) external {\r\n        lastHit = \"setArrayAndPullToken\";\r\n        resultArray = _result;\r\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\r\n        tokensReceived = balanceAfter - balanceBefore;\r\n    }\r\n\r\n    function setUint256AndPullToken(\r\n        address _token,\r\n        uint256 _amount,\r\n        uint256 _result\r\n    ) external {\r\n        lastHit = \"setUint256AndPullToken\";\r\n        result = _result;\r\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\r\n        tokensReceived = balanceAfter - balanceBefore;\r\n    }\r\n\r\n    // This function is called for all messages sent to\r\n    // this contract, except plain Ether transfers\r\n    // (there is no other function except the receive function).\r\n    // Any call with non-empty calldata to this contract will execute\r\n    // the fallback function (even if Ether is sent along with the call).\r\n    fallback() external payable {\r\n        lastHit = \"fallback\";\r\n        weiReceived = msg.value;\r\n    }\r\n\r\n    // This function is called for plain Ether transfers, i.e.\r\n    // for every call with empty calldata.\r\n    receive() external payable {\r\n        lastHit = \"receive\";\r\n        weiReceived = msg.value;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/MockToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract MockToken is ERC20 {\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal\r\n    ) ERC20(_name, _symbol) {\r\n        _decimals = _decimal;\r\n    }\r\n\r\n    fallback() external payable { }\r\n\r\n    receive() external payable { }\r\n\r\n    function mint(address _receiver, uint256 _amount) external {\r\n        _mint(_receiver, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mock/MockLinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\nimport \"../interfaces/IERC677Receiver.sol\";\r\n\r\ncontract MockLinkToken is ERC20, ERC20Permit {\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimal\r\n    ) ERC20(_name, _symbol) ERC20Permit(_name) {\r\n        _decimals = _decimal;\r\n    }\r\n\r\n    function mint(address _receiver, uint256 _amount) external {\r\n        _mint(_receiver, _amount);\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function transferAndCall(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) public returns (bool success) {\r\n        super.transfer(_to, _value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if (isContract(_to)) {\r\n            contractFallback(_to, _value, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function contractFallback(\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) private {\r\n        IERC677Receiver receiver = IERC677Receiver(_to);\r\n        receiver.onTokenTransfer(msg.sender, _value, _data);\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool hasCode) {\r\n        uint256 length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return length > 0;\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IERC677Receiver is IERC20 {\r\n    function onTokenTransfer(\r\n        address _sender,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/mock/MockFeeProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../periphery/FeeProxy.sol\";\r\n\r\ncontract MockFeeProxy is FeeProxy {\r\n    uint256 chainId;\r\n\r\n    function initializeMock(IUniswapV2Factory _uniswapFactory, IWETH _weth) public initializer {\r\n        FeeProxy.initialize(_uniswapFactory, _weth);\r\n    }\r\n\r\n    /// @dev override chain id (BSC/HECO)\r\n    function overrideChainId(uint256 _chainId) external onlyAdmin {\r\n        chainId = _chainId;\r\n    }\r\n\r\n    // return overrided chain id\r\n    function getChainId() public view override returns (uint256 cid) {\r\n        return chainId;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ILinkToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface ILinkToken is IERC20 {\r\n    function transferAndCall(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (bool success);\r\n}\r\n"
    },
    "contracts/interfaces/aave/IStakedAave.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IStakedAave is IERC20 {\r\n    function COOLDOWN_SECONDS() external view returns (uint256);\r\n\r\n    function getTotalRewardsBalance(address staker) external view returns (uint256);\r\n    function stakersCooldowns(address staker) external view returns (uint256);\r\n\r\n    function stake(address to, uint256 amount) external;\r\n    function redeem(address to, uint256 amount) external;\r\n    function cooldown() external;\r\n    function claimRewards(address to, uint256 amount) external;\r\n}"
    },
    "contracts/mock/MockStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\nimport \"../interfaces/IStrategy.sol\";\r\n\r\ncontract MockStrategy is IStrategy {\r\n    uint256 public balance;\r\n\r\n    constructor() {\r\n        balance = 0;\r\n    }\r\n\r\n    // suppress \"unused variable\" warnings by commenting out variable names\r\n\r\n    function deposit(\r\n        address /* _token */,\r\n        uint256 _amount\r\n    ) external override {\r\n        balance += _amount;\r\n    }\r\n\r\n    function withdraw(\r\n        address /* _token */,\r\n        uint256 _amount\r\n    ) external override {\r\n        balance -= _amount;\r\n    }\r\n\r\n    function withdrawAll(address /* token */) external override {\r\n        balance = 0;\r\n    }\r\n\r\n    function updateReserves(\r\n        address /* account */,\r\n        address /* token */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return balance;\r\n    }\r\n\r\n    function strategyToken(address /* token */) external pure override returns(address){\r\n        return address(0);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}